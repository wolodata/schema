// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/promotconfig"
)

// PromotConfig is the model entity for the PromotConfig schema.
type PromotConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// APIModel holds the value of the "api_model" field.
	APIModel string `json:"api_model,omitempty"`
	// APIURL holds the value of the "api_url" field.
	APIURL string `json:"api_url,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// PromptSystem holds the value of the "prompt_system" field.
	PromptSystem string `json:"prompt_system,omitempty"`
	// PromptUser holds the value of the "prompt_user" field.
	PromptUser   string `json:"prompt_user,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotconfig.FieldID, promotconfig.FieldName, promotconfig.FieldDescription, promotconfig.FieldAPIModel, promotconfig.FieldAPIURL, promotconfig.FieldAPIKey, promotconfig.FieldPromptSystem, promotconfig.FieldPromptUser:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotConfig fields.
func (pc *PromotConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = value.String
			}
		case promotconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case promotconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pc.Description = value.String
			}
		case promotconfig.FieldAPIModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_model", values[i])
			} else if value.Valid {
				pc.APIModel = value.String
			}
		case promotconfig.FieldAPIURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_url", values[i])
			} else if value.Valid {
				pc.APIURL = value.String
			}
		case promotconfig.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				pc.APIKey = value.String
			}
		case promotconfig.FieldPromptSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_system", values[i])
			} else if value.Valid {
				pc.PromptSystem = value.String
			}
		case promotconfig.FieldPromptUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_user", values[i])
			} else if value.Valid {
				pc.PromptUser = value.String
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotConfig.
// This includes values selected through modifiers, order, etc.
func (pc *PromotConfig) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// Update returns a builder for updating this PromotConfig.
// Note that you need to call PromotConfig.Unwrap() before calling this method if this PromotConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PromotConfig) Update() *PromotConfigUpdateOne {
	return NewPromotConfigClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PromotConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PromotConfig) Unwrap() *PromotConfig {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotConfig is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PromotConfig) String() string {
	var builder strings.Builder
	builder.WriteString("PromotConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pc.Description)
	builder.WriteString(", ")
	builder.WriteString("api_model=")
	builder.WriteString(pc.APIModel)
	builder.WriteString(", ")
	builder.WriteString("api_url=")
	builder.WriteString(pc.APIURL)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(pc.APIKey)
	builder.WriteString(", ")
	builder.WriteString("prompt_system=")
	builder.WriteString(pc.PromptSystem)
	builder.WriteString(", ")
	builder.WriteString("prompt_user=")
	builder.WriteString(pc.PromptUser)
	builder.WriteByte(')')
	return builder.String()
}

// PromotConfigs is a parsable slice of PromotConfig.
type PromotConfigs []*PromotConfig
