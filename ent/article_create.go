// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/article"
	"github.com/wolodata/schema/ent/schema"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	mutation *ArticleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOriginShortID sets the "origin_short_id" field.
func (ac *ArticleCreate) SetOriginShortID(s string) *ArticleCreate {
	ac.mutation.SetOriginShortID(s)
	return ac
}

// SetIsChinese sets the "is_chinese" field.
func (ac *ArticleCreate) SetIsChinese(b bool) *ArticleCreate {
	ac.mutation.SetIsChinese(b)
	return ac
}

// SetNillableIsChinese sets the "is_chinese" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableIsChinese(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetIsChinese(*b)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *ArticleCreate) SetURL(s string) *ArticleCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetTitleChinese sets the "title_chinese" field.
func (ac *ArticleCreate) SetTitleChinese(s string) *ArticleCreate {
	ac.mutation.SetTitleChinese(s)
	return ac
}

// SetNillableTitleChinese sets the "title_chinese" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTitleChinese(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTitleChinese(*s)
	}
	return ac
}

// SetTitleEnglish sets the "title_english" field.
func (ac *ArticleCreate) SetTitleEnglish(s string) *ArticleCreate {
	ac.mutation.SetTitleEnglish(s)
	return ac
}

// SetNillableTitleEnglish sets the "title_english" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTitleEnglish(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTitleEnglish(*s)
	}
	return ac
}

// SetPublishedAt sets the "published_at" field.
func (ac *ArticleCreate) SetPublishedAt(t time.Time) *ArticleCreate {
	ac.mutation.SetPublishedAt(t)
	return ac
}

// SetHTMLChinese sets the "html_chinese" field.
func (ac *ArticleCreate) SetHTMLChinese(s string) *ArticleCreate {
	ac.mutation.SetHTMLChinese(s)
	return ac
}

// SetNillableHTMLChinese sets the "html_chinese" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableHTMLChinese(s *string) *ArticleCreate {
	if s != nil {
		ac.SetHTMLChinese(*s)
	}
	return ac
}

// SetHTMLEnglish sets the "html_english" field.
func (ac *ArticleCreate) SetHTMLEnglish(s string) *ArticleCreate {
	ac.mutation.SetHTMLEnglish(s)
	return ac
}

// SetNillableHTMLEnglish sets the "html_english" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableHTMLEnglish(s *string) *ArticleCreate {
	if s != nil {
		ac.SetHTMLEnglish(*s)
	}
	return ac
}

// SetTextChinese sets the "text_chinese" field.
func (ac *ArticleCreate) SetTextChinese(s string) *ArticleCreate {
	ac.mutation.SetTextChinese(s)
	return ac
}

// SetNillableTextChinese sets the "text_chinese" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTextChinese(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTextChinese(*s)
	}
	return ac
}

// SetTextEnglish sets the "text_english" field.
func (ac *ArticleCreate) SetTextEnglish(s string) *ArticleCreate {
	ac.mutation.SetTextEnglish(s)
	return ac
}

// SetNillableTextEnglish sets the "text_english" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTextEnglish(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTextEnglish(*s)
	}
	return ac
}

// SetImages sets the "images" field.
func (ac *ArticleCreate) SetImages(s []string) *ArticleCreate {
	ac.mutation.SetImages(s)
	return ac
}

// SetImageUploaded sets the "image_uploaded" field.
func (ac *ArticleCreate) SetImageUploaded(b bool) *ArticleCreate {
	ac.mutation.SetImageUploaded(b)
	return ac
}

// SetNillableImageUploaded sets the "image_uploaded" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableImageUploaded(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetImageUploaded(*b)
	}
	return ac
}

// SetWeakKeywordProcessed sets the "weak_keyword_processed" field.
func (ac *ArticleCreate) SetWeakKeywordProcessed(b bool) *ArticleCreate {
	ac.mutation.SetWeakKeywordProcessed(b)
	return ac
}

// SetNillableWeakKeywordProcessed sets the "weak_keyword_processed" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableWeakKeywordProcessed(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetWeakKeywordProcessed(*b)
	}
	return ac
}

// SetWeakKeywordRelated sets the "weak_keyword_related" field.
func (ac *ArticleCreate) SetWeakKeywordRelated(b bool) *ArticleCreate {
	ac.mutation.SetWeakKeywordRelated(b)
	return ac
}

// SetNillableWeakKeywordRelated sets the "weak_keyword_related" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableWeakKeywordRelated(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetWeakKeywordRelated(*b)
	}
	return ac
}

// SetWeakKeywords sets the "weak_keywords" field.
func (ac *ArticleCreate) SetWeakKeywords(sk []schema.WeakKeyword) *ArticleCreate {
	ac.mutation.SetWeakKeywords(sk)
	return ac
}

// SetStrongKeywordProcessed sets the "strong_keyword_processed" field.
func (ac *ArticleCreate) SetStrongKeywordProcessed(b bool) *ArticleCreate {
	ac.mutation.SetStrongKeywordProcessed(b)
	return ac
}

// SetNillableStrongKeywordProcessed sets the "strong_keyword_processed" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongKeywordProcessed(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetStrongKeywordProcessed(*b)
	}
	return ac
}

// SetStrongKeywordRelated sets the "strong_keyword_related" field.
func (ac *ArticleCreate) SetStrongKeywordRelated(b bool) *ArticleCreate {
	ac.mutation.SetStrongKeywordRelated(b)
	return ac
}

// SetNillableStrongKeywordRelated sets the "strong_keyword_related" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongKeywordRelated(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetStrongKeywordRelated(*b)
	}
	return ac
}

// SetStrongKeyword sets the "strong_keyword" field.
func (ac *ArticleCreate) SetStrongKeyword(sk schema.StrongKeyword) *ArticleCreate {
	ac.mutation.SetStrongKeyword(sk)
	return ac
}

// SetNillableStrongKeyword sets the "strong_keyword" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongKeyword(sk *schema.StrongKeyword) *ArticleCreate {
	if sk != nil {
		ac.SetStrongKeyword(*sk)
	}
	return ac
}

// SetStrongRelatedProcessed sets the "strong_related_processed" field.
func (ac *ArticleCreate) SetStrongRelatedProcessed(b bool) *ArticleCreate {
	ac.mutation.SetStrongRelatedProcessed(b)
	return ac
}

// SetNillableStrongRelatedProcessed sets the "strong_related_processed" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongRelatedProcessed(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetStrongRelatedProcessed(*b)
	}
	return ac
}

// SetStrongRelated sets the "strong_related" field.
func (ac *ArticleCreate) SetStrongRelated(b bool) *ArticleCreate {
	ac.mutation.SetStrongRelated(b)
	return ac
}

// SetNillableStrongRelated sets the "strong_related" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongRelated(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetStrongRelated(*b)
	}
	return ac
}

// SetStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field.
func (ac *ArticleCreate) SetStrongRelatedCategoryProcessed(b bool) *ArticleCreate {
	ac.mutation.SetStrongRelatedCategoryProcessed(b)
	return ac
}

// SetNillableStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongRelatedCategoryProcessed(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetStrongRelatedCategoryProcessed(*b)
	}
	return ac
}

// SetStrongRelatedCategory sets the "strong_related_category" field.
func (ac *ArticleCreate) SetStrongRelatedCategory(s string) *ArticleCreate {
	ac.mutation.SetStrongRelatedCategory(s)
	return ac
}

// SetNillableStrongRelatedCategory sets the "strong_related_category" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStrongRelatedCategory(s *string) *ArticleCreate {
	if s != nil {
		ac.SetStrongRelatedCategory(*s)
	}
	return ac
}

// SetSummaryChinese sets the "summary_chinese" field.
func (ac *ArticleCreate) SetSummaryChinese(s string) *ArticleCreate {
	ac.mutation.SetSummaryChinese(s)
	return ac
}

// SetNillableSummaryChinese sets the "summary_chinese" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableSummaryChinese(s *string) *ArticleCreate {
	if s != nil {
		ac.SetSummaryChinese(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ArticleCreate) SetID(s string) *ArticleCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the ArticleMutation object of the builder.
func (ac *ArticleCreate) Mutation() *ArticleMutation {
	return ac.mutation
}

// Save creates the Article in the database.
func (ac *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArticleCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArticleCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArticleCreate) defaults() {
	if _, ok := ac.mutation.IsChinese(); !ok {
		v := article.DefaultIsChinese
		ac.mutation.SetIsChinese(v)
	}
	if _, ok := ac.mutation.TitleChinese(); !ok {
		v := article.DefaultTitleChinese
		ac.mutation.SetTitleChinese(v)
	}
	if _, ok := ac.mutation.TitleEnglish(); !ok {
		v := article.DefaultTitleEnglish
		ac.mutation.SetTitleEnglish(v)
	}
	if _, ok := ac.mutation.HTMLChinese(); !ok {
		v := article.DefaultHTMLChinese
		ac.mutation.SetHTMLChinese(v)
	}
	if _, ok := ac.mutation.HTMLEnglish(); !ok {
		v := article.DefaultHTMLEnglish
		ac.mutation.SetHTMLEnglish(v)
	}
	if _, ok := ac.mutation.TextChinese(); !ok {
		v := article.DefaultTextChinese
		ac.mutation.SetTextChinese(v)
	}
	if _, ok := ac.mutation.TextEnglish(); !ok {
		v := article.DefaultTextEnglish
		ac.mutation.SetTextEnglish(v)
	}
	if _, ok := ac.mutation.Images(); !ok {
		v := article.DefaultImages
		ac.mutation.SetImages(v)
	}
	if _, ok := ac.mutation.ImageUploaded(); !ok {
		v := article.DefaultImageUploaded
		ac.mutation.SetImageUploaded(v)
	}
	if _, ok := ac.mutation.WeakKeywordProcessed(); !ok {
		v := article.DefaultWeakKeywordProcessed
		ac.mutation.SetWeakKeywordProcessed(v)
	}
	if _, ok := ac.mutation.WeakKeywordRelated(); !ok {
		v := article.DefaultWeakKeywordRelated
		ac.mutation.SetWeakKeywordRelated(v)
	}
	if _, ok := ac.mutation.WeakKeywords(); !ok {
		v := article.DefaultWeakKeywords
		ac.mutation.SetWeakKeywords(v)
	}
	if _, ok := ac.mutation.StrongKeywordProcessed(); !ok {
		v := article.DefaultStrongKeywordProcessed
		ac.mutation.SetStrongKeywordProcessed(v)
	}
	if _, ok := ac.mutation.StrongKeywordRelated(); !ok {
		v := article.DefaultStrongKeywordRelated
		ac.mutation.SetStrongKeywordRelated(v)
	}
	if _, ok := ac.mutation.StrongRelatedProcessed(); !ok {
		v := article.DefaultStrongRelatedProcessed
		ac.mutation.SetStrongRelatedProcessed(v)
	}
	if _, ok := ac.mutation.StrongRelated(); !ok {
		v := article.DefaultStrongRelated
		ac.mutation.SetStrongRelated(v)
	}
	if _, ok := ac.mutation.StrongRelatedCategoryProcessed(); !ok {
		v := article.DefaultStrongRelatedCategoryProcessed
		ac.mutation.SetStrongRelatedCategoryProcessed(v)
	}
	if _, ok := ac.mutation.StrongRelatedCategory(); !ok {
		v := article.DefaultStrongRelatedCategory
		ac.mutation.SetStrongRelatedCategory(v)
	}
	if _, ok := ac.mutation.SummaryChinese(); !ok {
		v := article.DefaultSummaryChinese
		ac.mutation.SetSummaryChinese(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArticleCreate) check() error {
	if _, ok := ac.mutation.OriginShortID(); !ok {
		return &ValidationError{Name: "origin_short_id", err: errors.New(`ent: missing required field "Article.origin_short_id"`)}
	}
	if v, ok := ac.mutation.OriginShortID(); ok {
		if err := article.OriginShortIDValidator(v); err != nil {
			return &ValidationError{Name: "origin_short_id", err: fmt.Errorf(`ent: validator failed for field "Article.origin_short_id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsChinese(); !ok {
		return &ValidationError{Name: "is_chinese", err: errors.New(`ent: missing required field "Article.is_chinese"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Article.url"`)}
	}
	if v, ok := ac.mutation.URL(); ok {
		if err := article.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Article.url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.TitleChinese(); !ok {
		return &ValidationError{Name: "title_chinese", err: errors.New(`ent: missing required field "Article.title_chinese"`)}
	}
	if _, ok := ac.mutation.TitleEnglish(); !ok {
		return &ValidationError{Name: "title_english", err: errors.New(`ent: missing required field "Article.title_english"`)}
	}
	if _, ok := ac.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "Article.published_at"`)}
	}
	if _, ok := ac.mutation.HTMLChinese(); !ok {
		return &ValidationError{Name: "html_chinese", err: errors.New(`ent: missing required field "Article.html_chinese"`)}
	}
	if _, ok := ac.mutation.HTMLEnglish(); !ok {
		return &ValidationError{Name: "html_english", err: errors.New(`ent: missing required field "Article.html_english"`)}
	}
	if _, ok := ac.mutation.TextChinese(); !ok {
		return &ValidationError{Name: "text_chinese", err: errors.New(`ent: missing required field "Article.text_chinese"`)}
	}
	if _, ok := ac.mutation.TextEnglish(); !ok {
		return &ValidationError{Name: "text_english", err: errors.New(`ent: missing required field "Article.text_english"`)}
	}
	if _, ok := ac.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "Article.images"`)}
	}
	if _, ok := ac.mutation.ImageUploaded(); !ok {
		return &ValidationError{Name: "image_uploaded", err: errors.New(`ent: missing required field "Article.image_uploaded"`)}
	}
	if _, ok := ac.mutation.WeakKeywordProcessed(); !ok {
		return &ValidationError{Name: "weak_keyword_processed", err: errors.New(`ent: missing required field "Article.weak_keyword_processed"`)}
	}
	if _, ok := ac.mutation.WeakKeywordRelated(); !ok {
		return &ValidationError{Name: "weak_keyword_related", err: errors.New(`ent: missing required field "Article.weak_keyword_related"`)}
	}
	if _, ok := ac.mutation.WeakKeywords(); !ok {
		return &ValidationError{Name: "weak_keywords", err: errors.New(`ent: missing required field "Article.weak_keywords"`)}
	}
	if _, ok := ac.mutation.StrongKeywordProcessed(); !ok {
		return &ValidationError{Name: "strong_keyword_processed", err: errors.New(`ent: missing required field "Article.strong_keyword_processed"`)}
	}
	if _, ok := ac.mutation.StrongKeywordRelated(); !ok {
		return &ValidationError{Name: "strong_keyword_related", err: errors.New(`ent: missing required field "Article.strong_keyword_related"`)}
	}
	if _, ok := ac.mutation.StrongRelatedProcessed(); !ok {
		return &ValidationError{Name: "strong_related_processed", err: errors.New(`ent: missing required field "Article.strong_related_processed"`)}
	}
	if _, ok := ac.mutation.StrongRelated(); !ok {
		return &ValidationError{Name: "strong_related", err: errors.New(`ent: missing required field "Article.strong_related"`)}
	}
	if _, ok := ac.mutation.StrongRelatedCategoryProcessed(); !ok {
		return &ValidationError{Name: "strong_related_category_processed", err: errors.New(`ent: missing required field "Article.strong_related_category_processed"`)}
	}
	if _, ok := ac.mutation.StrongRelatedCategory(); !ok {
		return &ValidationError{Name: "strong_related_category", err: errors.New(`ent: missing required field "Article.strong_related_category"`)}
	}
	if _, ok := ac.mutation.SummaryChinese(); !ok {
		return &ValidationError{Name: "summary_chinese", err: errors.New(`ent: missing required field "Article.summary_chinese"`)}
	}
	return nil
}

func (ac *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Article.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ArticleCreate) createSpec() (*Article, *sqlgraph.CreateSpec) {
	var (
		_node = &Article{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(article.Table, sqlgraph.NewFieldSpec(article.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.OriginShortID(); ok {
		_spec.SetField(article.FieldOriginShortID, field.TypeString, value)
		_node.OriginShortID = value
	}
	if value, ok := ac.mutation.IsChinese(); ok {
		_spec.SetField(article.FieldIsChinese, field.TypeBool, value)
		_node.IsChinese = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(article.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.TitleChinese(); ok {
		_spec.SetField(article.FieldTitleChinese, field.TypeString, value)
		_node.TitleChinese = value
	}
	if value, ok := ac.mutation.TitleEnglish(); ok {
		_spec.SetField(article.FieldTitleEnglish, field.TypeString, value)
		_node.TitleEnglish = value
	}
	if value, ok := ac.mutation.PublishedAt(); ok {
		_spec.SetField(article.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := ac.mutation.HTMLChinese(); ok {
		_spec.SetField(article.FieldHTMLChinese, field.TypeString, value)
		_node.HTMLChinese = value
	}
	if value, ok := ac.mutation.HTMLEnglish(); ok {
		_spec.SetField(article.FieldHTMLEnglish, field.TypeString, value)
		_node.HTMLEnglish = value
	}
	if value, ok := ac.mutation.TextChinese(); ok {
		_spec.SetField(article.FieldTextChinese, field.TypeString, value)
		_node.TextChinese = value
	}
	if value, ok := ac.mutation.TextEnglish(); ok {
		_spec.SetField(article.FieldTextEnglish, field.TypeString, value)
		_node.TextEnglish = value
	}
	if value, ok := ac.mutation.Images(); ok {
		_spec.SetField(article.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := ac.mutation.ImageUploaded(); ok {
		_spec.SetField(article.FieldImageUploaded, field.TypeBool, value)
		_node.ImageUploaded = value
	}
	if value, ok := ac.mutation.WeakKeywordProcessed(); ok {
		_spec.SetField(article.FieldWeakKeywordProcessed, field.TypeBool, value)
		_node.WeakKeywordProcessed = value
	}
	if value, ok := ac.mutation.WeakKeywordRelated(); ok {
		_spec.SetField(article.FieldWeakKeywordRelated, field.TypeBool, value)
		_node.WeakKeywordRelated = value
	}
	if value, ok := ac.mutation.WeakKeywords(); ok {
		_spec.SetField(article.FieldWeakKeywords, field.TypeJSON, value)
		_node.WeakKeywords = value
	}
	if value, ok := ac.mutation.StrongKeywordProcessed(); ok {
		_spec.SetField(article.FieldStrongKeywordProcessed, field.TypeBool, value)
		_node.StrongKeywordProcessed = value
	}
	if value, ok := ac.mutation.StrongKeywordRelated(); ok {
		_spec.SetField(article.FieldStrongKeywordRelated, field.TypeBool, value)
		_node.StrongKeywordRelated = value
	}
	if value, ok := ac.mutation.StrongKeyword(); ok {
		_spec.SetField(article.FieldStrongKeyword, field.TypeJSON, value)
		_node.StrongKeyword = value
	}
	if value, ok := ac.mutation.StrongRelatedProcessed(); ok {
		_spec.SetField(article.FieldStrongRelatedProcessed, field.TypeBool, value)
		_node.StrongRelatedProcessed = value
	}
	if value, ok := ac.mutation.StrongRelated(); ok {
		_spec.SetField(article.FieldStrongRelated, field.TypeBool, value)
		_node.StrongRelated = value
	}
	if value, ok := ac.mutation.StrongRelatedCategoryProcessed(); ok {
		_spec.SetField(article.FieldStrongRelatedCategoryProcessed, field.TypeBool, value)
		_node.StrongRelatedCategoryProcessed = value
	}
	if value, ok := ac.mutation.StrongRelatedCategory(); ok {
		_spec.SetField(article.FieldStrongRelatedCategory, field.TypeString, value)
		_node.StrongRelatedCategory = value
	}
	if value, ok := ac.mutation.SummaryChinese(); ok {
		_spec.SetField(article.FieldSummaryChinese, field.TypeString, value)
		_node.SummaryChinese = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Article.Create().
//		SetOriginShortID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArticleUpsert) {
//			SetOriginShortID(v+v).
//		}).
//		Exec(ctx)
func (ac *ArticleCreate) OnConflict(opts ...sql.ConflictOption) *ArticleUpsertOne {
	ac.conflict = opts
	return &ArticleUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ArticleCreate) OnConflictColumns(columns ...string) *ArticleUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ArticleUpsertOne{
		create: ac,
	}
}

type (
	// ArticleUpsertOne is the builder for "upsert"-ing
	//  one Article node.
	ArticleUpsertOne struct {
		create *ArticleCreate
	}

	// ArticleUpsert is the "OnConflict" setter.
	ArticleUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitleChinese sets the "title_chinese" field.
func (u *ArticleUpsert) SetTitleChinese(v string) *ArticleUpsert {
	u.Set(article.FieldTitleChinese, v)
	return u
}

// UpdateTitleChinese sets the "title_chinese" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateTitleChinese() *ArticleUpsert {
	u.SetExcluded(article.FieldTitleChinese)
	return u
}

// SetTitleEnglish sets the "title_english" field.
func (u *ArticleUpsert) SetTitleEnglish(v string) *ArticleUpsert {
	u.Set(article.FieldTitleEnglish, v)
	return u
}

// UpdateTitleEnglish sets the "title_english" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateTitleEnglish() *ArticleUpsert {
	u.SetExcluded(article.FieldTitleEnglish)
	return u
}

// SetHTMLChinese sets the "html_chinese" field.
func (u *ArticleUpsert) SetHTMLChinese(v string) *ArticleUpsert {
	u.Set(article.FieldHTMLChinese, v)
	return u
}

// UpdateHTMLChinese sets the "html_chinese" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateHTMLChinese() *ArticleUpsert {
	u.SetExcluded(article.FieldHTMLChinese)
	return u
}

// SetHTMLEnglish sets the "html_english" field.
func (u *ArticleUpsert) SetHTMLEnglish(v string) *ArticleUpsert {
	u.Set(article.FieldHTMLEnglish, v)
	return u
}

// UpdateHTMLEnglish sets the "html_english" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateHTMLEnglish() *ArticleUpsert {
	u.SetExcluded(article.FieldHTMLEnglish)
	return u
}

// SetTextChinese sets the "text_chinese" field.
func (u *ArticleUpsert) SetTextChinese(v string) *ArticleUpsert {
	u.Set(article.FieldTextChinese, v)
	return u
}

// UpdateTextChinese sets the "text_chinese" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateTextChinese() *ArticleUpsert {
	u.SetExcluded(article.FieldTextChinese)
	return u
}

// SetTextEnglish sets the "text_english" field.
func (u *ArticleUpsert) SetTextEnglish(v string) *ArticleUpsert {
	u.Set(article.FieldTextEnglish, v)
	return u
}

// UpdateTextEnglish sets the "text_english" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateTextEnglish() *ArticleUpsert {
	u.SetExcluded(article.FieldTextEnglish)
	return u
}

// SetImages sets the "images" field.
func (u *ArticleUpsert) SetImages(v []string) *ArticleUpsert {
	u.Set(article.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateImages() *ArticleUpsert {
	u.SetExcluded(article.FieldImages)
	return u
}

// SetImageUploaded sets the "image_uploaded" field.
func (u *ArticleUpsert) SetImageUploaded(v bool) *ArticleUpsert {
	u.Set(article.FieldImageUploaded, v)
	return u
}

// UpdateImageUploaded sets the "image_uploaded" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateImageUploaded() *ArticleUpsert {
	u.SetExcluded(article.FieldImageUploaded)
	return u
}

// SetWeakKeywordProcessed sets the "weak_keyword_processed" field.
func (u *ArticleUpsert) SetWeakKeywordProcessed(v bool) *ArticleUpsert {
	u.Set(article.FieldWeakKeywordProcessed, v)
	return u
}

// UpdateWeakKeywordProcessed sets the "weak_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateWeakKeywordProcessed() *ArticleUpsert {
	u.SetExcluded(article.FieldWeakKeywordProcessed)
	return u
}

// SetWeakKeywordRelated sets the "weak_keyword_related" field.
func (u *ArticleUpsert) SetWeakKeywordRelated(v bool) *ArticleUpsert {
	u.Set(article.FieldWeakKeywordRelated, v)
	return u
}

// UpdateWeakKeywordRelated sets the "weak_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateWeakKeywordRelated() *ArticleUpsert {
	u.SetExcluded(article.FieldWeakKeywordRelated)
	return u
}

// SetWeakKeywords sets the "weak_keywords" field.
func (u *ArticleUpsert) SetWeakKeywords(v []schema.WeakKeyword) *ArticleUpsert {
	u.Set(article.FieldWeakKeywords, v)
	return u
}

// UpdateWeakKeywords sets the "weak_keywords" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateWeakKeywords() *ArticleUpsert {
	u.SetExcluded(article.FieldWeakKeywords)
	return u
}

// SetStrongKeywordProcessed sets the "strong_keyword_processed" field.
func (u *ArticleUpsert) SetStrongKeywordProcessed(v bool) *ArticleUpsert {
	u.Set(article.FieldStrongKeywordProcessed, v)
	return u
}

// UpdateStrongKeywordProcessed sets the "strong_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongKeywordProcessed() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongKeywordProcessed)
	return u
}

// SetStrongKeywordRelated sets the "strong_keyword_related" field.
func (u *ArticleUpsert) SetStrongKeywordRelated(v bool) *ArticleUpsert {
	u.Set(article.FieldStrongKeywordRelated, v)
	return u
}

// UpdateStrongKeywordRelated sets the "strong_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongKeywordRelated() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongKeywordRelated)
	return u
}

// SetStrongKeyword sets the "strong_keyword" field.
func (u *ArticleUpsert) SetStrongKeyword(v schema.StrongKeyword) *ArticleUpsert {
	u.Set(article.FieldStrongKeyword, v)
	return u
}

// UpdateStrongKeyword sets the "strong_keyword" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongKeyword() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongKeyword)
	return u
}

// ClearStrongKeyword clears the value of the "strong_keyword" field.
func (u *ArticleUpsert) ClearStrongKeyword() *ArticleUpsert {
	u.SetNull(article.FieldStrongKeyword)
	return u
}

// SetStrongRelatedProcessed sets the "strong_related_processed" field.
func (u *ArticleUpsert) SetStrongRelatedProcessed(v bool) *ArticleUpsert {
	u.Set(article.FieldStrongRelatedProcessed, v)
	return u
}

// UpdateStrongRelatedProcessed sets the "strong_related_processed" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongRelatedProcessed() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongRelatedProcessed)
	return u
}

// SetStrongRelated sets the "strong_related" field.
func (u *ArticleUpsert) SetStrongRelated(v bool) *ArticleUpsert {
	u.Set(article.FieldStrongRelated, v)
	return u
}

// UpdateStrongRelated sets the "strong_related" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongRelated() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongRelated)
	return u
}

// SetStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field.
func (u *ArticleUpsert) SetStrongRelatedCategoryProcessed(v bool) *ArticleUpsert {
	u.Set(article.FieldStrongRelatedCategoryProcessed, v)
	return u
}

// UpdateStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongRelatedCategoryProcessed() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongRelatedCategoryProcessed)
	return u
}

// SetStrongRelatedCategory sets the "strong_related_category" field.
func (u *ArticleUpsert) SetStrongRelatedCategory(v string) *ArticleUpsert {
	u.Set(article.FieldStrongRelatedCategory, v)
	return u
}

// UpdateStrongRelatedCategory sets the "strong_related_category" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStrongRelatedCategory() *ArticleUpsert {
	u.SetExcluded(article.FieldStrongRelatedCategory)
	return u
}

// SetSummaryChinese sets the "summary_chinese" field.
func (u *ArticleUpsert) SetSummaryChinese(v string) *ArticleUpsert {
	u.Set(article.FieldSummaryChinese, v)
	return u
}

// UpdateSummaryChinese sets the "summary_chinese" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateSummaryChinese() *ArticleUpsert {
	u.SetExcluded(article.FieldSummaryChinese)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(article.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ArticleUpsertOne) UpdateNewValues() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(article.FieldID)
		}
		if _, exists := u.create.mutation.OriginShortID(); exists {
			s.SetIgnore(article.FieldOriginShortID)
		}
		if _, exists := u.create.mutation.IsChinese(); exists {
			s.SetIgnore(article.FieldIsChinese)
		}
		if _, exists := u.create.mutation.URL(); exists {
			s.SetIgnore(article.FieldURL)
		}
		if _, exists := u.create.mutation.PublishedAt(); exists {
			s.SetIgnore(article.FieldPublishedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Article.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ArticleUpsertOne) Ignore() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArticleUpsertOne) DoNothing() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArticleCreate.OnConflict
// documentation for more info.
func (u *ArticleUpsertOne) Update(set func(*ArticleUpsert)) *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitleChinese sets the "title_chinese" field.
func (u *ArticleUpsertOne) SetTitleChinese(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitleChinese(v)
	})
}

// UpdateTitleChinese sets the "title_chinese" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateTitleChinese() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitleChinese()
	})
}

// SetTitleEnglish sets the "title_english" field.
func (u *ArticleUpsertOne) SetTitleEnglish(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitleEnglish(v)
	})
}

// UpdateTitleEnglish sets the "title_english" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateTitleEnglish() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitleEnglish()
	})
}

// SetHTMLChinese sets the "html_chinese" field.
func (u *ArticleUpsertOne) SetHTMLChinese(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHTMLChinese(v)
	})
}

// UpdateHTMLChinese sets the "html_chinese" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateHTMLChinese() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHTMLChinese()
	})
}

// SetHTMLEnglish sets the "html_english" field.
func (u *ArticleUpsertOne) SetHTMLEnglish(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHTMLEnglish(v)
	})
}

// UpdateHTMLEnglish sets the "html_english" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateHTMLEnglish() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHTMLEnglish()
	})
}

// SetTextChinese sets the "text_chinese" field.
func (u *ArticleUpsertOne) SetTextChinese(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTextChinese(v)
	})
}

// UpdateTextChinese sets the "text_chinese" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateTextChinese() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTextChinese()
	})
}

// SetTextEnglish sets the "text_english" field.
func (u *ArticleUpsertOne) SetTextEnglish(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTextEnglish(v)
	})
}

// UpdateTextEnglish sets the "text_english" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateTextEnglish() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTextEnglish()
	})
}

// SetImages sets the "images" field.
func (u *ArticleUpsertOne) SetImages(v []string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateImages() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateImages()
	})
}

// SetImageUploaded sets the "image_uploaded" field.
func (u *ArticleUpsertOne) SetImageUploaded(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetImageUploaded(v)
	})
}

// UpdateImageUploaded sets the "image_uploaded" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateImageUploaded() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateImageUploaded()
	})
}

// SetWeakKeywordProcessed sets the "weak_keyword_processed" field.
func (u *ArticleUpsertOne) SetWeakKeywordProcessed(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywordProcessed(v)
	})
}

// UpdateWeakKeywordProcessed sets the "weak_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateWeakKeywordProcessed() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywordProcessed()
	})
}

// SetWeakKeywordRelated sets the "weak_keyword_related" field.
func (u *ArticleUpsertOne) SetWeakKeywordRelated(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywordRelated(v)
	})
}

// UpdateWeakKeywordRelated sets the "weak_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateWeakKeywordRelated() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywordRelated()
	})
}

// SetWeakKeywords sets the "weak_keywords" field.
func (u *ArticleUpsertOne) SetWeakKeywords(v []schema.WeakKeyword) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywords(v)
	})
}

// UpdateWeakKeywords sets the "weak_keywords" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateWeakKeywords() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywords()
	})
}

// SetStrongKeywordProcessed sets the "strong_keyword_processed" field.
func (u *ArticleUpsertOne) SetStrongKeywordProcessed(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeywordProcessed(v)
	})
}

// UpdateStrongKeywordProcessed sets the "strong_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongKeywordProcessed() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeywordProcessed()
	})
}

// SetStrongKeywordRelated sets the "strong_keyword_related" field.
func (u *ArticleUpsertOne) SetStrongKeywordRelated(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeywordRelated(v)
	})
}

// UpdateStrongKeywordRelated sets the "strong_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongKeywordRelated() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeywordRelated()
	})
}

// SetStrongKeyword sets the "strong_keyword" field.
func (u *ArticleUpsertOne) SetStrongKeyword(v schema.StrongKeyword) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeyword(v)
	})
}

// UpdateStrongKeyword sets the "strong_keyword" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongKeyword() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeyword()
	})
}

// ClearStrongKeyword clears the value of the "strong_keyword" field.
func (u *ArticleUpsertOne) ClearStrongKeyword() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearStrongKeyword()
	})
}

// SetStrongRelatedProcessed sets the "strong_related_processed" field.
func (u *ArticleUpsertOne) SetStrongRelatedProcessed(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedProcessed(v)
	})
}

// UpdateStrongRelatedProcessed sets the "strong_related_processed" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongRelatedProcessed() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedProcessed()
	})
}

// SetStrongRelated sets the "strong_related" field.
func (u *ArticleUpsertOne) SetStrongRelated(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelated(v)
	})
}

// UpdateStrongRelated sets the "strong_related" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongRelated() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelated()
	})
}

// SetStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field.
func (u *ArticleUpsertOne) SetStrongRelatedCategoryProcessed(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedCategoryProcessed(v)
	})
}

// UpdateStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongRelatedCategoryProcessed() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedCategoryProcessed()
	})
}

// SetStrongRelatedCategory sets the "strong_related_category" field.
func (u *ArticleUpsertOne) SetStrongRelatedCategory(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedCategory(v)
	})
}

// UpdateStrongRelatedCategory sets the "strong_related_category" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStrongRelatedCategory() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedCategory()
	})
}

// SetSummaryChinese sets the "summary_chinese" field.
func (u *ArticleUpsertOne) SetSummaryChinese(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetSummaryChinese(v)
	})
}

// UpdateSummaryChinese sets the "summary_chinese" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateSummaryChinese() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateSummaryChinese()
	})
}

// Exec executes the query.
func (u *ArticleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArticleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArticleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArticleUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ArticleUpsertOne.ID is not supported by MySQL driver. Use ArticleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArticleUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArticleCreateBulk is the builder for creating many Article entities in bulk.
type ArticleCreateBulk struct {
	config
	err      error
	builders []*ArticleCreate
	conflict []sql.ConflictOption
}

// Save creates the Article entities in the database.
func (acb *ArticleCreateBulk) Save(ctx context.Context) ([]*Article, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Article, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArticleCreateBulk) SaveX(ctx context.Context) []*Article {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArticleCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Article.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArticleUpsert) {
//			SetOriginShortID(v+v).
//		}).
//		Exec(ctx)
func (acb *ArticleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArticleUpsertBulk {
	acb.conflict = opts
	return &ArticleUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ArticleCreateBulk) OnConflictColumns(columns ...string) *ArticleUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ArticleUpsertBulk{
		create: acb,
	}
}

// ArticleUpsertBulk is the builder for "upsert"-ing
// a bulk of Article nodes.
type ArticleUpsertBulk struct {
	create *ArticleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(article.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ArticleUpsertBulk) UpdateNewValues() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(article.FieldID)
			}
			if _, exists := b.mutation.OriginShortID(); exists {
				s.SetIgnore(article.FieldOriginShortID)
			}
			if _, exists := b.mutation.IsChinese(); exists {
				s.SetIgnore(article.FieldIsChinese)
			}
			if _, exists := b.mutation.URL(); exists {
				s.SetIgnore(article.FieldURL)
			}
			if _, exists := b.mutation.PublishedAt(); exists {
				s.SetIgnore(article.FieldPublishedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ArticleUpsertBulk) Ignore() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArticleUpsertBulk) DoNothing() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArticleCreateBulk.OnConflict
// documentation for more info.
func (u *ArticleUpsertBulk) Update(set func(*ArticleUpsert)) *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitleChinese sets the "title_chinese" field.
func (u *ArticleUpsertBulk) SetTitleChinese(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitleChinese(v)
	})
}

// UpdateTitleChinese sets the "title_chinese" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateTitleChinese() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitleChinese()
	})
}

// SetTitleEnglish sets the "title_english" field.
func (u *ArticleUpsertBulk) SetTitleEnglish(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitleEnglish(v)
	})
}

// UpdateTitleEnglish sets the "title_english" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateTitleEnglish() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitleEnglish()
	})
}

// SetHTMLChinese sets the "html_chinese" field.
func (u *ArticleUpsertBulk) SetHTMLChinese(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHTMLChinese(v)
	})
}

// UpdateHTMLChinese sets the "html_chinese" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateHTMLChinese() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHTMLChinese()
	})
}

// SetHTMLEnglish sets the "html_english" field.
func (u *ArticleUpsertBulk) SetHTMLEnglish(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHTMLEnglish(v)
	})
}

// UpdateHTMLEnglish sets the "html_english" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateHTMLEnglish() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHTMLEnglish()
	})
}

// SetTextChinese sets the "text_chinese" field.
func (u *ArticleUpsertBulk) SetTextChinese(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTextChinese(v)
	})
}

// UpdateTextChinese sets the "text_chinese" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateTextChinese() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTextChinese()
	})
}

// SetTextEnglish sets the "text_english" field.
func (u *ArticleUpsertBulk) SetTextEnglish(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTextEnglish(v)
	})
}

// UpdateTextEnglish sets the "text_english" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateTextEnglish() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTextEnglish()
	})
}

// SetImages sets the "images" field.
func (u *ArticleUpsertBulk) SetImages(v []string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateImages() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateImages()
	})
}

// SetImageUploaded sets the "image_uploaded" field.
func (u *ArticleUpsertBulk) SetImageUploaded(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetImageUploaded(v)
	})
}

// UpdateImageUploaded sets the "image_uploaded" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateImageUploaded() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateImageUploaded()
	})
}

// SetWeakKeywordProcessed sets the "weak_keyword_processed" field.
func (u *ArticleUpsertBulk) SetWeakKeywordProcessed(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywordProcessed(v)
	})
}

// UpdateWeakKeywordProcessed sets the "weak_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateWeakKeywordProcessed() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywordProcessed()
	})
}

// SetWeakKeywordRelated sets the "weak_keyword_related" field.
func (u *ArticleUpsertBulk) SetWeakKeywordRelated(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywordRelated(v)
	})
}

// UpdateWeakKeywordRelated sets the "weak_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateWeakKeywordRelated() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywordRelated()
	})
}

// SetWeakKeywords sets the "weak_keywords" field.
func (u *ArticleUpsertBulk) SetWeakKeywords(v []schema.WeakKeyword) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetWeakKeywords(v)
	})
}

// UpdateWeakKeywords sets the "weak_keywords" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateWeakKeywords() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateWeakKeywords()
	})
}

// SetStrongKeywordProcessed sets the "strong_keyword_processed" field.
func (u *ArticleUpsertBulk) SetStrongKeywordProcessed(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeywordProcessed(v)
	})
}

// UpdateStrongKeywordProcessed sets the "strong_keyword_processed" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongKeywordProcessed() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeywordProcessed()
	})
}

// SetStrongKeywordRelated sets the "strong_keyword_related" field.
func (u *ArticleUpsertBulk) SetStrongKeywordRelated(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeywordRelated(v)
	})
}

// UpdateStrongKeywordRelated sets the "strong_keyword_related" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongKeywordRelated() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeywordRelated()
	})
}

// SetStrongKeyword sets the "strong_keyword" field.
func (u *ArticleUpsertBulk) SetStrongKeyword(v schema.StrongKeyword) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongKeyword(v)
	})
}

// UpdateStrongKeyword sets the "strong_keyword" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongKeyword() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongKeyword()
	})
}

// ClearStrongKeyword clears the value of the "strong_keyword" field.
func (u *ArticleUpsertBulk) ClearStrongKeyword() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearStrongKeyword()
	})
}

// SetStrongRelatedProcessed sets the "strong_related_processed" field.
func (u *ArticleUpsertBulk) SetStrongRelatedProcessed(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedProcessed(v)
	})
}

// UpdateStrongRelatedProcessed sets the "strong_related_processed" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongRelatedProcessed() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedProcessed()
	})
}

// SetStrongRelated sets the "strong_related" field.
func (u *ArticleUpsertBulk) SetStrongRelated(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelated(v)
	})
}

// UpdateStrongRelated sets the "strong_related" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongRelated() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelated()
	})
}

// SetStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field.
func (u *ArticleUpsertBulk) SetStrongRelatedCategoryProcessed(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedCategoryProcessed(v)
	})
}

// UpdateStrongRelatedCategoryProcessed sets the "strong_related_category_processed" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongRelatedCategoryProcessed() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedCategoryProcessed()
	})
}

// SetStrongRelatedCategory sets the "strong_related_category" field.
func (u *ArticleUpsertBulk) SetStrongRelatedCategory(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStrongRelatedCategory(v)
	})
}

// UpdateStrongRelatedCategory sets the "strong_related_category" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStrongRelatedCategory() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStrongRelatedCategory()
	})
}

// SetSummaryChinese sets the "summary_chinese" field.
func (u *ArticleUpsertBulk) SetSummaryChinese(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetSummaryChinese(v)
	})
}

// UpdateSummaryChinese sets the "summary_chinese" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateSummaryChinese() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateSummaryChinese()
	})
}

// Exec executes the query.
func (u *ArticleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ArticleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArticleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArticleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
