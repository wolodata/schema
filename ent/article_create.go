// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/article"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	mutation *ArticleMutation
	hooks    []Hook
}

// SetOriginName sets the "origin_name" field.
func (ac *ArticleCreate) SetOriginName(s string) *ArticleCreate {
	ac.mutation.SetOriginName(s)
	return ac
}

// SetOriginType sets the "origin_type" field.
func (ac *ArticleCreate) SetOriginType(s string) *ArticleCreate {
	ac.mutation.SetOriginType(s)
	return ac
}

// SetURL sets the "url" field.
func (ac *ArticleCreate) SetURL(s string) *ArticleCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetTitleEn sets the "title_en" field.
func (ac *ArticleCreate) SetTitleEn(s string) *ArticleCreate {
	ac.mutation.SetTitleEn(s)
	return ac
}

// SetNillableTitleEn sets the "title_en" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTitleEn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTitleEn(*s)
	}
	return ac
}

// SetTitleCn sets the "title_cn" field.
func (ac *ArticleCreate) SetTitleCn(s string) *ArticleCreate {
	ac.mutation.SetTitleCn(s)
	return ac
}

// SetNillableTitleCn sets the "title_cn" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTitleCn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTitleCn(*s)
	}
	return ac
}

// SetAuthor sets the "author" field.
func (ac *ArticleCreate) SetAuthor(s string) *ArticleCreate {
	ac.mutation.SetAuthor(s)
	return ac
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableAuthor(s *string) *ArticleCreate {
	if s != nil {
		ac.SetAuthor(*s)
	}
	return ac
}

// SetTags sets the "tags" field.
func (ac *ArticleCreate) SetTags(s []string) *ArticleCreate {
	ac.mutation.SetTags(s)
	return ac
}

// SetPublishedAt sets the "published_at" field.
func (ac *ArticleCreate) SetPublishedAt(t time.Time) *ArticleCreate {
	ac.mutation.SetPublishedAt(t)
	return ac
}

// SetRawEn sets the "raw_en" field.
func (ac *ArticleCreate) SetRawEn(s string) *ArticleCreate {
	ac.mutation.SetRawEn(s)
	return ac
}

// SetNillableRawEn sets the "raw_en" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableRawEn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetRawEn(*s)
	}
	return ac
}

// SetRawCn sets the "raw_cn" field.
func (ac *ArticleCreate) SetRawCn(s string) *ArticleCreate {
	ac.mutation.SetRawCn(s)
	return ac
}

// SetNillableRawCn sets the "raw_cn" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableRawCn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetRawCn(*s)
	}
	return ac
}

// SetPreviewEn sets the "preview_en" field.
func (ac *ArticleCreate) SetPreviewEn(s string) *ArticleCreate {
	ac.mutation.SetPreviewEn(s)
	return ac
}

// SetNillablePreviewEn sets the "preview_en" field if the given value is not nil.
func (ac *ArticleCreate) SetNillablePreviewEn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetPreviewEn(*s)
	}
	return ac
}

// SetPreviewCn sets the "preview_cn" field.
func (ac *ArticleCreate) SetPreviewCn(s string) *ArticleCreate {
	ac.mutation.SetPreviewCn(s)
	return ac
}

// SetNillablePreviewCn sets the "preview_cn" field if the given value is not nil.
func (ac *ArticleCreate) SetNillablePreviewCn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetPreviewCn(*s)
	}
	return ac
}

// SetCrawledAt sets the "crawled_at" field.
func (ac *ArticleCreate) SetCrawledAt(t time.Time) *ArticleCreate {
	ac.mutation.SetCrawledAt(t)
	return ac
}

// SetNillableCrawledAt sets the "crawled_at" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableCrawledAt(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetCrawledAt(*t)
	}
	return ac
}

// SetSummaryCn sets the "summary_cn" field.
func (ac *ArticleCreate) SetSummaryCn(s string) *ArticleCreate {
	ac.mutation.SetSummaryCn(s)
	return ac
}

// SetNillableSummaryCn sets the "summary_cn" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableSummaryCn(s *string) *ArticleCreate {
	if s != nil {
		ac.SetSummaryCn(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ArticleCreate) SetID(i int) *ArticleCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the ArticleMutation object of the builder.
func (ac *ArticleCreate) Mutation() *ArticleMutation {
	return ac.mutation
}

// Save creates the Article in the database.
func (ac *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArticleCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArticleCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArticleCreate) defaults() {
	if _, ok := ac.mutation.CrawledAt(); !ok {
		v := article.DefaultCrawledAt()
		ac.mutation.SetCrawledAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArticleCreate) check() error {
	if _, ok := ac.mutation.OriginName(); !ok {
		return &ValidationError{Name: "origin_name", err: errors.New(`ent: missing required field "Article.origin_name"`)}
	}
	if _, ok := ac.mutation.OriginType(); !ok {
		return &ValidationError{Name: "origin_type", err: errors.New(`ent: missing required field "Article.origin_type"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Article.url"`)}
	}
	if v, ok := ac.mutation.URL(); ok {
		if err := article.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Article.url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "Article.published_at"`)}
	}
	if _, ok := ac.mutation.CrawledAt(); !ok {
		return &ValidationError{Name: "crawled_at", err: errors.New(`ent: missing required field "Article.crawled_at"`)}
	}
	return nil
}

func (ac *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ArticleCreate) createSpec() (*Article, *sqlgraph.CreateSpec) {
	var (
		_node = &Article{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(article.Table, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.OriginName(); ok {
		_spec.SetField(article.FieldOriginName, field.TypeString, value)
		_node.OriginName = value
	}
	if value, ok := ac.mutation.OriginType(); ok {
		_spec.SetField(article.FieldOriginType, field.TypeString, value)
		_node.OriginType = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(article.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.TitleEn(); ok {
		_spec.SetField(article.FieldTitleEn, field.TypeString, value)
		_node.TitleEn = value
	}
	if value, ok := ac.mutation.TitleCn(); ok {
		_spec.SetField(article.FieldTitleCn, field.TypeString, value)
		_node.TitleCn = value
	}
	if value, ok := ac.mutation.Author(); ok {
		_spec.SetField(article.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := ac.mutation.Tags(); ok {
		_spec.SetField(article.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ac.mutation.PublishedAt(); ok {
		_spec.SetField(article.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := ac.mutation.RawEn(); ok {
		_spec.SetField(article.FieldRawEn, field.TypeString, value)
		_node.RawEn = value
	}
	if value, ok := ac.mutation.RawCn(); ok {
		_spec.SetField(article.FieldRawCn, field.TypeString, value)
		_node.RawCn = value
	}
	if value, ok := ac.mutation.PreviewEn(); ok {
		_spec.SetField(article.FieldPreviewEn, field.TypeString, value)
		_node.PreviewEn = value
	}
	if value, ok := ac.mutation.PreviewCn(); ok {
		_spec.SetField(article.FieldPreviewCn, field.TypeString, value)
		_node.PreviewCn = value
	}
	if value, ok := ac.mutation.CrawledAt(); ok {
		_spec.SetField(article.FieldCrawledAt, field.TypeTime, value)
		_node.CrawledAt = value
	}
	if value, ok := ac.mutation.SummaryCn(); ok {
		_spec.SetField(article.FieldSummaryCn, field.TypeString, value)
		_node.SummaryCn = value
	}
	return _node, _spec
}

// ArticleCreateBulk is the builder for creating many Article entities in bulk.
type ArticleCreateBulk struct {
	config
	err      error
	builders []*ArticleCreate
}

// Save creates the Article entities in the database.
func (acb *ArticleCreateBulk) Save(ctx context.Context) ([]*Article, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Article, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArticleCreateBulk) SaveX(ctx context.Context) []*Article {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArticleCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
