// Code generated by ent, DO NOT EDIT.

package html

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Html {
	return predicate.Html(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Html {
	return predicate.Html(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Html {
	return predicate.Html(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Html {
	return predicate.Html(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Html {
	return predicate.Html(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Html {
	return predicate.Html(sql.FieldLTE(FieldID, id))
}

// OriginShortID applies equality check predicate on the "origin_short_id" field. It's identical to OriginShortIDEQ.
func OriginShortID(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldOriginShortID, v))
}

// IsChinese applies equality check predicate on the "is_chinese" field. It's identical to IsChineseEQ.
func IsChinese(v bool) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldIsChinese, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldURL, v))
}

// HTML applies equality check predicate on the "html" field. It's identical to HTMLEQ.
func HTML(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldHTML, v))
}

// CrawledAt applies equality check predicate on the "crawled_at" field. It's identical to CrawledAtEQ.
func CrawledAt(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldCrawledAt, v))
}

// OriginShortIDEQ applies the EQ predicate on the "origin_short_id" field.
func OriginShortIDEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldOriginShortID, v))
}

// OriginShortIDNEQ applies the NEQ predicate on the "origin_short_id" field.
func OriginShortIDNEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldOriginShortID, v))
}

// OriginShortIDIn applies the In predicate on the "origin_short_id" field.
func OriginShortIDIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldIn(FieldOriginShortID, vs...))
}

// OriginShortIDNotIn applies the NotIn predicate on the "origin_short_id" field.
func OriginShortIDNotIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldNotIn(FieldOriginShortID, vs...))
}

// OriginShortIDGT applies the GT predicate on the "origin_short_id" field.
func OriginShortIDGT(v string) predicate.Html {
	return predicate.Html(sql.FieldGT(FieldOriginShortID, v))
}

// OriginShortIDGTE applies the GTE predicate on the "origin_short_id" field.
func OriginShortIDGTE(v string) predicate.Html {
	return predicate.Html(sql.FieldGTE(FieldOriginShortID, v))
}

// OriginShortIDLT applies the LT predicate on the "origin_short_id" field.
func OriginShortIDLT(v string) predicate.Html {
	return predicate.Html(sql.FieldLT(FieldOriginShortID, v))
}

// OriginShortIDLTE applies the LTE predicate on the "origin_short_id" field.
func OriginShortIDLTE(v string) predicate.Html {
	return predicate.Html(sql.FieldLTE(FieldOriginShortID, v))
}

// OriginShortIDContains applies the Contains predicate on the "origin_short_id" field.
func OriginShortIDContains(v string) predicate.Html {
	return predicate.Html(sql.FieldContains(FieldOriginShortID, v))
}

// OriginShortIDHasPrefix applies the HasPrefix predicate on the "origin_short_id" field.
func OriginShortIDHasPrefix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasPrefix(FieldOriginShortID, v))
}

// OriginShortIDHasSuffix applies the HasSuffix predicate on the "origin_short_id" field.
func OriginShortIDHasSuffix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasSuffix(FieldOriginShortID, v))
}

// OriginShortIDEqualFold applies the EqualFold predicate on the "origin_short_id" field.
func OriginShortIDEqualFold(v string) predicate.Html {
	return predicate.Html(sql.FieldEqualFold(FieldOriginShortID, v))
}

// OriginShortIDContainsFold applies the ContainsFold predicate on the "origin_short_id" field.
func OriginShortIDContainsFold(v string) predicate.Html {
	return predicate.Html(sql.FieldContainsFold(FieldOriginShortID, v))
}

// IsChineseEQ applies the EQ predicate on the "is_chinese" field.
func IsChineseEQ(v bool) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldIsChinese, v))
}

// IsChineseNEQ applies the NEQ predicate on the "is_chinese" field.
func IsChineseNEQ(v bool) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldIsChinese, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Html {
	return predicate.Html(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Html {
	return predicate.Html(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Html {
	return predicate.Html(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Html {
	return predicate.Html(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Html {
	return predicate.Html(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Html {
	return predicate.Html(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Html {
	return predicate.Html(sql.FieldContainsFold(FieldURL, v))
}

// HTMLEQ applies the EQ predicate on the "html" field.
func HTMLEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldHTML, v))
}

// HTMLNEQ applies the NEQ predicate on the "html" field.
func HTMLNEQ(v string) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldHTML, v))
}

// HTMLIn applies the In predicate on the "html" field.
func HTMLIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldIn(FieldHTML, vs...))
}

// HTMLNotIn applies the NotIn predicate on the "html" field.
func HTMLNotIn(vs ...string) predicate.Html {
	return predicate.Html(sql.FieldNotIn(FieldHTML, vs...))
}

// HTMLGT applies the GT predicate on the "html" field.
func HTMLGT(v string) predicate.Html {
	return predicate.Html(sql.FieldGT(FieldHTML, v))
}

// HTMLGTE applies the GTE predicate on the "html" field.
func HTMLGTE(v string) predicate.Html {
	return predicate.Html(sql.FieldGTE(FieldHTML, v))
}

// HTMLLT applies the LT predicate on the "html" field.
func HTMLLT(v string) predicate.Html {
	return predicate.Html(sql.FieldLT(FieldHTML, v))
}

// HTMLLTE applies the LTE predicate on the "html" field.
func HTMLLTE(v string) predicate.Html {
	return predicate.Html(sql.FieldLTE(FieldHTML, v))
}

// HTMLContains applies the Contains predicate on the "html" field.
func HTMLContains(v string) predicate.Html {
	return predicate.Html(sql.FieldContains(FieldHTML, v))
}

// HTMLHasPrefix applies the HasPrefix predicate on the "html" field.
func HTMLHasPrefix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasPrefix(FieldHTML, v))
}

// HTMLHasSuffix applies the HasSuffix predicate on the "html" field.
func HTMLHasSuffix(v string) predicate.Html {
	return predicate.Html(sql.FieldHasSuffix(FieldHTML, v))
}

// HTMLEqualFold applies the EqualFold predicate on the "html" field.
func HTMLEqualFold(v string) predicate.Html {
	return predicate.Html(sql.FieldEqualFold(FieldHTML, v))
}

// HTMLContainsFold applies the ContainsFold predicate on the "html" field.
func HTMLContainsFold(v string) predicate.Html {
	return predicate.Html(sql.FieldContainsFold(FieldHTML, v))
}

// CrawledAtEQ applies the EQ predicate on the "crawled_at" field.
func CrawledAtEQ(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldEQ(FieldCrawledAt, v))
}

// CrawledAtNEQ applies the NEQ predicate on the "crawled_at" field.
func CrawledAtNEQ(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldNEQ(FieldCrawledAt, v))
}

// CrawledAtIn applies the In predicate on the "crawled_at" field.
func CrawledAtIn(vs ...time.Time) predicate.Html {
	return predicate.Html(sql.FieldIn(FieldCrawledAt, vs...))
}

// CrawledAtNotIn applies the NotIn predicate on the "crawled_at" field.
func CrawledAtNotIn(vs ...time.Time) predicate.Html {
	return predicate.Html(sql.FieldNotIn(FieldCrawledAt, vs...))
}

// CrawledAtGT applies the GT predicate on the "crawled_at" field.
func CrawledAtGT(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldGT(FieldCrawledAt, v))
}

// CrawledAtGTE applies the GTE predicate on the "crawled_at" field.
func CrawledAtGTE(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldGTE(FieldCrawledAt, v))
}

// CrawledAtLT applies the LT predicate on the "crawled_at" field.
func CrawledAtLT(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldLT(FieldCrawledAt, v))
}

// CrawledAtLTE applies the LTE predicate on the "crawled_at" field.
func CrawledAtLTE(v time.Time) predicate.Html {
	return predicate.Html(sql.FieldLTE(FieldCrawledAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Html) predicate.Html {
	return predicate.Html(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Html) predicate.Html {
	return predicate.Html(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Html) predicate.Html {
	return predicate.Html(sql.NotPredicates(p))
}
