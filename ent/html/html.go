// Code generated by ent, DO NOT EDIT.

package html

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the html type in the database.
	Label = "html"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOriginShortID holds the string denoting the origin_short_id field in the database.
	FieldOriginShortID = "origin_short_id"
	// FieldIsChinese holds the string denoting the is_chinese field in the database.
	FieldIsChinese = "is_chinese"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldHTML holds the string denoting the html field in the database.
	FieldHTML = "html"
	// FieldCrawledAt holds the string denoting the crawled_at field in the database.
	FieldCrawledAt = "crawled_at"
	// Table holds the table name of the html in the database.
	Table = "t_html"
)

// Columns holds all SQL columns for html fields.
var Columns = []string{
	FieldID,
	FieldOriginShortID,
	FieldIsChinese,
	FieldURL,
	FieldHTML,
	FieldCrawledAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OriginShortIDValidator is a validator for the "origin_short_id" field. It is called by the builders before save.
	OriginShortIDValidator func(string) error
	// DefaultIsChinese holds the default value on creation for the "is_chinese" field.
	DefaultIsChinese bool
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// HTMLValidator is a validator for the "html" field. It is called by the builders before save.
	HTMLValidator func(string) error
	// DefaultCrawledAt holds the default value on creation for the "crawled_at" field.
	DefaultCrawledAt func() time.Time
)

// OrderOption defines the ordering options for the Html queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOriginShortID orders the results by the origin_short_id field.
func ByOriginShortID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginShortID, opts...).ToFunc()
}

// ByIsChinese orders the results by the is_chinese field.
func ByIsChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsChinese, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByHTML orders the results by the html field.
func ByHTML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTML, opts...).ToFunc()
}

// ByCrawledAt orders the results by the crawled_at field.
func ByCrawledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCrawledAt, opts...).ToFunc()
}
