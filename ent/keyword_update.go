// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keyword"
	"github.com/wolodata/schema/ent/predicate"
)

// KeywordUpdate is the builder for updating Keyword entities.
type KeywordUpdate struct {
	config
	hooks    []Hook
	mutation *KeywordMutation
}

// Where appends a list predicates to the KeywordUpdate builder.
func (ku *KeywordUpdate) Where(ps ...predicate.Keyword) *KeywordUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetWord sets the "word" field.
func (ku *KeywordUpdate) SetWord(s string) *KeywordUpdate {
	ku.mutation.SetWord(s)
	return ku
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableWord(s *string) *KeywordUpdate {
	if s != nil {
		ku.SetWord(*s)
	}
	return ku
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (ku *KeywordUpdate) SetChinaWeakRelatedCount(u uint64) *KeywordUpdate {
	ku.mutation.ResetChinaWeakRelatedCount()
	ku.mutation.SetChinaWeakRelatedCount(u)
	return ku
}

// SetNillableChinaWeakRelatedCount sets the "china_weak_related_count" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableChinaWeakRelatedCount(u *uint64) *KeywordUpdate {
	if u != nil {
		ku.SetChinaWeakRelatedCount(*u)
	}
	return ku
}

// AddChinaWeakRelatedCount adds u to the "china_weak_related_count" field.
func (ku *KeywordUpdate) AddChinaWeakRelatedCount(u int64) *KeywordUpdate {
	ku.mutation.AddChinaWeakRelatedCount(u)
	return ku
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (ku *KeywordUpdate) SetChinaStrongRelatedCount(u uint64) *KeywordUpdate {
	ku.mutation.ResetChinaStrongRelatedCount()
	ku.mutation.SetChinaStrongRelatedCount(u)
	return ku
}

// SetNillableChinaStrongRelatedCount sets the "china_strong_related_count" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableChinaStrongRelatedCount(u *uint64) *KeywordUpdate {
	if u != nil {
		ku.SetChinaStrongRelatedCount(*u)
	}
	return ku
}

// AddChinaStrongRelatedCount adds u to the "china_strong_related_count" field.
func (ku *KeywordUpdate) AddChinaStrongRelatedCount(u int64) *KeywordUpdate {
	ku.mutation.AddChinaStrongRelatedCount(u)
	return ku
}

// SetSubWord sets the "sub_word" field.
func (ku *KeywordUpdate) SetSubWord(s string) *KeywordUpdate {
	ku.mutation.SetSubWord(s)
	return ku
}

// SetNillableSubWord sets the "sub_word" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableSubWord(s *string) *KeywordUpdate {
	if s != nil {
		ku.SetSubWord(*s)
	}
	return ku
}

// SetSubWordCount sets the "sub_word_count" field.
func (ku *KeywordUpdate) SetSubWordCount(u uint64) *KeywordUpdate {
	ku.mutation.ResetSubWordCount()
	ku.mutation.SetSubWordCount(u)
	return ku
}

// SetNillableSubWordCount sets the "sub_word_count" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableSubWordCount(u *uint64) *KeywordUpdate {
	if u != nil {
		ku.SetSubWordCount(*u)
	}
	return ku
}

// AddSubWordCount adds u to the "sub_word_count" field.
func (ku *KeywordUpdate) AddSubWordCount(u int64) *KeywordUpdate {
	ku.mutation.AddSubWordCount(u)
	return ku
}

// SetCategory sets the "category" field.
func (ku *KeywordUpdate) SetCategory(u uint64) *KeywordUpdate {
	ku.mutation.ResetCategory()
	ku.mutation.SetCategory(u)
	return ku
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ku *KeywordUpdate) SetNillableCategory(u *uint64) *KeywordUpdate {
	if u != nil {
		ku.SetCategory(*u)
	}
	return ku
}

// AddCategory adds u to the "category" field.
func (ku *KeywordUpdate) AddCategory(u int64) *KeywordUpdate {
	ku.mutation.AddCategory(u)
	return ku
}

// SetUpdatedAt sets the "updated_at" field.
func (ku *KeywordUpdate) SetUpdatedAt(t time.Time) *KeywordUpdate {
	ku.mutation.SetUpdatedAt(t)
	return ku
}

// Mutation returns the KeywordMutation object of the builder.
func (ku *KeywordUpdate) Mutation() *KeywordMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeywordUpdate) Save(ctx context.Context) (int, error) {
	ku.defaults()
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeywordUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeywordUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeywordUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ku *KeywordUpdate) defaults() {
	if _, ok := ku.mutation.UpdatedAt(); !ok {
		v := keyword.UpdateDefaultUpdatedAt()
		ku.mutation.SetUpdatedAt(v)
	}
}

func (ku *KeywordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyword.Table, keyword.Columns, sqlgraph.NewFieldSpec(keyword.FieldID, field.TypeString))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Word(); ok {
		_spec.SetField(keyword.FieldWord, field.TypeString, value)
	}
	if value, ok := ku.mutation.ChinaWeakRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaWeakRelatedCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.AddedChinaWeakRelatedCount(); ok {
		_spec.AddField(keyword.FieldChinaWeakRelatedCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.ChinaStrongRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaStrongRelatedCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.AddedChinaStrongRelatedCount(); ok {
		_spec.AddField(keyword.FieldChinaStrongRelatedCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.SubWord(); ok {
		_spec.SetField(keyword.FieldSubWord, field.TypeString, value)
	}
	if value, ok := ku.mutation.SubWordCount(); ok {
		_spec.SetField(keyword.FieldSubWordCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.AddedSubWordCount(); ok {
		_spec.AddField(keyword.FieldSubWordCount, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.Category(); ok {
		_spec.SetField(keyword.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.AddedCategory(); ok {
		_spec.AddField(keyword.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.SetField(keyword.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KeywordUpdateOne is the builder for updating a single Keyword entity.
type KeywordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeywordMutation
}

// SetWord sets the "word" field.
func (kuo *KeywordUpdateOne) SetWord(s string) *KeywordUpdateOne {
	kuo.mutation.SetWord(s)
	return kuo
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableWord(s *string) *KeywordUpdateOne {
	if s != nil {
		kuo.SetWord(*s)
	}
	return kuo
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (kuo *KeywordUpdateOne) SetChinaWeakRelatedCount(u uint64) *KeywordUpdateOne {
	kuo.mutation.ResetChinaWeakRelatedCount()
	kuo.mutation.SetChinaWeakRelatedCount(u)
	return kuo
}

// SetNillableChinaWeakRelatedCount sets the "china_weak_related_count" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableChinaWeakRelatedCount(u *uint64) *KeywordUpdateOne {
	if u != nil {
		kuo.SetChinaWeakRelatedCount(*u)
	}
	return kuo
}

// AddChinaWeakRelatedCount adds u to the "china_weak_related_count" field.
func (kuo *KeywordUpdateOne) AddChinaWeakRelatedCount(u int64) *KeywordUpdateOne {
	kuo.mutation.AddChinaWeakRelatedCount(u)
	return kuo
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (kuo *KeywordUpdateOne) SetChinaStrongRelatedCount(u uint64) *KeywordUpdateOne {
	kuo.mutation.ResetChinaStrongRelatedCount()
	kuo.mutation.SetChinaStrongRelatedCount(u)
	return kuo
}

// SetNillableChinaStrongRelatedCount sets the "china_strong_related_count" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableChinaStrongRelatedCount(u *uint64) *KeywordUpdateOne {
	if u != nil {
		kuo.SetChinaStrongRelatedCount(*u)
	}
	return kuo
}

// AddChinaStrongRelatedCount adds u to the "china_strong_related_count" field.
func (kuo *KeywordUpdateOne) AddChinaStrongRelatedCount(u int64) *KeywordUpdateOne {
	kuo.mutation.AddChinaStrongRelatedCount(u)
	return kuo
}

// SetSubWord sets the "sub_word" field.
func (kuo *KeywordUpdateOne) SetSubWord(s string) *KeywordUpdateOne {
	kuo.mutation.SetSubWord(s)
	return kuo
}

// SetNillableSubWord sets the "sub_word" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableSubWord(s *string) *KeywordUpdateOne {
	if s != nil {
		kuo.SetSubWord(*s)
	}
	return kuo
}

// SetSubWordCount sets the "sub_word_count" field.
func (kuo *KeywordUpdateOne) SetSubWordCount(u uint64) *KeywordUpdateOne {
	kuo.mutation.ResetSubWordCount()
	kuo.mutation.SetSubWordCount(u)
	return kuo
}

// SetNillableSubWordCount sets the "sub_word_count" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableSubWordCount(u *uint64) *KeywordUpdateOne {
	if u != nil {
		kuo.SetSubWordCount(*u)
	}
	return kuo
}

// AddSubWordCount adds u to the "sub_word_count" field.
func (kuo *KeywordUpdateOne) AddSubWordCount(u int64) *KeywordUpdateOne {
	kuo.mutation.AddSubWordCount(u)
	return kuo
}

// SetCategory sets the "category" field.
func (kuo *KeywordUpdateOne) SetCategory(u uint64) *KeywordUpdateOne {
	kuo.mutation.ResetCategory()
	kuo.mutation.SetCategory(u)
	return kuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kuo *KeywordUpdateOne) SetNillableCategory(u *uint64) *KeywordUpdateOne {
	if u != nil {
		kuo.SetCategory(*u)
	}
	return kuo
}

// AddCategory adds u to the "category" field.
func (kuo *KeywordUpdateOne) AddCategory(u int64) *KeywordUpdateOne {
	kuo.mutation.AddCategory(u)
	return kuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kuo *KeywordUpdateOne) SetUpdatedAt(t time.Time) *KeywordUpdateOne {
	kuo.mutation.SetUpdatedAt(t)
	return kuo
}

// Mutation returns the KeywordMutation object of the builder.
func (kuo *KeywordUpdateOne) Mutation() *KeywordMutation {
	return kuo.mutation
}

// Where appends a list predicates to the KeywordUpdate builder.
func (kuo *KeywordUpdateOne) Where(ps ...predicate.Keyword) *KeywordUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeywordUpdateOne) Select(field string, fields ...string) *KeywordUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Keyword entity.
func (kuo *KeywordUpdateOne) Save(ctx context.Context) (*Keyword, error) {
	kuo.defaults()
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeywordUpdateOne) SaveX(ctx context.Context) *Keyword {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeywordUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeywordUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kuo *KeywordUpdateOne) defaults() {
	if _, ok := kuo.mutation.UpdatedAt(); !ok {
		v := keyword.UpdateDefaultUpdatedAt()
		kuo.mutation.SetUpdatedAt(v)
	}
}

func (kuo *KeywordUpdateOne) sqlSave(ctx context.Context) (_node *Keyword, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyword.Table, keyword.Columns, sqlgraph.NewFieldSpec(keyword.FieldID, field.TypeString))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Keyword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keyword.FieldID)
		for _, f := range fields {
			if !keyword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keyword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Word(); ok {
		_spec.SetField(keyword.FieldWord, field.TypeString, value)
	}
	if value, ok := kuo.mutation.ChinaWeakRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaWeakRelatedCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.AddedChinaWeakRelatedCount(); ok {
		_spec.AddField(keyword.FieldChinaWeakRelatedCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.ChinaStrongRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaStrongRelatedCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.AddedChinaStrongRelatedCount(); ok {
		_spec.AddField(keyword.FieldChinaStrongRelatedCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.SubWord(); ok {
		_spec.SetField(keyword.FieldSubWord, field.TypeString, value)
	}
	if value, ok := kuo.mutation.SubWordCount(); ok {
		_spec.SetField(keyword.FieldSubWordCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.AddedSubWordCount(); ok {
		_spec.AddField(keyword.FieldSubWordCount, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.Category(); ok {
		_spec.SetField(keyword.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.AddedCategory(); ok {
		_spec.AddField(keyword.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.SetField(keyword.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Keyword{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
