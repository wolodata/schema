// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keyword"
)

// KeywordCreate is the builder for creating a Keyword entity.
type KeywordCreate struct {
	config
	mutation *KeywordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWord sets the "word" field.
func (kc *KeywordCreate) SetWord(s string) *KeywordCreate {
	kc.mutation.SetWord(s)
	return kc
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (kc *KeywordCreate) SetChinaWeakRelatedCount(u uint64) *KeywordCreate {
	kc.mutation.SetChinaWeakRelatedCount(u)
	return kc
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (kc *KeywordCreate) SetChinaStrongRelatedCount(u uint64) *KeywordCreate {
	kc.mutation.SetChinaStrongRelatedCount(u)
	return kc
}

// SetSubWord sets the "sub_word" field.
func (kc *KeywordCreate) SetSubWord(s string) *KeywordCreate {
	kc.mutation.SetSubWord(s)
	return kc
}

// SetNillableSubWord sets the "sub_word" field if the given value is not nil.
func (kc *KeywordCreate) SetNillableSubWord(s *string) *KeywordCreate {
	if s != nil {
		kc.SetSubWord(*s)
	}
	return kc
}

// SetSubWordCount sets the "sub_word_count" field.
func (kc *KeywordCreate) SetSubWordCount(u uint64) *KeywordCreate {
	kc.mutation.SetSubWordCount(u)
	return kc
}

// SetNillableSubWordCount sets the "sub_word_count" field if the given value is not nil.
func (kc *KeywordCreate) SetNillableSubWordCount(u *uint64) *KeywordCreate {
	if u != nil {
		kc.SetSubWordCount(*u)
	}
	return kc
}

// SetCategory sets the "category" field.
func (kc *KeywordCreate) SetCategory(u uint64) *KeywordCreate {
	kc.mutation.SetCategory(u)
	return kc
}

// SetUpdatedAt sets the "updated_at" field.
func (kc *KeywordCreate) SetUpdatedAt(t time.Time) *KeywordCreate {
	kc.mutation.SetUpdatedAt(t)
	return kc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kc *KeywordCreate) SetNillableUpdatedAt(t *time.Time) *KeywordCreate {
	if t != nil {
		kc.SetUpdatedAt(*t)
	}
	return kc
}

// SetID sets the "id" field.
func (kc *KeywordCreate) SetID(s string) *KeywordCreate {
	kc.mutation.SetID(s)
	return kc
}

// Mutation returns the KeywordMutation object of the builder.
func (kc *KeywordCreate) Mutation() *KeywordMutation {
	return kc.mutation
}

// Save creates the Keyword in the database.
func (kc *KeywordCreate) Save(ctx context.Context) (*Keyword, error) {
	kc.defaults()
	return withHooks(ctx, kc.sqlSave, kc.mutation, kc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KeywordCreate) SaveX(ctx context.Context) *Keyword {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KeywordCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KeywordCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KeywordCreate) defaults() {
	if _, ok := kc.mutation.SubWord(); !ok {
		v := keyword.DefaultSubWord
		kc.mutation.SetSubWord(v)
	}
	if _, ok := kc.mutation.SubWordCount(); !ok {
		v := keyword.DefaultSubWordCount
		kc.mutation.SetSubWordCount(v)
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		v := keyword.DefaultUpdatedAt()
		kc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kc *KeywordCreate) check() error {
	if _, ok := kc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "Keyword.word"`)}
	}
	if _, ok := kc.mutation.ChinaWeakRelatedCount(); !ok {
		return &ValidationError{Name: "china_weak_related_count", err: errors.New(`ent: missing required field "Keyword.china_weak_related_count"`)}
	}
	if _, ok := kc.mutation.ChinaStrongRelatedCount(); !ok {
		return &ValidationError{Name: "china_strong_related_count", err: errors.New(`ent: missing required field "Keyword.china_strong_related_count"`)}
	}
	if _, ok := kc.mutation.SubWord(); !ok {
		return &ValidationError{Name: "sub_word", err: errors.New(`ent: missing required field "Keyword.sub_word"`)}
	}
	if _, ok := kc.mutation.SubWordCount(); !ok {
		return &ValidationError{Name: "sub_word_count", err: errors.New(`ent: missing required field "Keyword.sub_word_count"`)}
	}
	if _, ok := kc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Keyword.category"`)}
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Keyword.updated_at"`)}
	}
	return nil
}

func (kc *KeywordCreate) sqlSave(ctx context.Context) (*Keyword, error) {
	if err := kc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Keyword.ID type: %T", _spec.ID.Value)
		}
	}
	kc.mutation.id = &_node.ID
	kc.mutation.done = true
	return _node, nil
}

func (kc *KeywordCreate) createSpec() (*Keyword, *sqlgraph.CreateSpec) {
	var (
		_node = &Keyword{config: kc.config}
		_spec = sqlgraph.NewCreateSpec(keyword.Table, sqlgraph.NewFieldSpec(keyword.FieldID, field.TypeString))
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.Word(); ok {
		_spec.SetField(keyword.FieldWord, field.TypeString, value)
		_node.Word = value
	}
	if value, ok := kc.mutation.ChinaWeakRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaWeakRelatedCount, field.TypeUint64, value)
		_node.ChinaWeakRelatedCount = value
	}
	if value, ok := kc.mutation.ChinaStrongRelatedCount(); ok {
		_spec.SetField(keyword.FieldChinaStrongRelatedCount, field.TypeUint64, value)
		_node.ChinaStrongRelatedCount = value
	}
	if value, ok := kc.mutation.SubWord(); ok {
		_spec.SetField(keyword.FieldSubWord, field.TypeString, value)
		_node.SubWord = value
	}
	if value, ok := kc.mutation.SubWordCount(); ok {
		_spec.SetField(keyword.FieldSubWordCount, field.TypeUint64, value)
		_node.SubWordCount = value
	}
	if value, ok := kc.mutation.Category(); ok {
		_spec.SetField(keyword.FieldCategory, field.TypeUint64, value)
		_node.Category = value
	}
	if value, ok := kc.mutation.UpdatedAt(); ok {
		_spec.SetField(keyword.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Keyword.Create().
//		SetWord(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordUpsert) {
//			SetWord(v+v).
//		}).
//		Exec(ctx)
func (kc *KeywordCreate) OnConflict(opts ...sql.ConflictOption) *KeywordUpsertOne {
	kc.conflict = opts
	return &KeywordUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Keyword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KeywordCreate) OnConflictColumns(columns ...string) *KeywordUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KeywordUpsertOne{
		create: kc,
	}
}

type (
	// KeywordUpsertOne is the builder for "upsert"-ing
	//  one Keyword node.
	KeywordUpsertOne struct {
		create *KeywordCreate
	}

	// KeywordUpsert is the "OnConflict" setter.
	KeywordUpsert struct {
		*sql.UpdateSet
	}
)

// SetWord sets the "word" field.
func (u *KeywordUpsert) SetWord(v string) *KeywordUpsert {
	u.Set(keyword.FieldWord, v)
	return u
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateWord() *KeywordUpsert {
	u.SetExcluded(keyword.FieldWord)
	return u
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (u *KeywordUpsert) SetChinaWeakRelatedCount(v uint64) *KeywordUpsert {
	u.Set(keyword.FieldChinaWeakRelatedCount, v)
	return u
}

// UpdateChinaWeakRelatedCount sets the "china_weak_related_count" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateChinaWeakRelatedCount() *KeywordUpsert {
	u.SetExcluded(keyword.FieldChinaWeakRelatedCount)
	return u
}

// AddChinaWeakRelatedCount adds v to the "china_weak_related_count" field.
func (u *KeywordUpsert) AddChinaWeakRelatedCount(v uint64) *KeywordUpsert {
	u.Add(keyword.FieldChinaWeakRelatedCount, v)
	return u
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (u *KeywordUpsert) SetChinaStrongRelatedCount(v uint64) *KeywordUpsert {
	u.Set(keyword.FieldChinaStrongRelatedCount, v)
	return u
}

// UpdateChinaStrongRelatedCount sets the "china_strong_related_count" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateChinaStrongRelatedCount() *KeywordUpsert {
	u.SetExcluded(keyword.FieldChinaStrongRelatedCount)
	return u
}

// AddChinaStrongRelatedCount adds v to the "china_strong_related_count" field.
func (u *KeywordUpsert) AddChinaStrongRelatedCount(v uint64) *KeywordUpsert {
	u.Add(keyword.FieldChinaStrongRelatedCount, v)
	return u
}

// SetSubWord sets the "sub_word" field.
func (u *KeywordUpsert) SetSubWord(v string) *KeywordUpsert {
	u.Set(keyword.FieldSubWord, v)
	return u
}

// UpdateSubWord sets the "sub_word" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateSubWord() *KeywordUpsert {
	u.SetExcluded(keyword.FieldSubWord)
	return u
}

// SetSubWordCount sets the "sub_word_count" field.
func (u *KeywordUpsert) SetSubWordCount(v uint64) *KeywordUpsert {
	u.Set(keyword.FieldSubWordCount, v)
	return u
}

// UpdateSubWordCount sets the "sub_word_count" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateSubWordCount() *KeywordUpsert {
	u.SetExcluded(keyword.FieldSubWordCount)
	return u
}

// AddSubWordCount adds v to the "sub_word_count" field.
func (u *KeywordUpsert) AddSubWordCount(v uint64) *KeywordUpsert {
	u.Add(keyword.FieldSubWordCount, v)
	return u
}

// SetCategory sets the "category" field.
func (u *KeywordUpsert) SetCategory(v uint64) *KeywordUpsert {
	u.Set(keyword.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateCategory() *KeywordUpsert {
	u.SetExcluded(keyword.FieldCategory)
	return u
}

// AddCategory adds v to the "category" field.
func (u *KeywordUpsert) AddCategory(v uint64) *KeywordUpsert {
	u.Add(keyword.FieldCategory, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeywordUpsert) SetUpdatedAt(v time.Time) *KeywordUpsert {
	u.Set(keyword.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeywordUpsert) UpdateUpdatedAt() *KeywordUpsert {
	u.SetExcluded(keyword.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Keyword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keyword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordUpsertOne) UpdateNewValues() *KeywordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(keyword.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Keyword.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeywordUpsertOne) Ignore() *KeywordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordUpsertOne) DoNothing() *KeywordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordCreate.OnConflict
// documentation for more info.
func (u *KeywordUpsertOne) Update(set func(*KeywordUpsert)) *KeywordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordUpsert{UpdateSet: update})
	}))
	return u
}

// SetWord sets the "word" field.
func (u *KeywordUpsertOne) SetWord(v string) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateWord() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateWord()
	})
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (u *KeywordUpsertOne) SetChinaWeakRelatedCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetChinaWeakRelatedCount(v)
	})
}

// AddChinaWeakRelatedCount adds v to the "china_weak_related_count" field.
func (u *KeywordUpsertOne) AddChinaWeakRelatedCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.AddChinaWeakRelatedCount(v)
	})
}

// UpdateChinaWeakRelatedCount sets the "china_weak_related_count" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateChinaWeakRelatedCount() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateChinaWeakRelatedCount()
	})
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (u *KeywordUpsertOne) SetChinaStrongRelatedCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetChinaStrongRelatedCount(v)
	})
}

// AddChinaStrongRelatedCount adds v to the "china_strong_related_count" field.
func (u *KeywordUpsertOne) AddChinaStrongRelatedCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.AddChinaStrongRelatedCount(v)
	})
}

// UpdateChinaStrongRelatedCount sets the "china_strong_related_count" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateChinaStrongRelatedCount() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateChinaStrongRelatedCount()
	})
}

// SetSubWord sets the "sub_word" field.
func (u *KeywordUpsertOne) SetSubWord(v string) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetSubWord(v)
	})
}

// UpdateSubWord sets the "sub_word" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateSubWord() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateSubWord()
	})
}

// SetSubWordCount sets the "sub_word_count" field.
func (u *KeywordUpsertOne) SetSubWordCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetSubWordCount(v)
	})
}

// AddSubWordCount adds v to the "sub_word_count" field.
func (u *KeywordUpsertOne) AddSubWordCount(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.AddSubWordCount(v)
	})
}

// UpdateSubWordCount sets the "sub_word_count" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateSubWordCount() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateSubWordCount()
	})
}

// SetCategory sets the "category" field.
func (u *KeywordUpsertOne) SetCategory(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordUpsertOne) AddCategory(v uint64) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateCategory() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateCategory()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeywordUpsertOne) SetUpdatedAt(v time.Time) *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeywordUpsertOne) UpdateUpdatedAt() *KeywordUpsertOne {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *KeywordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeywordUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeywordUpsertOne.ID is not supported by MySQL driver. Use KeywordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeywordUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeywordCreateBulk is the builder for creating many Keyword entities in bulk.
type KeywordCreateBulk struct {
	config
	err      error
	builders []*KeywordCreate
	conflict []sql.ConflictOption
}

// Save creates the Keyword entities in the database.
func (kcb *KeywordCreateBulk) Save(ctx context.Context) ([]*Keyword, error) {
	if kcb.err != nil {
		return nil, kcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Keyword, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeywordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KeywordCreateBulk) SaveX(ctx context.Context) []*Keyword {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KeywordCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KeywordCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Keyword.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordUpsert) {
//			SetWord(v+v).
//		}).
//		Exec(ctx)
func (kcb *KeywordCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeywordUpsertBulk {
	kcb.conflict = opts
	return &KeywordUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Keyword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KeywordCreateBulk) OnConflictColumns(columns ...string) *KeywordUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KeywordUpsertBulk{
		create: kcb,
	}
}

// KeywordUpsertBulk is the builder for "upsert"-ing
// a bulk of Keyword nodes.
type KeywordUpsertBulk struct {
	create *KeywordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Keyword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keyword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordUpsertBulk) UpdateNewValues() *KeywordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(keyword.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Keyword.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeywordUpsertBulk) Ignore() *KeywordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordUpsertBulk) DoNothing() *KeywordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordCreateBulk.OnConflict
// documentation for more info.
func (u *KeywordUpsertBulk) Update(set func(*KeywordUpsert)) *KeywordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordUpsert{UpdateSet: update})
	}))
	return u
}

// SetWord sets the "word" field.
func (u *KeywordUpsertBulk) SetWord(v string) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateWord() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateWord()
	})
}

// SetChinaWeakRelatedCount sets the "china_weak_related_count" field.
func (u *KeywordUpsertBulk) SetChinaWeakRelatedCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetChinaWeakRelatedCount(v)
	})
}

// AddChinaWeakRelatedCount adds v to the "china_weak_related_count" field.
func (u *KeywordUpsertBulk) AddChinaWeakRelatedCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.AddChinaWeakRelatedCount(v)
	})
}

// UpdateChinaWeakRelatedCount sets the "china_weak_related_count" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateChinaWeakRelatedCount() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateChinaWeakRelatedCount()
	})
}

// SetChinaStrongRelatedCount sets the "china_strong_related_count" field.
func (u *KeywordUpsertBulk) SetChinaStrongRelatedCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetChinaStrongRelatedCount(v)
	})
}

// AddChinaStrongRelatedCount adds v to the "china_strong_related_count" field.
func (u *KeywordUpsertBulk) AddChinaStrongRelatedCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.AddChinaStrongRelatedCount(v)
	})
}

// UpdateChinaStrongRelatedCount sets the "china_strong_related_count" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateChinaStrongRelatedCount() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateChinaStrongRelatedCount()
	})
}

// SetSubWord sets the "sub_word" field.
func (u *KeywordUpsertBulk) SetSubWord(v string) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetSubWord(v)
	})
}

// UpdateSubWord sets the "sub_word" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateSubWord() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateSubWord()
	})
}

// SetSubWordCount sets the "sub_word_count" field.
func (u *KeywordUpsertBulk) SetSubWordCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetSubWordCount(v)
	})
}

// AddSubWordCount adds v to the "sub_word_count" field.
func (u *KeywordUpsertBulk) AddSubWordCount(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.AddSubWordCount(v)
	})
}

// UpdateSubWordCount sets the "sub_word_count" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateSubWordCount() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateSubWordCount()
	})
}

// SetCategory sets the "category" field.
func (u *KeywordUpsertBulk) SetCategory(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordUpsertBulk) AddCategory(v uint64) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateCategory() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateCategory()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KeywordUpsertBulk) SetUpdatedAt(v time.Time) *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KeywordUpsertBulk) UpdateUpdatedAt() *KeywordUpsertBulk {
	return u.Update(func(s *KeywordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *KeywordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeywordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
