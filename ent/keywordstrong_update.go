// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keywordstrong"
	"github.com/wolodata/schema/ent/predicate"
)

// KeywordStrongUpdate is the builder for updating KeywordStrong entities.
type KeywordStrongUpdate struct {
	config
	hooks    []Hook
	mutation *KeywordStrongMutation
}

// Where appends a list predicates to the KeywordStrongUpdate builder.
func (ksu *KeywordStrongUpdate) Where(ps ...predicate.KeywordStrong) *KeywordStrongUpdate {
	ksu.mutation.Where(ps...)
	return ksu
}

// SetCategory sets the "category" field.
func (ksu *KeywordStrongUpdate) SetCategory(u uint64) *KeywordStrongUpdate {
	ksu.mutation.ResetCategory()
	ksu.mutation.SetCategory(u)
	return ksu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ksu *KeywordStrongUpdate) SetNillableCategory(u *uint64) *KeywordStrongUpdate {
	if u != nil {
		ksu.SetCategory(*u)
	}
	return ksu
}

// AddCategory adds u to the "category" field.
func (ksu *KeywordStrongUpdate) AddCategory(u int64) *KeywordStrongUpdate {
	ksu.mutation.AddCategory(u)
	return ksu
}

// SetMain sets the "main" field.
func (ksu *KeywordStrongUpdate) SetMain(s string) *KeywordStrongUpdate {
	ksu.mutation.SetMain(s)
	return ksu
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (ksu *KeywordStrongUpdate) SetNillableMain(s *string) *KeywordStrongUpdate {
	if s != nil {
		ksu.SetMain(*s)
	}
	return ksu
}

// SetMainCount sets the "main_count" field.
func (ksu *KeywordStrongUpdate) SetMainCount(u uint64) *KeywordStrongUpdate {
	ksu.mutation.ResetMainCount()
	ksu.mutation.SetMainCount(u)
	return ksu
}

// SetNillableMainCount sets the "main_count" field if the given value is not nil.
func (ksu *KeywordStrongUpdate) SetNillableMainCount(u *uint64) *KeywordStrongUpdate {
	if u != nil {
		ksu.SetMainCount(*u)
	}
	return ksu
}

// AddMainCount adds u to the "main_count" field.
func (ksu *KeywordStrongUpdate) AddMainCount(u int64) *KeywordStrongUpdate {
	ksu.mutation.AddMainCount(u)
	return ksu
}

// SetSub sets the "sub" field.
func (ksu *KeywordStrongUpdate) SetSub(s string) *KeywordStrongUpdate {
	ksu.mutation.SetSub(s)
	return ksu
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (ksu *KeywordStrongUpdate) SetNillableSub(s *string) *KeywordStrongUpdate {
	if s != nil {
		ksu.SetSub(*s)
	}
	return ksu
}

// SetSubCount sets the "sub_count" field.
func (ksu *KeywordStrongUpdate) SetSubCount(u uint64) *KeywordStrongUpdate {
	ksu.mutation.ResetSubCount()
	ksu.mutation.SetSubCount(u)
	return ksu
}

// SetNillableSubCount sets the "sub_count" field if the given value is not nil.
func (ksu *KeywordStrongUpdate) SetNillableSubCount(u *uint64) *KeywordStrongUpdate {
	if u != nil {
		ksu.SetSubCount(*u)
	}
	return ksu
}

// AddSubCount adds u to the "sub_count" field.
func (ksu *KeywordStrongUpdate) AddSubCount(u int64) *KeywordStrongUpdate {
	ksu.mutation.AddSubCount(u)
	return ksu
}

// Mutation returns the KeywordStrongMutation object of the builder.
func (ksu *KeywordStrongUpdate) Mutation() *KeywordStrongMutation {
	return ksu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ksu *KeywordStrongUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ksu.sqlSave, ksu.mutation, ksu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksu *KeywordStrongUpdate) SaveX(ctx context.Context) int {
	affected, err := ksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ksu *KeywordStrongUpdate) Exec(ctx context.Context) error {
	_, err := ksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksu *KeywordStrongUpdate) ExecX(ctx context.Context) {
	if err := ksu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ksu *KeywordStrongUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keywordstrong.Table, keywordstrong.Columns, sqlgraph.NewFieldSpec(keywordstrong.FieldID, field.TypeString))
	if ps := ksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ksu.mutation.Category(); ok {
		_spec.SetField(keywordstrong.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ksu.mutation.AddedCategory(); ok {
		_spec.AddField(keywordstrong.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ksu.mutation.Main(); ok {
		_spec.SetField(keywordstrong.FieldMain, field.TypeString, value)
	}
	if value, ok := ksu.mutation.MainCount(); ok {
		_spec.SetField(keywordstrong.FieldMainCount, field.TypeUint64, value)
	}
	if value, ok := ksu.mutation.AddedMainCount(); ok {
		_spec.AddField(keywordstrong.FieldMainCount, field.TypeUint64, value)
	}
	if value, ok := ksu.mutation.Sub(); ok {
		_spec.SetField(keywordstrong.FieldSub, field.TypeString, value)
	}
	if value, ok := ksu.mutation.SubCount(); ok {
		_spec.SetField(keywordstrong.FieldSubCount, field.TypeUint64, value)
	}
	if value, ok := ksu.mutation.AddedSubCount(); ok {
		_spec.AddField(keywordstrong.FieldSubCount, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywordstrong.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ksu.mutation.done = true
	return n, nil
}

// KeywordStrongUpdateOne is the builder for updating a single KeywordStrong entity.
type KeywordStrongUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeywordStrongMutation
}

// SetCategory sets the "category" field.
func (ksuo *KeywordStrongUpdateOne) SetCategory(u uint64) *KeywordStrongUpdateOne {
	ksuo.mutation.ResetCategory()
	ksuo.mutation.SetCategory(u)
	return ksuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ksuo *KeywordStrongUpdateOne) SetNillableCategory(u *uint64) *KeywordStrongUpdateOne {
	if u != nil {
		ksuo.SetCategory(*u)
	}
	return ksuo
}

// AddCategory adds u to the "category" field.
func (ksuo *KeywordStrongUpdateOne) AddCategory(u int64) *KeywordStrongUpdateOne {
	ksuo.mutation.AddCategory(u)
	return ksuo
}

// SetMain sets the "main" field.
func (ksuo *KeywordStrongUpdateOne) SetMain(s string) *KeywordStrongUpdateOne {
	ksuo.mutation.SetMain(s)
	return ksuo
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (ksuo *KeywordStrongUpdateOne) SetNillableMain(s *string) *KeywordStrongUpdateOne {
	if s != nil {
		ksuo.SetMain(*s)
	}
	return ksuo
}

// SetMainCount sets the "main_count" field.
func (ksuo *KeywordStrongUpdateOne) SetMainCount(u uint64) *KeywordStrongUpdateOne {
	ksuo.mutation.ResetMainCount()
	ksuo.mutation.SetMainCount(u)
	return ksuo
}

// SetNillableMainCount sets the "main_count" field if the given value is not nil.
func (ksuo *KeywordStrongUpdateOne) SetNillableMainCount(u *uint64) *KeywordStrongUpdateOne {
	if u != nil {
		ksuo.SetMainCount(*u)
	}
	return ksuo
}

// AddMainCount adds u to the "main_count" field.
func (ksuo *KeywordStrongUpdateOne) AddMainCount(u int64) *KeywordStrongUpdateOne {
	ksuo.mutation.AddMainCount(u)
	return ksuo
}

// SetSub sets the "sub" field.
func (ksuo *KeywordStrongUpdateOne) SetSub(s string) *KeywordStrongUpdateOne {
	ksuo.mutation.SetSub(s)
	return ksuo
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (ksuo *KeywordStrongUpdateOne) SetNillableSub(s *string) *KeywordStrongUpdateOne {
	if s != nil {
		ksuo.SetSub(*s)
	}
	return ksuo
}

// SetSubCount sets the "sub_count" field.
func (ksuo *KeywordStrongUpdateOne) SetSubCount(u uint64) *KeywordStrongUpdateOne {
	ksuo.mutation.ResetSubCount()
	ksuo.mutation.SetSubCount(u)
	return ksuo
}

// SetNillableSubCount sets the "sub_count" field if the given value is not nil.
func (ksuo *KeywordStrongUpdateOne) SetNillableSubCount(u *uint64) *KeywordStrongUpdateOne {
	if u != nil {
		ksuo.SetSubCount(*u)
	}
	return ksuo
}

// AddSubCount adds u to the "sub_count" field.
func (ksuo *KeywordStrongUpdateOne) AddSubCount(u int64) *KeywordStrongUpdateOne {
	ksuo.mutation.AddSubCount(u)
	return ksuo
}

// Mutation returns the KeywordStrongMutation object of the builder.
func (ksuo *KeywordStrongUpdateOne) Mutation() *KeywordStrongMutation {
	return ksuo.mutation
}

// Where appends a list predicates to the KeywordStrongUpdate builder.
func (ksuo *KeywordStrongUpdateOne) Where(ps ...predicate.KeywordStrong) *KeywordStrongUpdateOne {
	ksuo.mutation.Where(ps...)
	return ksuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ksuo *KeywordStrongUpdateOne) Select(field string, fields ...string) *KeywordStrongUpdateOne {
	ksuo.fields = append([]string{field}, fields...)
	return ksuo
}

// Save executes the query and returns the updated KeywordStrong entity.
func (ksuo *KeywordStrongUpdateOne) Save(ctx context.Context) (*KeywordStrong, error) {
	return withHooks(ctx, ksuo.sqlSave, ksuo.mutation, ksuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksuo *KeywordStrongUpdateOne) SaveX(ctx context.Context) *KeywordStrong {
	node, err := ksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ksuo *KeywordStrongUpdateOne) Exec(ctx context.Context) error {
	_, err := ksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksuo *KeywordStrongUpdateOne) ExecX(ctx context.Context) {
	if err := ksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ksuo *KeywordStrongUpdateOne) sqlSave(ctx context.Context) (_node *KeywordStrong, err error) {
	_spec := sqlgraph.NewUpdateSpec(keywordstrong.Table, keywordstrong.Columns, sqlgraph.NewFieldSpec(keywordstrong.FieldID, field.TypeString))
	id, ok := ksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeywordStrong.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keywordstrong.FieldID)
		for _, f := range fields {
			if !keywordstrong.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keywordstrong.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ksuo.mutation.Category(); ok {
		_spec.SetField(keywordstrong.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ksuo.mutation.AddedCategory(); ok {
		_spec.AddField(keywordstrong.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := ksuo.mutation.Main(); ok {
		_spec.SetField(keywordstrong.FieldMain, field.TypeString, value)
	}
	if value, ok := ksuo.mutation.MainCount(); ok {
		_spec.SetField(keywordstrong.FieldMainCount, field.TypeUint64, value)
	}
	if value, ok := ksuo.mutation.AddedMainCount(); ok {
		_spec.AddField(keywordstrong.FieldMainCount, field.TypeUint64, value)
	}
	if value, ok := ksuo.mutation.Sub(); ok {
		_spec.SetField(keywordstrong.FieldSub, field.TypeString, value)
	}
	if value, ok := ksuo.mutation.SubCount(); ok {
		_spec.SetField(keywordstrong.FieldSubCount, field.TypeUint64, value)
	}
	if value, ok := ksuo.mutation.AddedSubCount(); ok {
		_spec.AddField(keywordstrong.FieldSubCount, field.TypeUint64, value)
	}
	_node = &KeywordStrong{config: ksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywordstrong.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ksuo.mutation.done = true
	return _node, nil
}
