// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/keywordstrong"
)

// KeywordStrong is the model entity for the KeywordStrong schema.
type KeywordStrong struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Category holds the value of the "category" field.
	Category uint64 `json:"category,omitempty"`
	// Main holds the value of the "main" field.
	Main string `json:"main,omitempty"`
	// MainCount holds the value of the "main_count" field.
	MainCount uint64 `json:"main_count,omitempty"`
	// Sub holds the value of the "sub" field.
	Sub string `json:"sub,omitempty"`
	// SubCount holds the value of the "sub_count" field.
	SubCount     uint64 `json:"sub_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KeywordStrong) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keywordstrong.FieldCategory, keywordstrong.FieldMainCount, keywordstrong.FieldSubCount:
			values[i] = new(sql.NullInt64)
		case keywordstrong.FieldID, keywordstrong.FieldMain, keywordstrong.FieldSub:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KeywordStrong fields.
func (ks *KeywordStrong) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keywordstrong.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ks.ID = value.String
			}
		case keywordstrong.FieldCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ks.Category = uint64(value.Int64)
			}
		case keywordstrong.FieldMain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field main", values[i])
			} else if value.Valid {
				ks.Main = value.String
			}
		case keywordstrong.FieldMainCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field main_count", values[i])
			} else if value.Valid {
				ks.MainCount = uint64(value.Int64)
			}
		case keywordstrong.FieldSub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub", values[i])
			} else if value.Valid {
				ks.Sub = value.String
			}
		case keywordstrong.FieldSubCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_count", values[i])
			} else if value.Valid {
				ks.SubCount = uint64(value.Int64)
			}
		default:
			ks.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KeywordStrong.
// This includes values selected through modifiers, order, etc.
func (ks *KeywordStrong) Value(name string) (ent.Value, error) {
	return ks.selectValues.Get(name)
}

// Update returns a builder for updating this KeywordStrong.
// Note that you need to call KeywordStrong.Unwrap() before calling this method if this KeywordStrong
// was returned from a transaction, and the transaction was committed or rolled back.
func (ks *KeywordStrong) Update() *KeywordStrongUpdateOne {
	return NewKeywordStrongClient(ks.config).UpdateOne(ks)
}

// Unwrap unwraps the KeywordStrong entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ks *KeywordStrong) Unwrap() *KeywordStrong {
	_tx, ok := ks.config.driver.(*txDriver)
	if !ok {
		panic("ent: KeywordStrong is not a transactional entity")
	}
	ks.config.driver = _tx.drv
	return ks
}

// String implements the fmt.Stringer.
func (ks *KeywordStrong) String() string {
	var builder strings.Builder
	builder.WriteString("KeywordStrong(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ks.ID))
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", ks.Category))
	builder.WriteString(", ")
	builder.WriteString("main=")
	builder.WriteString(ks.Main)
	builder.WriteString(", ")
	builder.WriteString("main_count=")
	builder.WriteString(fmt.Sprintf("%v", ks.MainCount))
	builder.WriteString(", ")
	builder.WriteString("sub=")
	builder.WriteString(ks.Sub)
	builder.WriteString(", ")
	builder.WriteString("sub_count=")
	builder.WriteString(fmt.Sprintf("%v", ks.SubCount))
	builder.WriteByte(')')
	return builder.String()
}

// KeywordStrongs is a parsable slice of KeywordStrong.
type KeywordStrongs []*KeywordStrong
