// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keywordweak"
)

// KeywordWeakCreate is the builder for creating a KeywordWeak entity.
type KeywordWeakCreate struct {
	config
	mutation *KeywordWeakMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCategory sets the "category" field.
func (kwc *KeywordWeakCreate) SetCategory(u uint64) *KeywordWeakCreate {
	kwc.mutation.SetCategory(u)
	return kwc
}

// SetWord sets the "word" field.
func (kwc *KeywordWeakCreate) SetWord(s string) *KeywordWeakCreate {
	kwc.mutation.SetWord(s)
	return kwc
}

// SetID sets the "id" field.
func (kwc *KeywordWeakCreate) SetID(s string) *KeywordWeakCreate {
	kwc.mutation.SetID(s)
	return kwc
}

// Mutation returns the KeywordWeakMutation object of the builder.
func (kwc *KeywordWeakCreate) Mutation() *KeywordWeakMutation {
	return kwc.mutation
}

// Save creates the KeywordWeak in the database.
func (kwc *KeywordWeakCreate) Save(ctx context.Context) (*KeywordWeak, error) {
	return withHooks(ctx, kwc.sqlSave, kwc.mutation, kwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kwc *KeywordWeakCreate) SaveX(ctx context.Context) *KeywordWeak {
	v, err := kwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kwc *KeywordWeakCreate) Exec(ctx context.Context) error {
	_, err := kwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kwc *KeywordWeakCreate) ExecX(ctx context.Context) {
	if err := kwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kwc *KeywordWeakCreate) check() error {
	if _, ok := kwc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "KeywordWeak.category"`)}
	}
	if _, ok := kwc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "KeywordWeak.word"`)}
	}
	return nil
}

func (kwc *KeywordWeakCreate) sqlSave(ctx context.Context) (*KeywordWeak, error) {
	if err := kwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected KeywordWeak.ID type: %T", _spec.ID.Value)
		}
	}
	kwc.mutation.id = &_node.ID
	kwc.mutation.done = true
	return _node, nil
}

func (kwc *KeywordWeakCreate) createSpec() (*KeywordWeak, *sqlgraph.CreateSpec) {
	var (
		_node = &KeywordWeak{config: kwc.config}
		_spec = sqlgraph.NewCreateSpec(keywordweak.Table, sqlgraph.NewFieldSpec(keywordweak.FieldID, field.TypeString))
	)
	_spec.OnConflict = kwc.conflict
	if id, ok := kwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kwc.mutation.Category(); ok {
		_spec.SetField(keywordweak.FieldCategory, field.TypeUint64, value)
		_node.Category = value
	}
	if value, ok := kwc.mutation.Word(); ok {
		_spec.SetField(keywordweak.FieldWord, field.TypeString, value)
		_node.Word = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeywordWeak.Create().
//		SetCategory(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordWeakUpsert) {
//			SetCategory(v+v).
//		}).
//		Exec(ctx)
func (kwc *KeywordWeakCreate) OnConflict(opts ...sql.ConflictOption) *KeywordWeakUpsertOne {
	kwc.conflict = opts
	return &KeywordWeakUpsertOne{
		create: kwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kwc *KeywordWeakCreate) OnConflictColumns(columns ...string) *KeywordWeakUpsertOne {
	kwc.conflict = append(kwc.conflict, sql.ConflictColumns(columns...))
	return &KeywordWeakUpsertOne{
		create: kwc,
	}
}

type (
	// KeywordWeakUpsertOne is the builder for "upsert"-ing
	//  one KeywordWeak node.
	KeywordWeakUpsertOne struct {
		create *KeywordWeakCreate
	}

	// KeywordWeakUpsert is the "OnConflict" setter.
	KeywordWeakUpsert struct {
		*sql.UpdateSet
	}
)

// SetCategory sets the "category" field.
func (u *KeywordWeakUpsert) SetCategory(v uint64) *KeywordWeakUpsert {
	u.Set(keywordweak.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordWeakUpsert) UpdateCategory() *KeywordWeakUpsert {
	u.SetExcluded(keywordweak.FieldCategory)
	return u
}

// AddCategory adds v to the "category" field.
func (u *KeywordWeakUpsert) AddCategory(v uint64) *KeywordWeakUpsert {
	u.Add(keywordweak.FieldCategory, v)
	return u
}

// SetWord sets the "word" field.
func (u *KeywordWeakUpsert) SetWord(v string) *KeywordWeakUpsert {
	u.Set(keywordweak.FieldWord, v)
	return u
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordWeakUpsert) UpdateWord() *KeywordWeakUpsert {
	u.SetExcluded(keywordweak.FieldWord)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keywordweak.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordWeakUpsertOne) UpdateNewValues() *KeywordWeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(keywordweak.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeywordWeakUpsertOne) Ignore() *KeywordWeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordWeakUpsertOne) DoNothing() *KeywordWeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordWeakCreate.OnConflict
// documentation for more info.
func (u *KeywordWeakUpsertOne) Update(set func(*KeywordWeakUpsert)) *KeywordWeakUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordWeakUpsert{UpdateSet: update})
	}))
	return u
}

// SetCategory sets the "category" field.
func (u *KeywordWeakUpsertOne) SetCategory(v uint64) *KeywordWeakUpsertOne {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordWeakUpsertOne) AddCategory(v uint64) *KeywordWeakUpsertOne {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordWeakUpsertOne) UpdateCategory() *KeywordWeakUpsertOne {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.UpdateCategory()
	})
}

// SetWord sets the "word" field.
func (u *KeywordWeakUpsertOne) SetWord(v string) *KeywordWeakUpsertOne {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordWeakUpsertOne) UpdateWord() *KeywordWeakUpsertOne {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.UpdateWord()
	})
}

// Exec executes the query.
func (u *KeywordWeakUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordWeakCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordWeakUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeywordWeakUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeywordWeakUpsertOne.ID is not supported by MySQL driver. Use KeywordWeakUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeywordWeakUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeywordWeakCreateBulk is the builder for creating many KeywordWeak entities in bulk.
type KeywordWeakCreateBulk struct {
	config
	err      error
	builders []*KeywordWeakCreate
	conflict []sql.ConflictOption
}

// Save creates the KeywordWeak entities in the database.
func (kwcb *KeywordWeakCreateBulk) Save(ctx context.Context) ([]*KeywordWeak, error) {
	if kwcb.err != nil {
		return nil, kwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kwcb.builders))
	nodes := make([]*KeywordWeak, len(kwcb.builders))
	mutators := make([]Mutator, len(kwcb.builders))
	for i := range kwcb.builders {
		func(i int, root context.Context) {
			builder := kwcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeywordWeakMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kwcb *KeywordWeakCreateBulk) SaveX(ctx context.Context) []*KeywordWeak {
	v, err := kwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kwcb *KeywordWeakCreateBulk) Exec(ctx context.Context) error {
	_, err := kwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kwcb *KeywordWeakCreateBulk) ExecX(ctx context.Context) {
	if err := kwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeywordWeak.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordWeakUpsert) {
//			SetCategory(v+v).
//		}).
//		Exec(ctx)
func (kwcb *KeywordWeakCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeywordWeakUpsertBulk {
	kwcb.conflict = opts
	return &KeywordWeakUpsertBulk{
		create: kwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kwcb *KeywordWeakCreateBulk) OnConflictColumns(columns ...string) *KeywordWeakUpsertBulk {
	kwcb.conflict = append(kwcb.conflict, sql.ConflictColumns(columns...))
	return &KeywordWeakUpsertBulk{
		create: kwcb,
	}
}

// KeywordWeakUpsertBulk is the builder for "upsert"-ing
// a bulk of KeywordWeak nodes.
type KeywordWeakUpsertBulk struct {
	create *KeywordWeakCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keywordweak.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordWeakUpsertBulk) UpdateNewValues() *KeywordWeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(keywordweak.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeywordWeak.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeywordWeakUpsertBulk) Ignore() *KeywordWeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordWeakUpsertBulk) DoNothing() *KeywordWeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordWeakCreateBulk.OnConflict
// documentation for more info.
func (u *KeywordWeakUpsertBulk) Update(set func(*KeywordWeakUpsert)) *KeywordWeakUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordWeakUpsert{UpdateSet: update})
	}))
	return u
}

// SetCategory sets the "category" field.
func (u *KeywordWeakUpsertBulk) SetCategory(v uint64) *KeywordWeakUpsertBulk {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordWeakUpsertBulk) AddCategory(v uint64) *KeywordWeakUpsertBulk {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordWeakUpsertBulk) UpdateCategory() *KeywordWeakUpsertBulk {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.UpdateCategory()
	})
}

// SetWord sets the "word" field.
func (u *KeywordWeakUpsertBulk) SetWord(v string) *KeywordWeakUpsertBulk {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *KeywordWeakUpsertBulk) UpdateWord() *KeywordWeakUpsertBulk {
	return u.Update(func(s *KeywordWeakUpsert) {
		s.UpdateWord()
	})
}

// Exec executes the query.
func (u *KeywordWeakUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeywordWeakCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordWeakCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordWeakUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
