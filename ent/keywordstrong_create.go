// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keywordstrong"
)

// KeywordStrongCreate is the builder for creating a KeywordStrong entity.
type KeywordStrongCreate struct {
	config
	mutation *KeywordStrongMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCategory sets the "category" field.
func (ksc *KeywordStrongCreate) SetCategory(u uint64) *KeywordStrongCreate {
	ksc.mutation.SetCategory(u)
	return ksc
}

// SetMain sets the "main" field.
func (ksc *KeywordStrongCreate) SetMain(s string) *KeywordStrongCreate {
	ksc.mutation.SetMain(s)
	return ksc
}

// SetMainCount sets the "main_count" field.
func (ksc *KeywordStrongCreate) SetMainCount(u uint64) *KeywordStrongCreate {
	ksc.mutation.SetMainCount(u)
	return ksc
}

// SetSub sets the "sub" field.
func (ksc *KeywordStrongCreate) SetSub(s string) *KeywordStrongCreate {
	ksc.mutation.SetSub(s)
	return ksc
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (ksc *KeywordStrongCreate) SetNillableSub(s *string) *KeywordStrongCreate {
	if s != nil {
		ksc.SetSub(*s)
	}
	return ksc
}

// SetSubCount sets the "sub_count" field.
func (ksc *KeywordStrongCreate) SetSubCount(u uint64) *KeywordStrongCreate {
	ksc.mutation.SetSubCount(u)
	return ksc
}

// SetNillableSubCount sets the "sub_count" field if the given value is not nil.
func (ksc *KeywordStrongCreate) SetNillableSubCount(u *uint64) *KeywordStrongCreate {
	if u != nil {
		ksc.SetSubCount(*u)
	}
	return ksc
}

// SetID sets the "id" field.
func (ksc *KeywordStrongCreate) SetID(s string) *KeywordStrongCreate {
	ksc.mutation.SetID(s)
	return ksc
}

// Mutation returns the KeywordStrongMutation object of the builder.
func (ksc *KeywordStrongCreate) Mutation() *KeywordStrongMutation {
	return ksc.mutation
}

// Save creates the KeywordStrong in the database.
func (ksc *KeywordStrongCreate) Save(ctx context.Context) (*KeywordStrong, error) {
	ksc.defaults()
	return withHooks(ctx, ksc.sqlSave, ksc.mutation, ksc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ksc *KeywordStrongCreate) SaveX(ctx context.Context) *KeywordStrong {
	v, err := ksc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ksc *KeywordStrongCreate) Exec(ctx context.Context) error {
	_, err := ksc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksc *KeywordStrongCreate) ExecX(ctx context.Context) {
	if err := ksc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ksc *KeywordStrongCreate) defaults() {
	if _, ok := ksc.mutation.Sub(); !ok {
		v := keywordstrong.DefaultSub
		ksc.mutation.SetSub(v)
	}
	if _, ok := ksc.mutation.SubCount(); !ok {
		v := keywordstrong.DefaultSubCount
		ksc.mutation.SetSubCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ksc *KeywordStrongCreate) check() error {
	if _, ok := ksc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "KeywordStrong.category"`)}
	}
	if _, ok := ksc.mutation.Main(); !ok {
		return &ValidationError{Name: "main", err: errors.New(`ent: missing required field "KeywordStrong.main"`)}
	}
	if _, ok := ksc.mutation.MainCount(); !ok {
		return &ValidationError{Name: "main_count", err: errors.New(`ent: missing required field "KeywordStrong.main_count"`)}
	}
	if _, ok := ksc.mutation.Sub(); !ok {
		return &ValidationError{Name: "sub", err: errors.New(`ent: missing required field "KeywordStrong.sub"`)}
	}
	if _, ok := ksc.mutation.SubCount(); !ok {
		return &ValidationError{Name: "sub_count", err: errors.New(`ent: missing required field "KeywordStrong.sub_count"`)}
	}
	return nil
}

func (ksc *KeywordStrongCreate) sqlSave(ctx context.Context) (*KeywordStrong, error) {
	if err := ksc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ksc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ksc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected KeywordStrong.ID type: %T", _spec.ID.Value)
		}
	}
	ksc.mutation.id = &_node.ID
	ksc.mutation.done = true
	return _node, nil
}

func (ksc *KeywordStrongCreate) createSpec() (*KeywordStrong, *sqlgraph.CreateSpec) {
	var (
		_node = &KeywordStrong{config: ksc.config}
		_spec = sqlgraph.NewCreateSpec(keywordstrong.Table, sqlgraph.NewFieldSpec(keywordstrong.FieldID, field.TypeString))
	)
	_spec.OnConflict = ksc.conflict
	if id, ok := ksc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ksc.mutation.Category(); ok {
		_spec.SetField(keywordstrong.FieldCategory, field.TypeUint64, value)
		_node.Category = value
	}
	if value, ok := ksc.mutation.Main(); ok {
		_spec.SetField(keywordstrong.FieldMain, field.TypeString, value)
		_node.Main = value
	}
	if value, ok := ksc.mutation.MainCount(); ok {
		_spec.SetField(keywordstrong.FieldMainCount, field.TypeUint64, value)
		_node.MainCount = value
	}
	if value, ok := ksc.mutation.Sub(); ok {
		_spec.SetField(keywordstrong.FieldSub, field.TypeString, value)
		_node.Sub = value
	}
	if value, ok := ksc.mutation.SubCount(); ok {
		_spec.SetField(keywordstrong.FieldSubCount, field.TypeUint64, value)
		_node.SubCount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeywordStrong.Create().
//		SetCategory(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordStrongUpsert) {
//			SetCategory(v+v).
//		}).
//		Exec(ctx)
func (ksc *KeywordStrongCreate) OnConflict(opts ...sql.ConflictOption) *KeywordStrongUpsertOne {
	ksc.conflict = opts
	return &KeywordStrongUpsertOne{
		create: ksc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ksc *KeywordStrongCreate) OnConflictColumns(columns ...string) *KeywordStrongUpsertOne {
	ksc.conflict = append(ksc.conflict, sql.ConflictColumns(columns...))
	return &KeywordStrongUpsertOne{
		create: ksc,
	}
}

type (
	// KeywordStrongUpsertOne is the builder for "upsert"-ing
	//  one KeywordStrong node.
	KeywordStrongUpsertOne struct {
		create *KeywordStrongCreate
	}

	// KeywordStrongUpsert is the "OnConflict" setter.
	KeywordStrongUpsert struct {
		*sql.UpdateSet
	}
)

// SetCategory sets the "category" field.
func (u *KeywordStrongUpsert) SetCategory(v uint64) *KeywordStrongUpsert {
	u.Set(keywordstrong.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordStrongUpsert) UpdateCategory() *KeywordStrongUpsert {
	u.SetExcluded(keywordstrong.FieldCategory)
	return u
}

// AddCategory adds v to the "category" field.
func (u *KeywordStrongUpsert) AddCategory(v uint64) *KeywordStrongUpsert {
	u.Add(keywordstrong.FieldCategory, v)
	return u
}

// SetMain sets the "main" field.
func (u *KeywordStrongUpsert) SetMain(v string) *KeywordStrongUpsert {
	u.Set(keywordstrong.FieldMain, v)
	return u
}

// UpdateMain sets the "main" field to the value that was provided on create.
func (u *KeywordStrongUpsert) UpdateMain() *KeywordStrongUpsert {
	u.SetExcluded(keywordstrong.FieldMain)
	return u
}

// SetMainCount sets the "main_count" field.
func (u *KeywordStrongUpsert) SetMainCount(v uint64) *KeywordStrongUpsert {
	u.Set(keywordstrong.FieldMainCount, v)
	return u
}

// UpdateMainCount sets the "main_count" field to the value that was provided on create.
func (u *KeywordStrongUpsert) UpdateMainCount() *KeywordStrongUpsert {
	u.SetExcluded(keywordstrong.FieldMainCount)
	return u
}

// AddMainCount adds v to the "main_count" field.
func (u *KeywordStrongUpsert) AddMainCount(v uint64) *KeywordStrongUpsert {
	u.Add(keywordstrong.FieldMainCount, v)
	return u
}

// SetSub sets the "sub" field.
func (u *KeywordStrongUpsert) SetSub(v string) *KeywordStrongUpsert {
	u.Set(keywordstrong.FieldSub, v)
	return u
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *KeywordStrongUpsert) UpdateSub() *KeywordStrongUpsert {
	u.SetExcluded(keywordstrong.FieldSub)
	return u
}

// SetSubCount sets the "sub_count" field.
func (u *KeywordStrongUpsert) SetSubCount(v uint64) *KeywordStrongUpsert {
	u.Set(keywordstrong.FieldSubCount, v)
	return u
}

// UpdateSubCount sets the "sub_count" field to the value that was provided on create.
func (u *KeywordStrongUpsert) UpdateSubCount() *KeywordStrongUpsert {
	u.SetExcluded(keywordstrong.FieldSubCount)
	return u
}

// AddSubCount adds v to the "sub_count" field.
func (u *KeywordStrongUpsert) AddSubCount(v uint64) *KeywordStrongUpsert {
	u.Add(keywordstrong.FieldSubCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keywordstrong.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordStrongUpsertOne) UpdateNewValues() *KeywordStrongUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(keywordstrong.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeywordStrongUpsertOne) Ignore() *KeywordStrongUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordStrongUpsertOne) DoNothing() *KeywordStrongUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordStrongCreate.OnConflict
// documentation for more info.
func (u *KeywordStrongUpsertOne) Update(set func(*KeywordStrongUpsert)) *KeywordStrongUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordStrongUpsert{UpdateSet: update})
	}))
	return u
}

// SetCategory sets the "category" field.
func (u *KeywordStrongUpsertOne) SetCategory(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordStrongUpsertOne) AddCategory(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordStrongUpsertOne) UpdateCategory() *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateCategory()
	})
}

// SetMain sets the "main" field.
func (u *KeywordStrongUpsertOne) SetMain(v string) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetMain(v)
	})
}

// UpdateMain sets the "main" field to the value that was provided on create.
func (u *KeywordStrongUpsertOne) UpdateMain() *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateMain()
	})
}

// SetMainCount sets the "main_count" field.
func (u *KeywordStrongUpsertOne) SetMainCount(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetMainCount(v)
	})
}

// AddMainCount adds v to the "main_count" field.
func (u *KeywordStrongUpsertOne) AddMainCount(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddMainCount(v)
	})
}

// UpdateMainCount sets the "main_count" field to the value that was provided on create.
func (u *KeywordStrongUpsertOne) UpdateMainCount() *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateMainCount()
	})
}

// SetSub sets the "sub" field.
func (u *KeywordStrongUpsertOne) SetSub(v string) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetSub(v)
	})
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *KeywordStrongUpsertOne) UpdateSub() *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateSub()
	})
}

// SetSubCount sets the "sub_count" field.
func (u *KeywordStrongUpsertOne) SetSubCount(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetSubCount(v)
	})
}

// AddSubCount adds v to the "sub_count" field.
func (u *KeywordStrongUpsertOne) AddSubCount(v uint64) *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddSubCount(v)
	})
}

// UpdateSubCount sets the "sub_count" field to the value that was provided on create.
func (u *KeywordStrongUpsertOne) UpdateSubCount() *KeywordStrongUpsertOne {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateSubCount()
	})
}

// Exec executes the query.
func (u *KeywordStrongUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordStrongCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordStrongUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeywordStrongUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeywordStrongUpsertOne.ID is not supported by MySQL driver. Use KeywordStrongUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeywordStrongUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeywordStrongCreateBulk is the builder for creating many KeywordStrong entities in bulk.
type KeywordStrongCreateBulk struct {
	config
	err      error
	builders []*KeywordStrongCreate
	conflict []sql.ConflictOption
}

// Save creates the KeywordStrong entities in the database.
func (kscb *KeywordStrongCreateBulk) Save(ctx context.Context) ([]*KeywordStrong, error) {
	if kscb.err != nil {
		return nil, kscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kscb.builders))
	nodes := make([]*KeywordStrong, len(kscb.builders))
	mutators := make([]Mutator, len(kscb.builders))
	for i := range kscb.builders {
		func(i int, root context.Context) {
			builder := kscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeywordStrongMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kscb *KeywordStrongCreateBulk) SaveX(ctx context.Context) []*KeywordStrong {
	v, err := kscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kscb *KeywordStrongCreateBulk) Exec(ctx context.Context) error {
	_, err := kscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kscb *KeywordStrongCreateBulk) ExecX(ctx context.Context) {
	if err := kscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeywordStrong.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeywordStrongUpsert) {
//			SetCategory(v+v).
//		}).
//		Exec(ctx)
func (kscb *KeywordStrongCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeywordStrongUpsertBulk {
	kscb.conflict = opts
	return &KeywordStrongUpsertBulk{
		create: kscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kscb *KeywordStrongCreateBulk) OnConflictColumns(columns ...string) *KeywordStrongUpsertBulk {
	kscb.conflict = append(kscb.conflict, sql.ConflictColumns(columns...))
	return &KeywordStrongUpsertBulk{
		create: kscb,
	}
}

// KeywordStrongUpsertBulk is the builder for "upsert"-ing
// a bulk of KeywordStrong nodes.
type KeywordStrongUpsertBulk struct {
	create *KeywordStrongCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keywordstrong.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeywordStrongUpsertBulk) UpdateNewValues() *KeywordStrongUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(keywordstrong.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeywordStrong.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeywordStrongUpsertBulk) Ignore() *KeywordStrongUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeywordStrongUpsertBulk) DoNothing() *KeywordStrongUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeywordStrongCreateBulk.OnConflict
// documentation for more info.
func (u *KeywordStrongUpsertBulk) Update(set func(*KeywordStrongUpsert)) *KeywordStrongUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeywordStrongUpsert{UpdateSet: update})
	}))
	return u
}

// SetCategory sets the "category" field.
func (u *KeywordStrongUpsertBulk) SetCategory(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetCategory(v)
	})
}

// AddCategory adds v to the "category" field.
func (u *KeywordStrongUpsertBulk) AddCategory(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KeywordStrongUpsertBulk) UpdateCategory() *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateCategory()
	})
}

// SetMain sets the "main" field.
func (u *KeywordStrongUpsertBulk) SetMain(v string) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetMain(v)
	})
}

// UpdateMain sets the "main" field to the value that was provided on create.
func (u *KeywordStrongUpsertBulk) UpdateMain() *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateMain()
	})
}

// SetMainCount sets the "main_count" field.
func (u *KeywordStrongUpsertBulk) SetMainCount(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetMainCount(v)
	})
}

// AddMainCount adds v to the "main_count" field.
func (u *KeywordStrongUpsertBulk) AddMainCount(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddMainCount(v)
	})
}

// UpdateMainCount sets the "main_count" field to the value that was provided on create.
func (u *KeywordStrongUpsertBulk) UpdateMainCount() *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateMainCount()
	})
}

// SetSub sets the "sub" field.
func (u *KeywordStrongUpsertBulk) SetSub(v string) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetSub(v)
	})
}

// UpdateSub sets the "sub" field to the value that was provided on create.
func (u *KeywordStrongUpsertBulk) UpdateSub() *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateSub()
	})
}

// SetSubCount sets the "sub_count" field.
func (u *KeywordStrongUpsertBulk) SetSubCount(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.SetSubCount(v)
	})
}

// AddSubCount adds v to the "sub_count" field.
func (u *KeywordStrongUpsertBulk) AddSubCount(v uint64) *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.AddSubCount(v)
	})
}

// UpdateSubCount sets the "sub_count" field to the value that was provided on create.
func (u *KeywordStrongUpsertBulk) UpdateSubCount() *KeywordStrongUpsertBulk {
	return u.Update(func(s *KeywordStrongUpsert) {
		s.UpdateSubCount()
	})
}

// Exec executes the query.
func (u *KeywordStrongUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeywordStrongCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeywordStrongCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeywordStrongUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
