// Code generated by ent, DO NOT EDIT.

package article

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the article type in the database.
	Label = "article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOriginName holds the string denoting the origin_name field in the database.
	FieldOriginName = "origin_name"
	// FieldOriginType holds the string denoting the origin_type field in the database.
	FieldOriginType = "origin_type"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldTitleCn holds the string denoting the title_cn field in the database.
	FieldTitleCn = "title_cn"
	// FieldTitleEn holds the string denoting the title_en field in the database.
	FieldTitleEn = "title_en"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldHTMLCn holds the string denoting the html_cn field in the database.
	FieldHTMLCn = "html_cn"
	// FieldHTMLEn holds the string denoting the html_en field in the database.
	FieldHTMLEn = "html_en"
	// FieldTextCn holds the string denoting the text_cn field in the database.
	FieldTextCn = "text_cn"
	// FieldTextEn holds the string denoting the text_en field in the database.
	FieldTextEn = "text_en"
	// FieldCrawledAt holds the string denoting the crawled_at field in the database.
	FieldCrawledAt = "crawled_at"
	// FieldSummaryCn holds the string denoting the summary_cn field in the database.
	FieldSummaryCn = "summary_cn"
	// Table holds the table name of the article in the database.
	Table = "t_article"
)

// Columns holds all SQL columns for article fields.
var Columns = []string{
	FieldID,
	FieldOriginName,
	FieldOriginType,
	FieldURL,
	FieldTitleCn,
	FieldTitleEn,
	FieldAuthor,
	FieldTags,
	FieldPublishedAt,
	FieldHTMLCn,
	FieldHTMLEn,
	FieldTextCn,
	FieldTextEn,
	FieldCrawledAt,
	FieldSummaryCn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultCrawledAt holds the default value on creation for the "crawled_at" field.
	DefaultCrawledAt func() time.Time
)

// OrderOption defines the ordering options for the Article queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOriginName orders the results by the origin_name field.
func ByOriginName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginName, opts...).ToFunc()
}

// ByOriginType orders the results by the origin_type field.
func ByOriginType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginType, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByTitleCn orders the results by the title_cn field.
func ByTitleCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleCn, opts...).ToFunc()
}

// ByTitleEn orders the results by the title_en field.
func ByTitleEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleEn, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByHTMLCn orders the results by the html_cn field.
func ByHTMLCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLCn, opts...).ToFunc()
}

// ByHTMLEn orders the results by the html_en field.
func ByHTMLEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLEn, opts...).ToFunc()
}

// ByTextCn orders the results by the text_cn field.
func ByTextCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextCn, opts...).ToFunc()
}

// ByTextEn orders the results by the text_en field.
func ByTextEn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextEn, opts...).ToFunc()
}

// ByCrawledAt orders the results by the crawled_at field.
func ByCrawledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCrawledAt, opts...).ToFunc()
}

// BySummaryCn orders the results by the summary_cn field.
func BySummaryCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummaryCn, opts...).ToFunc()
}
