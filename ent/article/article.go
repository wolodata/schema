// Code generated by ent, DO NOT EDIT.

package article

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/schema"
)

const (
	// Label holds the string label denoting the article type in the database.
	Label = "article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOriginShortID holds the string denoting the origin_short_id field in the database.
	FieldOriginShortID = "origin_short_id"
	// FieldIsChinese holds the string denoting the is_chinese field in the database.
	FieldIsChinese = "is_chinese"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldTitleChinese holds the string denoting the title_chinese field in the database.
	FieldTitleChinese = "title_chinese"
	// FieldTitleEnglish holds the string denoting the title_english field in the database.
	FieldTitleEnglish = "title_english"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldHTMLChinese holds the string denoting the html_chinese field in the database.
	FieldHTMLChinese = "html_chinese"
	// FieldHTMLEnglish holds the string denoting the html_english field in the database.
	FieldHTMLEnglish = "html_english"
	// FieldTextChinese holds the string denoting the text_chinese field in the database.
	FieldTextChinese = "text_chinese"
	// FieldTextEnglish holds the string denoting the text_english field in the database.
	FieldTextEnglish = "text_english"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldWeakProcessed holds the string denoting the weak_processed field in the database.
	FieldWeakProcessed = "weak_processed"
	// FieldWeakRelated holds the string denoting the weak_related field in the database.
	FieldWeakRelated = "weak_related"
	// FieldWeakKeywords holds the string denoting the weak_keywords field in the database.
	FieldWeakKeywords = "weak_keywords"
	// FieldStrongProcessed holds the string denoting the strong_processed field in the database.
	FieldStrongProcessed = "strong_processed"
	// FieldStrongRelated holds the string denoting the strong_related field in the database.
	FieldStrongRelated = "strong_related"
	// FieldStrongKeyword holds the string denoting the strong_keyword field in the database.
	FieldStrongKeyword = "strong_keyword"
	// FieldStrongRelatedCategory holds the string denoting the strong_related_category field in the database.
	FieldStrongRelatedCategory = "strong_related_category"
	// FieldSummaryChinese holds the string denoting the summary_chinese field in the database.
	FieldSummaryChinese = "summary_chinese"
	// Table holds the table name of the article in the database.
	Table = "t_article"
)

// Columns holds all SQL columns for article fields.
var Columns = []string{
	FieldID,
	FieldOriginShortID,
	FieldIsChinese,
	FieldURL,
	FieldTitleChinese,
	FieldTitleEnglish,
	FieldAuthor,
	FieldPublishedAt,
	FieldHTMLChinese,
	FieldHTMLEnglish,
	FieldTextChinese,
	FieldTextEnglish,
	FieldImages,
	FieldWeakProcessed,
	FieldWeakRelated,
	FieldWeakKeywords,
	FieldStrongProcessed,
	FieldStrongRelated,
	FieldStrongKeyword,
	FieldStrongRelatedCategory,
	FieldSummaryChinese,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OriginShortIDValidator is a validator for the "origin_short_id" field. It is called by the builders before save.
	OriginShortIDValidator func(string) error
	// DefaultIsChinese holds the default value on creation for the "is_chinese" field.
	DefaultIsChinese bool
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultTitleChinese holds the default value on creation for the "title_chinese" field.
	DefaultTitleChinese string
	// DefaultTitleEnglish holds the default value on creation for the "title_english" field.
	DefaultTitleEnglish string
	// DefaultAuthor holds the default value on creation for the "author" field.
	DefaultAuthor []string
	// DefaultHTMLChinese holds the default value on creation for the "html_chinese" field.
	DefaultHTMLChinese string
	// DefaultHTMLEnglish holds the default value on creation for the "html_english" field.
	DefaultHTMLEnglish string
	// DefaultTextChinese holds the default value on creation for the "text_chinese" field.
	DefaultTextChinese string
	// DefaultTextEnglish holds the default value on creation for the "text_english" field.
	DefaultTextEnglish string
	// DefaultImages holds the default value on creation for the "images" field.
	DefaultImages []string
	// DefaultWeakProcessed holds the default value on creation for the "weak_processed" field.
	DefaultWeakProcessed bool
	// DefaultWeakRelated holds the default value on creation for the "weak_related" field.
	DefaultWeakRelated bool
	// DefaultWeakKeywords holds the default value on creation for the "weak_keywords" field.
	DefaultWeakKeywords []schema.WeakKeyword
	// DefaultStrongProcessed holds the default value on creation for the "strong_processed" field.
	DefaultStrongProcessed bool
	// DefaultStrongRelated holds the default value on creation for the "strong_related" field.
	DefaultStrongRelated bool
	// DefaultStrongRelatedCategory holds the default value on creation for the "strong_related_category" field.
	DefaultStrongRelatedCategory string
	// DefaultSummaryChinese holds the default value on creation for the "summary_chinese" field.
	DefaultSummaryChinese string
)

// OrderOption defines the ordering options for the Article queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOriginShortID orders the results by the origin_short_id field.
func ByOriginShortID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginShortID, opts...).ToFunc()
}

// ByIsChinese orders the results by the is_chinese field.
func ByIsChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsChinese, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByTitleChinese orders the results by the title_chinese field.
func ByTitleChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleChinese, opts...).ToFunc()
}

// ByTitleEnglish orders the results by the title_english field.
func ByTitleEnglish(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleEnglish, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByHTMLChinese orders the results by the html_chinese field.
func ByHTMLChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLChinese, opts...).ToFunc()
}

// ByHTMLEnglish orders the results by the html_english field.
func ByHTMLEnglish(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLEnglish, opts...).ToFunc()
}

// ByTextChinese orders the results by the text_chinese field.
func ByTextChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextChinese, opts...).ToFunc()
}

// ByTextEnglish orders the results by the text_english field.
func ByTextEnglish(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextEnglish, opts...).ToFunc()
}

// ByWeakProcessed orders the results by the weak_processed field.
func ByWeakProcessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeakProcessed, opts...).ToFunc()
}

// ByWeakRelated orders the results by the weak_related field.
func ByWeakRelated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeakRelated, opts...).ToFunc()
}

// ByStrongProcessed orders the results by the strong_processed field.
func ByStrongProcessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrongProcessed, opts...).ToFunc()
}

// ByStrongRelated orders the results by the strong_related field.
func ByStrongRelated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrongRelated, opts...).ToFunc()
}

// ByStrongRelatedCategory orders the results by the strong_related_category field.
func ByStrongRelatedCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrongRelatedCategory, opts...).ToFunc()
}

// BySummaryChinese orders the results by the summary_chinese field.
func BySummaryChinese(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummaryChinese, opts...).ToFunc()
}
