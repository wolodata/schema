// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/article"
	"github.com/wolodata/schema/ent/html"
	"github.com/wolodata/schema/ent/keywordstrong"
	"github.com/wolodata/schema/ent/keywordweak"
	"github.com/wolodata/schema/ent/predicate"
	"github.com/wolodata/schema/ent/report"
	"github.com/wolodata/schema/ent/systemconfig"
	"github.com/wolodata/schema/ent/topic"
	"github.com/wolodata/schema/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle       = "Article"
	TypeHTML          = "Html"
	TypeKeywordStrong = "KeywordStrong"
	TypeKeywordWeak   = "KeywordWeak"
	TypeReport        = "Report"
	TypeSystemConfig  = "SystemConfig"
	TypeTopic         = "Topic"
	TypeUser          = "User"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	origin_short_id        *string
	is_chinese             *bool
	url                    *string
	title_chinese          *string
	title_english          *string
	author                 *[]string
	appendauthor           []string
	published_at           *time.Time
	html_chinese           *string
	html_english           *string
	text_chinese           *string
	text_english           *string
	images                 *[]string
	appendimages           []string
	weak_keyword_ids       *[]string
	appendweak_keyword_ids []string
	strong_keyword_id      *string
	summary_chinese        *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Article, error)
	predicates             []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id string) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOriginShortID sets the "origin_short_id" field.
func (m *ArticleMutation) SetOriginShortID(s string) {
	m.origin_short_id = &s
}

// OriginShortID returns the value of the "origin_short_id" field in the mutation.
func (m *ArticleMutation) OriginShortID() (r string, exists bool) {
	v := m.origin_short_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginShortID returns the old "origin_short_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldOriginShortID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginShortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginShortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginShortID: %w", err)
	}
	return oldValue.OriginShortID, nil
}

// ResetOriginShortID resets all changes to the "origin_short_id" field.
func (m *ArticleMutation) ResetOriginShortID() {
	m.origin_short_id = nil
}

// SetIsChinese sets the "is_chinese" field.
func (m *ArticleMutation) SetIsChinese(b bool) {
	m.is_chinese = &b
}

// IsChinese returns the value of the "is_chinese" field in the mutation.
func (m *ArticleMutation) IsChinese() (r bool, exists bool) {
	v := m.is_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldIsChinese returns the old "is_chinese" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldIsChinese(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsChinese: %w", err)
	}
	return oldValue.IsChinese, nil
}

// ResetIsChinese resets all changes to the "is_chinese" field.
func (m *ArticleMutation) ResetIsChinese() {
	m.is_chinese = nil
}

// SetURL sets the "url" field.
func (m *ArticleMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ArticleMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ArticleMutation) ResetURL() {
	m.url = nil
}

// SetTitleChinese sets the "title_chinese" field.
func (m *ArticleMutation) SetTitleChinese(s string) {
	m.title_chinese = &s
}

// TitleChinese returns the value of the "title_chinese" field in the mutation.
func (m *ArticleMutation) TitleChinese() (r string, exists bool) {
	v := m.title_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleChinese returns the old "title_chinese" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitleChinese(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleChinese: %w", err)
	}
	return oldValue.TitleChinese, nil
}

// ResetTitleChinese resets all changes to the "title_chinese" field.
func (m *ArticleMutation) ResetTitleChinese() {
	m.title_chinese = nil
}

// SetTitleEnglish sets the "title_english" field.
func (m *ArticleMutation) SetTitleEnglish(s string) {
	m.title_english = &s
}

// TitleEnglish returns the value of the "title_english" field in the mutation.
func (m *ArticleMutation) TitleEnglish() (r string, exists bool) {
	v := m.title_english
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleEnglish returns the old "title_english" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitleEnglish(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleEnglish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleEnglish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleEnglish: %w", err)
	}
	return oldValue.TitleEnglish, nil
}

// ResetTitleEnglish resets all changes to the "title_english" field.
func (m *ArticleMutation) ResetTitleEnglish() {
	m.title_english = nil
}

// SetAuthor sets the "author" field.
func (m *ArticleMutation) SetAuthor(s []string) {
	m.author = &s
	m.appendauthor = nil
}

// Author returns the value of the "author" field in the mutation.
func (m *ArticleMutation) Author() (r []string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldAuthor(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// AppendAuthor adds s to the "author" field.
func (m *ArticleMutation) AppendAuthor(s []string) {
	m.appendauthor = append(m.appendauthor, s...)
}

// AppendedAuthor returns the list of values that were appended to the "author" field in this mutation.
func (m *ArticleMutation) AppendedAuthor() ([]string, bool) {
	if len(m.appendauthor) == 0 {
		return nil, false
	}
	return m.appendauthor, true
}

// ResetAuthor resets all changes to the "author" field.
func (m *ArticleMutation) ResetAuthor() {
	m.author = nil
	m.appendauthor = nil
}

// SetPublishedAt sets the "published_at" field.
func (m *ArticleMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *ArticleMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *ArticleMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetHTMLChinese sets the "html_chinese" field.
func (m *ArticleMutation) SetHTMLChinese(s string) {
	m.html_chinese = &s
}

// HTMLChinese returns the value of the "html_chinese" field in the mutation.
func (m *ArticleMutation) HTMLChinese() (r string, exists bool) {
	v := m.html_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLChinese returns the old "html_chinese" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldHTMLChinese(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTMLChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTMLChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLChinese: %w", err)
	}
	return oldValue.HTMLChinese, nil
}

// ResetHTMLChinese resets all changes to the "html_chinese" field.
func (m *ArticleMutation) ResetHTMLChinese() {
	m.html_chinese = nil
}

// SetHTMLEnglish sets the "html_english" field.
func (m *ArticleMutation) SetHTMLEnglish(s string) {
	m.html_english = &s
}

// HTMLEnglish returns the value of the "html_english" field in the mutation.
func (m *ArticleMutation) HTMLEnglish() (r string, exists bool) {
	v := m.html_english
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLEnglish returns the old "html_english" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldHTMLEnglish(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTMLEnglish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTMLEnglish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLEnglish: %w", err)
	}
	return oldValue.HTMLEnglish, nil
}

// ResetHTMLEnglish resets all changes to the "html_english" field.
func (m *ArticleMutation) ResetHTMLEnglish() {
	m.html_english = nil
}

// SetTextChinese sets the "text_chinese" field.
func (m *ArticleMutation) SetTextChinese(s string) {
	m.text_chinese = &s
}

// TextChinese returns the value of the "text_chinese" field in the mutation.
func (m *ArticleMutation) TextChinese() (r string, exists bool) {
	v := m.text_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldTextChinese returns the old "text_chinese" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTextChinese(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextChinese: %w", err)
	}
	return oldValue.TextChinese, nil
}

// ResetTextChinese resets all changes to the "text_chinese" field.
func (m *ArticleMutation) ResetTextChinese() {
	m.text_chinese = nil
}

// SetTextEnglish sets the "text_english" field.
func (m *ArticleMutation) SetTextEnglish(s string) {
	m.text_english = &s
}

// TextEnglish returns the value of the "text_english" field in the mutation.
func (m *ArticleMutation) TextEnglish() (r string, exists bool) {
	v := m.text_english
	if v == nil {
		return
	}
	return *v, true
}

// OldTextEnglish returns the old "text_english" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTextEnglish(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextEnglish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextEnglish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextEnglish: %w", err)
	}
	return oldValue.TextEnglish, nil
}

// ResetTextEnglish resets all changes to the "text_english" field.
func (m *ArticleMutation) ResetTextEnglish() {
	m.text_english = nil
}

// SetImages sets the "images" field.
func (m *ArticleMutation) SetImages(s []string) {
	m.images = &s
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *ArticleMutation) Images() (r []string, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldImages(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds s to the "images" field.
func (m *ArticleMutation) AppendImages(s []string) {
	m.appendimages = append(m.appendimages, s...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *ArticleMutation) AppendedImages() ([]string, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *ArticleMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetWeakKeywordIds sets the "weak_keyword_ids" field.
func (m *ArticleMutation) SetWeakKeywordIds(s []string) {
	m.weak_keyword_ids = &s
	m.appendweak_keyword_ids = nil
}

// WeakKeywordIds returns the value of the "weak_keyword_ids" field in the mutation.
func (m *ArticleMutation) WeakKeywordIds() (r []string, exists bool) {
	v := m.weak_keyword_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldWeakKeywordIds returns the old "weak_keyword_ids" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldWeakKeywordIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeakKeywordIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeakKeywordIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeakKeywordIds: %w", err)
	}
	return oldValue.WeakKeywordIds, nil
}

// AppendWeakKeywordIds adds s to the "weak_keyword_ids" field.
func (m *ArticleMutation) AppendWeakKeywordIds(s []string) {
	m.appendweak_keyword_ids = append(m.appendweak_keyword_ids, s...)
}

// AppendedWeakKeywordIds returns the list of values that were appended to the "weak_keyword_ids" field in this mutation.
func (m *ArticleMutation) AppendedWeakKeywordIds() ([]string, bool) {
	if len(m.appendweak_keyword_ids) == 0 {
		return nil, false
	}
	return m.appendweak_keyword_ids, true
}

// ResetWeakKeywordIds resets all changes to the "weak_keyword_ids" field.
func (m *ArticleMutation) ResetWeakKeywordIds() {
	m.weak_keyword_ids = nil
	m.appendweak_keyword_ids = nil
}

// SetStrongKeywordID sets the "strong_keyword_id" field.
func (m *ArticleMutation) SetStrongKeywordID(s string) {
	m.strong_keyword_id = &s
}

// StrongKeywordID returns the value of the "strong_keyword_id" field in the mutation.
func (m *ArticleMutation) StrongKeywordID() (r string, exists bool) {
	v := m.strong_keyword_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStrongKeywordID returns the old "strong_keyword_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldStrongKeywordID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrongKeywordID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrongKeywordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrongKeywordID: %w", err)
	}
	return oldValue.StrongKeywordID, nil
}

// ResetStrongKeywordID resets all changes to the "strong_keyword_id" field.
func (m *ArticleMutation) ResetStrongKeywordID() {
	m.strong_keyword_id = nil
}

// SetSummaryChinese sets the "summary_chinese" field.
func (m *ArticleMutation) SetSummaryChinese(s string) {
	m.summary_chinese = &s
}

// SummaryChinese returns the value of the "summary_chinese" field in the mutation.
func (m *ArticleMutation) SummaryChinese() (r string, exists bool) {
	v := m.summary_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldSummaryChinese returns the old "summary_chinese" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldSummaryChinese(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummaryChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummaryChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummaryChinese: %w", err)
	}
	return oldValue.SummaryChinese, nil
}

// ResetSummaryChinese resets all changes to the "summary_chinese" field.
func (m *ArticleMutation) ResetSummaryChinese() {
	m.summary_chinese = nil
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.origin_short_id != nil {
		fields = append(fields, article.FieldOriginShortID)
	}
	if m.is_chinese != nil {
		fields = append(fields, article.FieldIsChinese)
	}
	if m.url != nil {
		fields = append(fields, article.FieldURL)
	}
	if m.title_chinese != nil {
		fields = append(fields, article.FieldTitleChinese)
	}
	if m.title_english != nil {
		fields = append(fields, article.FieldTitleEnglish)
	}
	if m.author != nil {
		fields = append(fields, article.FieldAuthor)
	}
	if m.published_at != nil {
		fields = append(fields, article.FieldPublishedAt)
	}
	if m.html_chinese != nil {
		fields = append(fields, article.FieldHTMLChinese)
	}
	if m.html_english != nil {
		fields = append(fields, article.FieldHTMLEnglish)
	}
	if m.text_chinese != nil {
		fields = append(fields, article.FieldTextChinese)
	}
	if m.text_english != nil {
		fields = append(fields, article.FieldTextEnglish)
	}
	if m.images != nil {
		fields = append(fields, article.FieldImages)
	}
	if m.weak_keyword_ids != nil {
		fields = append(fields, article.FieldWeakKeywordIds)
	}
	if m.strong_keyword_id != nil {
		fields = append(fields, article.FieldStrongKeywordID)
	}
	if m.summary_chinese != nil {
		fields = append(fields, article.FieldSummaryChinese)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldOriginShortID:
		return m.OriginShortID()
	case article.FieldIsChinese:
		return m.IsChinese()
	case article.FieldURL:
		return m.URL()
	case article.FieldTitleChinese:
		return m.TitleChinese()
	case article.FieldTitleEnglish:
		return m.TitleEnglish()
	case article.FieldAuthor:
		return m.Author()
	case article.FieldPublishedAt:
		return m.PublishedAt()
	case article.FieldHTMLChinese:
		return m.HTMLChinese()
	case article.FieldHTMLEnglish:
		return m.HTMLEnglish()
	case article.FieldTextChinese:
		return m.TextChinese()
	case article.FieldTextEnglish:
		return m.TextEnglish()
	case article.FieldImages:
		return m.Images()
	case article.FieldWeakKeywordIds:
		return m.WeakKeywordIds()
	case article.FieldStrongKeywordID:
		return m.StrongKeywordID()
	case article.FieldSummaryChinese:
		return m.SummaryChinese()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldOriginShortID:
		return m.OldOriginShortID(ctx)
	case article.FieldIsChinese:
		return m.OldIsChinese(ctx)
	case article.FieldURL:
		return m.OldURL(ctx)
	case article.FieldTitleChinese:
		return m.OldTitleChinese(ctx)
	case article.FieldTitleEnglish:
		return m.OldTitleEnglish(ctx)
	case article.FieldAuthor:
		return m.OldAuthor(ctx)
	case article.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case article.FieldHTMLChinese:
		return m.OldHTMLChinese(ctx)
	case article.FieldHTMLEnglish:
		return m.OldHTMLEnglish(ctx)
	case article.FieldTextChinese:
		return m.OldTextChinese(ctx)
	case article.FieldTextEnglish:
		return m.OldTextEnglish(ctx)
	case article.FieldImages:
		return m.OldImages(ctx)
	case article.FieldWeakKeywordIds:
		return m.OldWeakKeywordIds(ctx)
	case article.FieldStrongKeywordID:
		return m.OldStrongKeywordID(ctx)
	case article.FieldSummaryChinese:
		return m.OldSummaryChinese(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldOriginShortID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginShortID(v)
		return nil
	case article.FieldIsChinese:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsChinese(v)
		return nil
	case article.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case article.FieldTitleChinese:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleChinese(v)
		return nil
	case article.FieldTitleEnglish:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleEnglish(v)
		return nil
	case article.FieldAuthor:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case article.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case article.FieldHTMLChinese:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLChinese(v)
		return nil
	case article.FieldHTMLEnglish:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLEnglish(v)
		return nil
	case article.FieldTextChinese:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextChinese(v)
		return nil
	case article.FieldTextEnglish:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextEnglish(v)
		return nil
	case article.FieldImages:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case article.FieldWeakKeywordIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeakKeywordIds(v)
		return nil
	case article.FieldStrongKeywordID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrongKeywordID(v)
		return nil
	case article.FieldSummaryChinese:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummaryChinese(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldOriginShortID:
		m.ResetOriginShortID()
		return nil
	case article.FieldIsChinese:
		m.ResetIsChinese()
		return nil
	case article.FieldURL:
		m.ResetURL()
		return nil
	case article.FieldTitleChinese:
		m.ResetTitleChinese()
		return nil
	case article.FieldTitleEnglish:
		m.ResetTitleEnglish()
		return nil
	case article.FieldAuthor:
		m.ResetAuthor()
		return nil
	case article.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case article.FieldHTMLChinese:
		m.ResetHTMLChinese()
		return nil
	case article.FieldHTMLEnglish:
		m.ResetHTMLEnglish()
		return nil
	case article.FieldTextChinese:
		m.ResetTextChinese()
		return nil
	case article.FieldTextEnglish:
		m.ResetTextEnglish()
		return nil
	case article.FieldImages:
		m.ResetImages()
		return nil
	case article.FieldWeakKeywordIds:
		m.ResetWeakKeywordIds()
		return nil
	case article.FieldStrongKeywordID:
		m.ResetStrongKeywordID()
		return nil
	case article.FieldSummaryChinese:
		m.ResetSummaryChinese()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Article edge %s", name)
}

// HTMLMutation represents an operation that mutates the Html nodes in the graph.
type HTMLMutation struct {
	config
	op              Op
	typ             string
	id              *string
	origin_short_id *string
	is_chinese      *bool
	url             *string
	html            *string
	crawled_at      *time.Time
	parsed_at       *time.Time
	analyzed_at     *time.Time
	reason          *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Html, error)
	predicates      []predicate.Html
}

var _ ent.Mutation = (*HTMLMutation)(nil)

// htmlOption allows management of the mutation configuration using functional options.
type htmlOption func(*HTMLMutation)

// newHTMLMutation creates new mutation for the Html entity.
func newHTMLMutation(c config, op Op, opts ...htmlOption) *HTMLMutation {
	m := &HTMLMutation{
		config:        c,
		op:            op,
		typ:           TypeHTML,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHtmlID sets the ID field of the mutation.
func withHtmlID(id string) htmlOption {
	return func(m *HTMLMutation) {
		var (
			err   error
			once  sync.Once
			value *Html
		)
		m.oldValue = func(ctx context.Context) (*Html, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Html.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHtml sets the old Html of the mutation.
func withHtml(node *Html) htmlOption {
	return func(m *HTMLMutation) {
		m.oldValue = func(context.Context) (*Html, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HTMLMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HTMLMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Html entities.
func (m *HTMLMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HTMLMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HTMLMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Html.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOriginShortID sets the "origin_short_id" field.
func (m *HTMLMutation) SetOriginShortID(s string) {
	m.origin_short_id = &s
}

// OriginShortID returns the value of the "origin_short_id" field in the mutation.
func (m *HTMLMutation) OriginShortID() (r string, exists bool) {
	v := m.origin_short_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginShortID returns the old "origin_short_id" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldOriginShortID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginShortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginShortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginShortID: %w", err)
	}
	return oldValue.OriginShortID, nil
}

// ResetOriginShortID resets all changes to the "origin_short_id" field.
func (m *HTMLMutation) ResetOriginShortID() {
	m.origin_short_id = nil
}

// SetIsChinese sets the "is_chinese" field.
func (m *HTMLMutation) SetIsChinese(b bool) {
	m.is_chinese = &b
}

// IsChinese returns the value of the "is_chinese" field in the mutation.
func (m *HTMLMutation) IsChinese() (r bool, exists bool) {
	v := m.is_chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldIsChinese returns the old "is_chinese" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldIsChinese(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsChinese: %w", err)
	}
	return oldValue.IsChinese, nil
}

// ResetIsChinese resets all changes to the "is_chinese" field.
func (m *HTMLMutation) ResetIsChinese() {
	m.is_chinese = nil
}

// SetURL sets the "url" field.
func (m *HTMLMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *HTMLMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *HTMLMutation) ResetURL() {
	m.url = nil
}

// SetHTML sets the "html" field.
func (m *HTMLMutation) SetHTML(s string) {
	m.html = &s
}

// HTML returns the value of the "html" field in the mutation.
func (m *HTMLMutation) HTML() (r string, exists bool) {
	v := m.html
	if v == nil {
		return
	}
	return *v, true
}

// OldHTML returns the old "html" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldHTML(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTML is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTML requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTML: %w", err)
	}
	return oldValue.HTML, nil
}

// ResetHTML resets all changes to the "html" field.
func (m *HTMLMutation) ResetHTML() {
	m.html = nil
}

// SetCrawledAt sets the "crawled_at" field.
func (m *HTMLMutation) SetCrawledAt(t time.Time) {
	m.crawled_at = &t
}

// CrawledAt returns the value of the "crawled_at" field in the mutation.
func (m *HTMLMutation) CrawledAt() (r time.Time, exists bool) {
	v := m.crawled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCrawledAt returns the old "crawled_at" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldCrawledAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrawledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrawledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrawledAt: %w", err)
	}
	return oldValue.CrawledAt, nil
}

// ResetCrawledAt resets all changes to the "crawled_at" field.
func (m *HTMLMutation) ResetCrawledAt() {
	m.crawled_at = nil
}

// SetParsedAt sets the "parsed_at" field.
func (m *HTMLMutation) SetParsedAt(t time.Time) {
	m.parsed_at = &t
}

// ParsedAt returns the value of the "parsed_at" field in the mutation.
func (m *HTMLMutation) ParsedAt() (r time.Time, exists bool) {
	v := m.parsed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldParsedAt returns the old "parsed_at" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldParsedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParsedAt: %w", err)
	}
	return oldValue.ParsedAt, nil
}

// ClearParsedAt clears the value of the "parsed_at" field.
func (m *HTMLMutation) ClearParsedAt() {
	m.parsed_at = nil
	m.clearedFields[html.FieldParsedAt] = struct{}{}
}

// ParsedAtCleared returns if the "parsed_at" field was cleared in this mutation.
func (m *HTMLMutation) ParsedAtCleared() bool {
	_, ok := m.clearedFields[html.FieldParsedAt]
	return ok
}

// ResetParsedAt resets all changes to the "parsed_at" field.
func (m *HTMLMutation) ResetParsedAt() {
	m.parsed_at = nil
	delete(m.clearedFields, html.FieldParsedAt)
}

// SetAnalyzedAt sets the "analyzed_at" field.
func (m *HTMLMutation) SetAnalyzedAt(t time.Time) {
	m.analyzed_at = &t
}

// AnalyzedAt returns the value of the "analyzed_at" field in the mutation.
func (m *HTMLMutation) AnalyzedAt() (r time.Time, exists bool) {
	v := m.analyzed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAnalyzedAt returns the old "analyzed_at" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldAnalyzedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnalyzedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnalyzedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnalyzedAt: %w", err)
	}
	return oldValue.AnalyzedAt, nil
}

// ClearAnalyzedAt clears the value of the "analyzed_at" field.
func (m *HTMLMutation) ClearAnalyzedAt() {
	m.analyzed_at = nil
	m.clearedFields[html.FieldAnalyzedAt] = struct{}{}
}

// AnalyzedAtCleared returns if the "analyzed_at" field was cleared in this mutation.
func (m *HTMLMutation) AnalyzedAtCleared() bool {
	_, ok := m.clearedFields[html.FieldAnalyzedAt]
	return ok
}

// ResetAnalyzedAt resets all changes to the "analyzed_at" field.
func (m *HTMLMutation) ResetAnalyzedAt() {
	m.analyzed_at = nil
	delete(m.clearedFields, html.FieldAnalyzedAt)
}

// SetReason sets the "reason" field.
func (m *HTMLMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *HTMLMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Html entity.
// If the Html object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTMLMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *HTMLMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[html.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *HTMLMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[html.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *HTMLMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, html.FieldReason)
}

// Where appends a list predicates to the HTMLMutation builder.
func (m *HTMLMutation) Where(ps ...predicate.Html) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HTMLMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HTMLMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Html, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HTMLMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HTMLMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Html).
func (m *HTMLMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HTMLMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.origin_short_id != nil {
		fields = append(fields, html.FieldOriginShortID)
	}
	if m.is_chinese != nil {
		fields = append(fields, html.FieldIsChinese)
	}
	if m.url != nil {
		fields = append(fields, html.FieldURL)
	}
	if m.html != nil {
		fields = append(fields, html.FieldHTML)
	}
	if m.crawled_at != nil {
		fields = append(fields, html.FieldCrawledAt)
	}
	if m.parsed_at != nil {
		fields = append(fields, html.FieldParsedAt)
	}
	if m.analyzed_at != nil {
		fields = append(fields, html.FieldAnalyzedAt)
	}
	if m.reason != nil {
		fields = append(fields, html.FieldReason)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HTMLMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case html.FieldOriginShortID:
		return m.OriginShortID()
	case html.FieldIsChinese:
		return m.IsChinese()
	case html.FieldURL:
		return m.URL()
	case html.FieldHTML:
		return m.HTML()
	case html.FieldCrawledAt:
		return m.CrawledAt()
	case html.FieldParsedAt:
		return m.ParsedAt()
	case html.FieldAnalyzedAt:
		return m.AnalyzedAt()
	case html.FieldReason:
		return m.Reason()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HTMLMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case html.FieldOriginShortID:
		return m.OldOriginShortID(ctx)
	case html.FieldIsChinese:
		return m.OldIsChinese(ctx)
	case html.FieldURL:
		return m.OldURL(ctx)
	case html.FieldHTML:
		return m.OldHTML(ctx)
	case html.FieldCrawledAt:
		return m.OldCrawledAt(ctx)
	case html.FieldParsedAt:
		return m.OldParsedAt(ctx)
	case html.FieldAnalyzedAt:
		return m.OldAnalyzedAt(ctx)
	case html.FieldReason:
		return m.OldReason(ctx)
	}
	return nil, fmt.Errorf("unknown Html field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HTMLMutation) SetField(name string, value ent.Value) error {
	switch name {
	case html.FieldOriginShortID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginShortID(v)
		return nil
	case html.FieldIsChinese:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsChinese(v)
		return nil
	case html.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case html.FieldHTML:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTML(v)
		return nil
	case html.FieldCrawledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrawledAt(v)
		return nil
	case html.FieldParsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParsedAt(v)
		return nil
	case html.FieldAnalyzedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnalyzedAt(v)
		return nil
	case html.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	}
	return fmt.Errorf("unknown Html field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HTMLMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HTMLMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HTMLMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Html numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HTMLMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(html.FieldParsedAt) {
		fields = append(fields, html.FieldParsedAt)
	}
	if m.FieldCleared(html.FieldAnalyzedAt) {
		fields = append(fields, html.FieldAnalyzedAt)
	}
	if m.FieldCleared(html.FieldReason) {
		fields = append(fields, html.FieldReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HTMLMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HTMLMutation) ClearField(name string) error {
	switch name {
	case html.FieldParsedAt:
		m.ClearParsedAt()
		return nil
	case html.FieldAnalyzedAt:
		m.ClearAnalyzedAt()
		return nil
	case html.FieldReason:
		m.ClearReason()
		return nil
	}
	return fmt.Errorf("unknown Html nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HTMLMutation) ResetField(name string) error {
	switch name {
	case html.FieldOriginShortID:
		m.ResetOriginShortID()
		return nil
	case html.FieldIsChinese:
		m.ResetIsChinese()
		return nil
	case html.FieldURL:
		m.ResetURL()
		return nil
	case html.FieldHTML:
		m.ResetHTML()
		return nil
	case html.FieldCrawledAt:
		m.ResetCrawledAt()
		return nil
	case html.FieldParsedAt:
		m.ResetParsedAt()
		return nil
	case html.FieldAnalyzedAt:
		m.ResetAnalyzedAt()
		return nil
	case html.FieldReason:
		m.ResetReason()
		return nil
	}
	return fmt.Errorf("unknown Html field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HTMLMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HTMLMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HTMLMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HTMLMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HTMLMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HTMLMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HTMLMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Html unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HTMLMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Html edge %s", name)
}

// KeywordStrongMutation represents an operation that mutates the KeywordStrong nodes in the graph.
type KeywordStrongMutation struct {
	config
	op            Op
	typ           string
	id            *string
	category      *uint64
	addcategory   *int64
	main          *string
	main_count    *uint64
	addmain_count *int64
	sub           *string
	sub_count     *uint64
	addsub_count  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*KeywordStrong, error)
	predicates    []predicate.KeywordStrong
}

var _ ent.Mutation = (*KeywordStrongMutation)(nil)

// keywordstrongOption allows management of the mutation configuration using functional options.
type keywordstrongOption func(*KeywordStrongMutation)

// newKeywordStrongMutation creates new mutation for the KeywordStrong entity.
func newKeywordStrongMutation(c config, op Op, opts ...keywordstrongOption) *KeywordStrongMutation {
	m := &KeywordStrongMutation{
		config:        c,
		op:            op,
		typ:           TypeKeywordStrong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeywordStrongID sets the ID field of the mutation.
func withKeywordStrongID(id string) keywordstrongOption {
	return func(m *KeywordStrongMutation) {
		var (
			err   error
			once  sync.Once
			value *KeywordStrong
		)
		m.oldValue = func(ctx context.Context) (*KeywordStrong, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KeywordStrong.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeywordStrong sets the old KeywordStrong of the mutation.
func withKeywordStrong(node *KeywordStrong) keywordstrongOption {
	return func(m *KeywordStrongMutation) {
		m.oldValue = func(context.Context) (*KeywordStrong, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeywordStrongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeywordStrongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KeywordStrong entities.
func (m *KeywordStrongMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeywordStrongMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeywordStrongMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KeywordStrong.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategory sets the "category" field.
func (m *KeywordStrongMutation) SetCategory(u uint64) {
	m.category = &u
	m.addcategory = nil
}

// Category returns the value of the "category" field in the mutation.
func (m *KeywordStrongMutation) Category() (r uint64, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the KeywordStrong entity.
// If the KeywordStrong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordStrongMutation) OldCategory(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// AddCategory adds u to the "category" field.
func (m *KeywordStrongMutation) AddCategory(u int64) {
	if m.addcategory != nil {
		*m.addcategory += u
	} else {
		m.addcategory = &u
	}
}

// AddedCategory returns the value that was added to the "category" field in this mutation.
func (m *KeywordStrongMutation) AddedCategory() (r int64, exists bool) {
	v := m.addcategory
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategory resets all changes to the "category" field.
func (m *KeywordStrongMutation) ResetCategory() {
	m.category = nil
	m.addcategory = nil
}

// SetMain sets the "main" field.
func (m *KeywordStrongMutation) SetMain(s string) {
	m.main = &s
}

// Main returns the value of the "main" field in the mutation.
func (m *KeywordStrongMutation) Main() (r string, exists bool) {
	v := m.main
	if v == nil {
		return
	}
	return *v, true
}

// OldMain returns the old "main" field's value of the KeywordStrong entity.
// If the KeywordStrong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordStrongMutation) OldMain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMain: %w", err)
	}
	return oldValue.Main, nil
}

// ResetMain resets all changes to the "main" field.
func (m *KeywordStrongMutation) ResetMain() {
	m.main = nil
}

// SetMainCount sets the "main_count" field.
func (m *KeywordStrongMutation) SetMainCount(u uint64) {
	m.main_count = &u
	m.addmain_count = nil
}

// MainCount returns the value of the "main_count" field in the mutation.
func (m *KeywordStrongMutation) MainCount() (r uint64, exists bool) {
	v := m.main_count
	if v == nil {
		return
	}
	return *v, true
}

// OldMainCount returns the old "main_count" field's value of the KeywordStrong entity.
// If the KeywordStrong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordStrongMutation) OldMainCount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainCount: %w", err)
	}
	return oldValue.MainCount, nil
}

// AddMainCount adds u to the "main_count" field.
func (m *KeywordStrongMutation) AddMainCount(u int64) {
	if m.addmain_count != nil {
		*m.addmain_count += u
	} else {
		m.addmain_count = &u
	}
}

// AddedMainCount returns the value that was added to the "main_count" field in this mutation.
func (m *KeywordStrongMutation) AddedMainCount() (r int64, exists bool) {
	v := m.addmain_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetMainCount resets all changes to the "main_count" field.
func (m *KeywordStrongMutation) ResetMainCount() {
	m.main_count = nil
	m.addmain_count = nil
}

// SetSub sets the "sub" field.
func (m *KeywordStrongMutation) SetSub(s string) {
	m.sub = &s
}

// Sub returns the value of the "sub" field in the mutation.
func (m *KeywordStrongMutation) Sub() (r string, exists bool) {
	v := m.sub
	if v == nil {
		return
	}
	return *v, true
}

// OldSub returns the old "sub" field's value of the KeywordStrong entity.
// If the KeywordStrong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordStrongMutation) OldSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSub: %w", err)
	}
	return oldValue.Sub, nil
}

// ResetSub resets all changes to the "sub" field.
func (m *KeywordStrongMutation) ResetSub() {
	m.sub = nil
}

// SetSubCount sets the "sub_count" field.
func (m *KeywordStrongMutation) SetSubCount(u uint64) {
	m.sub_count = &u
	m.addsub_count = nil
}

// SubCount returns the value of the "sub_count" field in the mutation.
func (m *KeywordStrongMutation) SubCount() (r uint64, exists bool) {
	v := m.sub_count
	if v == nil {
		return
	}
	return *v, true
}

// OldSubCount returns the old "sub_count" field's value of the KeywordStrong entity.
// If the KeywordStrong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordStrongMutation) OldSubCount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubCount: %w", err)
	}
	return oldValue.SubCount, nil
}

// AddSubCount adds u to the "sub_count" field.
func (m *KeywordStrongMutation) AddSubCount(u int64) {
	if m.addsub_count != nil {
		*m.addsub_count += u
	} else {
		m.addsub_count = &u
	}
}

// AddedSubCount returns the value that was added to the "sub_count" field in this mutation.
func (m *KeywordStrongMutation) AddedSubCount() (r int64, exists bool) {
	v := m.addsub_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubCount resets all changes to the "sub_count" field.
func (m *KeywordStrongMutation) ResetSubCount() {
	m.sub_count = nil
	m.addsub_count = nil
}

// Where appends a list predicates to the KeywordStrongMutation builder.
func (m *KeywordStrongMutation) Where(ps ...predicate.KeywordStrong) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeywordStrongMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeywordStrongMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KeywordStrong, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeywordStrongMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeywordStrongMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KeywordStrong).
func (m *KeywordStrongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeywordStrongMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.category != nil {
		fields = append(fields, keywordstrong.FieldCategory)
	}
	if m.main != nil {
		fields = append(fields, keywordstrong.FieldMain)
	}
	if m.main_count != nil {
		fields = append(fields, keywordstrong.FieldMainCount)
	}
	if m.sub != nil {
		fields = append(fields, keywordstrong.FieldSub)
	}
	if m.sub_count != nil {
		fields = append(fields, keywordstrong.FieldSubCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeywordStrongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keywordstrong.FieldCategory:
		return m.Category()
	case keywordstrong.FieldMain:
		return m.Main()
	case keywordstrong.FieldMainCount:
		return m.MainCount()
	case keywordstrong.FieldSub:
		return m.Sub()
	case keywordstrong.FieldSubCount:
		return m.SubCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeywordStrongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keywordstrong.FieldCategory:
		return m.OldCategory(ctx)
	case keywordstrong.FieldMain:
		return m.OldMain(ctx)
	case keywordstrong.FieldMainCount:
		return m.OldMainCount(ctx)
	case keywordstrong.FieldSub:
		return m.OldSub(ctx)
	case keywordstrong.FieldSubCount:
		return m.OldSubCount(ctx)
	}
	return nil, fmt.Errorf("unknown KeywordStrong field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeywordStrongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keywordstrong.FieldCategory:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case keywordstrong.FieldMain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMain(v)
		return nil
	case keywordstrong.FieldMainCount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainCount(v)
		return nil
	case keywordstrong.FieldSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSub(v)
		return nil
	case keywordstrong.FieldSubCount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubCount(v)
		return nil
	}
	return fmt.Errorf("unknown KeywordStrong field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeywordStrongMutation) AddedFields() []string {
	var fields []string
	if m.addcategory != nil {
		fields = append(fields, keywordstrong.FieldCategory)
	}
	if m.addmain_count != nil {
		fields = append(fields, keywordstrong.FieldMainCount)
	}
	if m.addsub_count != nil {
		fields = append(fields, keywordstrong.FieldSubCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeywordStrongMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case keywordstrong.FieldCategory:
		return m.AddedCategory()
	case keywordstrong.FieldMainCount:
		return m.AddedMainCount()
	case keywordstrong.FieldSubCount:
		return m.AddedSubCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeywordStrongMutation) AddField(name string, value ent.Value) error {
	switch name {
	case keywordstrong.FieldCategory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategory(v)
		return nil
	case keywordstrong.FieldMainCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMainCount(v)
		return nil
	case keywordstrong.FieldSubCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubCount(v)
		return nil
	}
	return fmt.Errorf("unknown KeywordStrong numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeywordStrongMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeywordStrongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeywordStrongMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KeywordStrong nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeywordStrongMutation) ResetField(name string) error {
	switch name {
	case keywordstrong.FieldCategory:
		m.ResetCategory()
		return nil
	case keywordstrong.FieldMain:
		m.ResetMain()
		return nil
	case keywordstrong.FieldMainCount:
		m.ResetMainCount()
		return nil
	case keywordstrong.FieldSub:
		m.ResetSub()
		return nil
	case keywordstrong.FieldSubCount:
		m.ResetSubCount()
		return nil
	}
	return fmt.Errorf("unknown KeywordStrong field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeywordStrongMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeywordStrongMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeywordStrongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeywordStrongMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeywordStrongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeywordStrongMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeywordStrongMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown KeywordStrong unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeywordStrongMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown KeywordStrong edge %s", name)
}

// KeywordWeakMutation represents an operation that mutates the KeywordWeak nodes in the graph.
type KeywordWeakMutation struct {
	config
	op            Op
	typ           string
	id            *string
	category      *uint64
	addcategory   *int64
	word          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*KeywordWeak, error)
	predicates    []predicate.KeywordWeak
}

var _ ent.Mutation = (*KeywordWeakMutation)(nil)

// keywordweakOption allows management of the mutation configuration using functional options.
type keywordweakOption func(*KeywordWeakMutation)

// newKeywordWeakMutation creates new mutation for the KeywordWeak entity.
func newKeywordWeakMutation(c config, op Op, opts ...keywordweakOption) *KeywordWeakMutation {
	m := &KeywordWeakMutation{
		config:        c,
		op:            op,
		typ:           TypeKeywordWeak,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeywordWeakID sets the ID field of the mutation.
func withKeywordWeakID(id string) keywordweakOption {
	return func(m *KeywordWeakMutation) {
		var (
			err   error
			once  sync.Once
			value *KeywordWeak
		)
		m.oldValue = func(ctx context.Context) (*KeywordWeak, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KeywordWeak.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeywordWeak sets the old KeywordWeak of the mutation.
func withKeywordWeak(node *KeywordWeak) keywordweakOption {
	return func(m *KeywordWeakMutation) {
		m.oldValue = func(context.Context) (*KeywordWeak, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeywordWeakMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeywordWeakMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KeywordWeak entities.
func (m *KeywordWeakMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeywordWeakMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeywordWeakMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KeywordWeak.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategory sets the "category" field.
func (m *KeywordWeakMutation) SetCategory(u uint64) {
	m.category = &u
	m.addcategory = nil
}

// Category returns the value of the "category" field in the mutation.
func (m *KeywordWeakMutation) Category() (r uint64, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the KeywordWeak entity.
// If the KeywordWeak object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordWeakMutation) OldCategory(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// AddCategory adds u to the "category" field.
func (m *KeywordWeakMutation) AddCategory(u int64) {
	if m.addcategory != nil {
		*m.addcategory += u
	} else {
		m.addcategory = &u
	}
}

// AddedCategory returns the value that was added to the "category" field in this mutation.
func (m *KeywordWeakMutation) AddedCategory() (r int64, exists bool) {
	v := m.addcategory
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategory resets all changes to the "category" field.
func (m *KeywordWeakMutation) ResetCategory() {
	m.category = nil
	m.addcategory = nil
}

// SetWord sets the "word" field.
func (m *KeywordWeakMutation) SetWord(s string) {
	m.word = &s
}

// Word returns the value of the "word" field in the mutation.
func (m *KeywordWeakMutation) Word() (r string, exists bool) {
	v := m.word
	if v == nil {
		return
	}
	return *v, true
}

// OldWord returns the old "word" field's value of the KeywordWeak entity.
// If the KeywordWeak object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeywordWeakMutation) OldWord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord: %w", err)
	}
	return oldValue.Word, nil
}

// ResetWord resets all changes to the "word" field.
func (m *KeywordWeakMutation) ResetWord() {
	m.word = nil
}

// Where appends a list predicates to the KeywordWeakMutation builder.
func (m *KeywordWeakMutation) Where(ps ...predicate.KeywordWeak) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeywordWeakMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeywordWeakMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KeywordWeak, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeywordWeakMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeywordWeakMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KeywordWeak).
func (m *KeywordWeakMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeywordWeakMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.category != nil {
		fields = append(fields, keywordweak.FieldCategory)
	}
	if m.word != nil {
		fields = append(fields, keywordweak.FieldWord)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeywordWeakMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keywordweak.FieldCategory:
		return m.Category()
	case keywordweak.FieldWord:
		return m.Word()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeywordWeakMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keywordweak.FieldCategory:
		return m.OldCategory(ctx)
	case keywordweak.FieldWord:
		return m.OldWord(ctx)
	}
	return nil, fmt.Errorf("unknown KeywordWeak field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeywordWeakMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keywordweak.FieldCategory:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case keywordweak.FieldWord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord(v)
		return nil
	}
	return fmt.Errorf("unknown KeywordWeak field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeywordWeakMutation) AddedFields() []string {
	var fields []string
	if m.addcategory != nil {
		fields = append(fields, keywordweak.FieldCategory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeywordWeakMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case keywordweak.FieldCategory:
		return m.AddedCategory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeywordWeakMutation) AddField(name string, value ent.Value) error {
	switch name {
	case keywordweak.FieldCategory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategory(v)
		return nil
	}
	return fmt.Errorf("unknown KeywordWeak numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeywordWeakMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeywordWeakMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeywordWeakMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KeywordWeak nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeywordWeakMutation) ResetField(name string) error {
	switch name {
	case keywordweak.FieldCategory:
		m.ResetCategory()
		return nil
	case keywordweak.FieldWord:
		m.ResetWord()
		return nil
	}
	return fmt.Errorf("unknown KeywordWeak field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeywordWeakMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeywordWeakMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeywordWeakMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeywordWeakMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeywordWeakMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeywordWeakMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeywordWeakMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown KeywordWeak unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeywordWeakMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown KeywordWeak edge %s", name)
}

// ReportMutation represents an operation that mutates the Report nodes in the graph.
type ReportMutation struct {
	config
	op              Op
	typ             string
	id              *string
	report_type     *string
	start_time      *time.Time
	end_time        *time.Time
	trigger_user_id *string
	trigger_at      *time.Time
	content         *string
	generated_at    *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Report, error)
	predicates      []predicate.Report
}

var _ ent.Mutation = (*ReportMutation)(nil)

// reportOption allows management of the mutation configuration using functional options.
type reportOption func(*ReportMutation)

// newReportMutation creates new mutation for the Report entity.
func newReportMutation(c config, op Op, opts ...reportOption) *ReportMutation {
	m := &ReportMutation{
		config:        c,
		op:            op,
		typ:           TypeReport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReportID sets the ID field of the mutation.
func withReportID(id string) reportOption {
	return func(m *ReportMutation) {
		var (
			err   error
			once  sync.Once
			value *Report
		)
		m.oldValue = func(ctx context.Context) (*Report, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Report.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReport sets the old Report of the mutation.
func withReport(node *Report) reportOption {
	return func(m *ReportMutation) {
		m.oldValue = func(context.Context) (*Report, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Report entities.
func (m *ReportMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReportMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReportMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Report.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReportType sets the "report_type" field.
func (m *ReportMutation) SetReportType(s string) {
	m.report_type = &s
}

// ReportType returns the value of the "report_type" field in the mutation.
func (m *ReportMutation) ReportType() (r string, exists bool) {
	v := m.report_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReportType returns the old "report_type" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldReportType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportType: %w", err)
	}
	return oldValue.ReportType, nil
}

// ResetReportType resets all changes to the "report_type" field.
func (m *ReportMutation) ResetReportType() {
	m.report_type = nil
}

// SetStartTime sets the "start_time" field.
func (m *ReportMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ReportMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ReportMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *ReportMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *ReportMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *ReportMutation) ResetEndTime() {
	m.end_time = nil
}

// SetTriggerUserID sets the "trigger_user_id" field.
func (m *ReportMutation) SetTriggerUserID(s string) {
	m.trigger_user_id = &s
}

// TriggerUserID returns the value of the "trigger_user_id" field in the mutation.
func (m *ReportMutation) TriggerUserID() (r string, exists bool) {
	v := m.trigger_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTriggerUserID returns the old "trigger_user_id" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldTriggerUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTriggerUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTriggerUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTriggerUserID: %w", err)
	}
	return oldValue.TriggerUserID, nil
}

// ClearTriggerUserID clears the value of the "trigger_user_id" field.
func (m *ReportMutation) ClearTriggerUserID() {
	m.trigger_user_id = nil
	m.clearedFields[report.FieldTriggerUserID] = struct{}{}
}

// TriggerUserIDCleared returns if the "trigger_user_id" field was cleared in this mutation.
func (m *ReportMutation) TriggerUserIDCleared() bool {
	_, ok := m.clearedFields[report.FieldTriggerUserID]
	return ok
}

// ResetTriggerUserID resets all changes to the "trigger_user_id" field.
func (m *ReportMutation) ResetTriggerUserID() {
	m.trigger_user_id = nil
	delete(m.clearedFields, report.FieldTriggerUserID)
}

// SetTriggerAt sets the "trigger_at" field.
func (m *ReportMutation) SetTriggerAt(t time.Time) {
	m.trigger_at = &t
}

// TriggerAt returns the value of the "trigger_at" field in the mutation.
func (m *ReportMutation) TriggerAt() (r time.Time, exists bool) {
	v := m.trigger_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTriggerAt returns the old "trigger_at" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldTriggerAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTriggerAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTriggerAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTriggerAt: %w", err)
	}
	return oldValue.TriggerAt, nil
}

// ResetTriggerAt resets all changes to the "trigger_at" field.
func (m *ReportMutation) ResetTriggerAt() {
	m.trigger_at = nil
}

// SetContent sets the "content" field.
func (m *ReportMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ReportMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ReportMutation) ResetContent() {
	m.content = nil
}

// SetGeneratedAt sets the "generated_at" field.
func (m *ReportMutation) SetGeneratedAt(t time.Time) {
	m.generated_at = &t
}

// GeneratedAt returns the value of the "generated_at" field in the mutation.
func (m *ReportMutation) GeneratedAt() (r time.Time, exists bool) {
	v := m.generated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldGeneratedAt returns the old "generated_at" field's value of the Report entity.
// If the Report object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportMutation) OldGeneratedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGeneratedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGeneratedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeneratedAt: %w", err)
	}
	return oldValue.GeneratedAt, nil
}

// ResetGeneratedAt resets all changes to the "generated_at" field.
func (m *ReportMutation) ResetGeneratedAt() {
	m.generated_at = nil
}

// Where appends a list predicates to the ReportMutation builder.
func (m *ReportMutation) Where(ps ...predicate.Report) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Report, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Report).
func (m *ReportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReportMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.report_type != nil {
		fields = append(fields, report.FieldReportType)
	}
	if m.start_time != nil {
		fields = append(fields, report.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, report.FieldEndTime)
	}
	if m.trigger_user_id != nil {
		fields = append(fields, report.FieldTriggerUserID)
	}
	if m.trigger_at != nil {
		fields = append(fields, report.FieldTriggerAt)
	}
	if m.content != nil {
		fields = append(fields, report.FieldContent)
	}
	if m.generated_at != nil {
		fields = append(fields, report.FieldGeneratedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case report.FieldReportType:
		return m.ReportType()
	case report.FieldStartTime:
		return m.StartTime()
	case report.FieldEndTime:
		return m.EndTime()
	case report.FieldTriggerUserID:
		return m.TriggerUserID()
	case report.FieldTriggerAt:
		return m.TriggerAt()
	case report.FieldContent:
		return m.Content()
	case report.FieldGeneratedAt:
		return m.GeneratedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case report.FieldReportType:
		return m.OldReportType(ctx)
	case report.FieldStartTime:
		return m.OldStartTime(ctx)
	case report.FieldEndTime:
		return m.OldEndTime(ctx)
	case report.FieldTriggerUserID:
		return m.OldTriggerUserID(ctx)
	case report.FieldTriggerAt:
		return m.OldTriggerAt(ctx)
	case report.FieldContent:
		return m.OldContent(ctx)
	case report.FieldGeneratedAt:
		return m.OldGeneratedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Report field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case report.FieldReportType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportType(v)
		return nil
	case report.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case report.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case report.FieldTriggerUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTriggerUserID(v)
		return nil
	case report.FieldTriggerAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTriggerAt(v)
		return nil
	case report.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case report.FieldGeneratedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeneratedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Report field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReportMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReportMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Report numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReportMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(report.FieldTriggerUserID) {
		fields = append(fields, report.FieldTriggerUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReportMutation) ClearField(name string) error {
	switch name {
	case report.FieldTriggerUserID:
		m.ClearTriggerUserID()
		return nil
	}
	return fmt.Errorf("unknown Report nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReportMutation) ResetField(name string) error {
	switch name {
	case report.FieldReportType:
		m.ResetReportType()
		return nil
	case report.FieldStartTime:
		m.ResetStartTime()
		return nil
	case report.FieldEndTime:
		m.ResetEndTime()
		return nil
	case report.FieldTriggerUserID:
		m.ResetTriggerUserID()
		return nil
	case report.FieldTriggerAt:
		m.ResetTriggerAt()
		return nil
	case report.FieldContent:
		m.ResetContent()
		return nil
	case report.FieldGeneratedAt:
		m.ResetGeneratedAt()
		return nil
	}
	return fmt.Errorf("unknown Report field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReportMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReportMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReportMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReportMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Report unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReportMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Report edge %s", name)
}

// SystemConfigMutation represents an operation that mutates the SystemConfig nodes in the graph.
type SystemConfigMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	description   *string
	api_model     *string
	api_url       *string
	api_key       *string
	prompt_system *string
	prompt_user   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SystemConfig, error)
	predicates    []predicate.SystemConfig
}

var _ ent.Mutation = (*SystemConfigMutation)(nil)

// systemconfigOption allows management of the mutation configuration using functional options.
type systemconfigOption func(*SystemConfigMutation)

// newSystemConfigMutation creates new mutation for the SystemConfig entity.
func newSystemConfigMutation(c config, op Op, opts ...systemconfigOption) *SystemConfigMutation {
	m := &SystemConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemConfigID sets the ID field of the mutation.
func withSystemConfigID(id string) systemconfigOption {
	return func(m *SystemConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *SystemConfig
		)
		m.oldValue = func(ctx context.Context) (*SystemConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SystemConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemConfig sets the old SystemConfig of the mutation.
func withSystemConfig(node *SystemConfig) systemconfigOption {
	return func(m *SystemConfigMutation) {
		m.oldValue = func(context.Context) (*SystemConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SystemConfig entities.
func (m *SystemConfigMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SystemConfigMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SystemConfigMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SystemConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SystemConfigMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SystemConfigMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SystemConfigMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *SystemConfigMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SystemConfigMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SystemConfigMutation) ResetDescription() {
	m.description = nil
}

// SetAPIModel sets the "api_model" field.
func (m *SystemConfigMutation) SetAPIModel(s string) {
	m.api_model = &s
}

// APIModel returns the value of the "api_model" field in the mutation.
func (m *SystemConfigMutation) APIModel() (r string, exists bool) {
	v := m.api_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIModel returns the old "api_model" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldAPIModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIModel: %w", err)
	}
	return oldValue.APIModel, nil
}

// ResetAPIModel resets all changes to the "api_model" field.
func (m *SystemConfigMutation) ResetAPIModel() {
	m.api_model = nil
}

// SetAPIURL sets the "api_url" field.
func (m *SystemConfigMutation) SetAPIURL(s string) {
	m.api_url = &s
}

// APIURL returns the value of the "api_url" field in the mutation.
func (m *SystemConfigMutation) APIURL() (r string, exists bool) {
	v := m.api_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIURL returns the old "api_url" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldAPIURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIURL: %w", err)
	}
	return oldValue.APIURL, nil
}

// ResetAPIURL resets all changes to the "api_url" field.
func (m *SystemConfigMutation) ResetAPIURL() {
	m.api_url = nil
}

// SetAPIKey sets the "api_key" field.
func (m *SystemConfigMutation) SetAPIKey(s string) {
	m.api_key = &s
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *SystemConfigMutation) APIKey() (r string, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldAPIKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *SystemConfigMutation) ResetAPIKey() {
	m.api_key = nil
}

// SetPromptSystem sets the "prompt_system" field.
func (m *SystemConfigMutation) SetPromptSystem(s string) {
	m.prompt_system = &s
}

// PromptSystem returns the value of the "prompt_system" field in the mutation.
func (m *SystemConfigMutation) PromptSystem() (r string, exists bool) {
	v := m.prompt_system
	if v == nil {
		return
	}
	return *v, true
}

// OldPromptSystem returns the old "prompt_system" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldPromptSystem(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromptSystem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromptSystem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromptSystem: %w", err)
	}
	return oldValue.PromptSystem, nil
}

// ResetPromptSystem resets all changes to the "prompt_system" field.
func (m *SystemConfigMutation) ResetPromptSystem() {
	m.prompt_system = nil
}

// SetPromptUser sets the "prompt_user" field.
func (m *SystemConfigMutation) SetPromptUser(s string) {
	m.prompt_user = &s
}

// PromptUser returns the value of the "prompt_user" field in the mutation.
func (m *SystemConfigMutation) PromptUser() (r string, exists bool) {
	v := m.prompt_user
	if v == nil {
		return
	}
	return *v, true
}

// OldPromptUser returns the old "prompt_user" field's value of the SystemConfig entity.
// If the SystemConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SystemConfigMutation) OldPromptUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromptUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromptUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromptUser: %w", err)
	}
	return oldValue.PromptUser, nil
}

// ResetPromptUser resets all changes to the "prompt_user" field.
func (m *SystemConfigMutation) ResetPromptUser() {
	m.prompt_user = nil
}

// Where appends a list predicates to the SystemConfigMutation builder.
func (m *SystemConfigMutation) Where(ps ...predicate.SystemConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SystemConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SystemConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SystemConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SystemConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SystemConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SystemConfig).
func (m *SystemConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SystemConfigMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, systemconfig.FieldName)
	}
	if m.description != nil {
		fields = append(fields, systemconfig.FieldDescription)
	}
	if m.api_model != nil {
		fields = append(fields, systemconfig.FieldAPIModel)
	}
	if m.api_url != nil {
		fields = append(fields, systemconfig.FieldAPIURL)
	}
	if m.api_key != nil {
		fields = append(fields, systemconfig.FieldAPIKey)
	}
	if m.prompt_system != nil {
		fields = append(fields, systemconfig.FieldPromptSystem)
	}
	if m.prompt_user != nil {
		fields = append(fields, systemconfig.FieldPromptUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SystemConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemconfig.FieldName:
		return m.Name()
	case systemconfig.FieldDescription:
		return m.Description()
	case systemconfig.FieldAPIModel:
		return m.APIModel()
	case systemconfig.FieldAPIURL:
		return m.APIURL()
	case systemconfig.FieldAPIKey:
		return m.APIKey()
	case systemconfig.FieldPromptSystem:
		return m.PromptSystem()
	case systemconfig.FieldPromptUser:
		return m.PromptUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SystemConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemconfig.FieldName:
		return m.OldName(ctx)
	case systemconfig.FieldDescription:
		return m.OldDescription(ctx)
	case systemconfig.FieldAPIModel:
		return m.OldAPIModel(ctx)
	case systemconfig.FieldAPIURL:
		return m.OldAPIURL(ctx)
	case systemconfig.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case systemconfig.FieldPromptSystem:
		return m.OldPromptSystem(ctx)
	case systemconfig.FieldPromptUser:
		return m.OldPromptUser(ctx)
	}
	return nil, fmt.Errorf("unknown SystemConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemconfig.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case systemconfig.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case systemconfig.FieldAPIModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIModel(v)
		return nil
	case systemconfig.FieldAPIURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIURL(v)
		return nil
	case systemconfig.FieldAPIKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case systemconfig.FieldPromptSystem:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromptSystem(v)
		return nil
	case systemconfig.FieldPromptUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromptUser(v)
		return nil
	}
	return fmt.Errorf("unknown SystemConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SystemConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SystemConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SystemConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SystemConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SystemConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SystemConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SystemConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SystemConfigMutation) ResetField(name string) error {
	switch name {
	case systemconfig.FieldName:
		m.ResetName()
		return nil
	case systemconfig.FieldDescription:
		m.ResetDescription()
		return nil
	case systemconfig.FieldAPIModel:
		m.ResetAPIModel()
		return nil
	case systemconfig.FieldAPIURL:
		m.ResetAPIURL()
		return nil
	case systemconfig.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case systemconfig.FieldPromptSystem:
		m.ResetPromptSystem()
		return nil
	case systemconfig.FieldPromptUser:
		m.ResetPromptUser()
		return nil
	}
	return fmt.Errorf("unknown SystemConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SystemConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SystemConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SystemConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SystemConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SystemConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SystemConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SystemConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SystemConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SystemConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SystemConfig edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op             Op
	typ            string
	id             *string
	user_id        *string
	keyword        *string
	follow_title   *bool
	follow_content *bool
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Topic, error)
	predicates     []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id string) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Topic entities.
func (m *TopicMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TopicMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TopicMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TopicMutation) ResetUserID() {
	m.user_id = nil
}

// SetKeyword sets the "keyword" field.
func (m *TopicMutation) SetKeyword(s string) {
	m.keyword = &s
}

// Keyword returns the value of the "keyword" field in the mutation.
func (m *TopicMutation) Keyword() (r string, exists bool) {
	v := m.keyword
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyword returns the old "keyword" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldKeyword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyword: %w", err)
	}
	return oldValue.Keyword, nil
}

// ResetKeyword resets all changes to the "keyword" field.
func (m *TopicMutation) ResetKeyword() {
	m.keyword = nil
}

// SetFollowTitle sets the "follow_title" field.
func (m *TopicMutation) SetFollowTitle(b bool) {
	m.follow_title = &b
}

// FollowTitle returns the value of the "follow_title" field in the mutation.
func (m *TopicMutation) FollowTitle() (r bool, exists bool) {
	v := m.follow_title
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowTitle returns the old "follow_title" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldFollowTitle(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowTitle: %w", err)
	}
	return oldValue.FollowTitle, nil
}

// ResetFollowTitle resets all changes to the "follow_title" field.
func (m *TopicMutation) ResetFollowTitle() {
	m.follow_title = nil
}

// SetFollowContent sets the "follow_content" field.
func (m *TopicMutation) SetFollowContent(b bool) {
	m.follow_content = &b
}

// FollowContent returns the value of the "follow_content" field in the mutation.
func (m *TopicMutation) FollowContent() (r bool, exists bool) {
	v := m.follow_content
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowContent returns the old "follow_content" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldFollowContent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowContent: %w", err)
	}
	return oldValue.FollowContent, nil
}

// ResetFollowContent resets all changes to the "follow_content" field.
func (m *TopicMutation) ResetFollowContent() {
	m.follow_content = nil
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TopicMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TopicMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Topic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TopicMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, topic.FieldUserID)
	}
	if m.keyword != nil {
		fields = append(fields, topic.FieldKeyword)
	}
	if m.follow_title != nil {
		fields = append(fields, topic.FieldFollowTitle)
	}
	if m.follow_content != nil {
		fields = append(fields, topic.FieldFollowContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldUserID:
		return m.UserID()
	case topic.FieldKeyword:
		return m.Keyword()
	case topic.FieldFollowTitle:
		return m.FollowTitle()
	case topic.FieldFollowContent:
		return m.FollowContent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldUserID:
		return m.OldUserID(ctx)
	case topic.FieldKeyword:
		return m.OldKeyword(ctx)
	case topic.FieldFollowTitle:
		return m.OldFollowTitle(ctx)
	case topic.FieldFollowContent:
		return m.OldFollowContent(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case topic.FieldKeyword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyword(v)
		return nil
	case topic.FieldFollowTitle:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowTitle(v)
		return nil
	case topic.FieldFollowContent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowContent(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldUserID:
		m.ResetUserID()
		return nil
	case topic.FieldKeyword:
		m.ResetKeyword()
		return nil
	case topic.FieldFollowTitle:
		m.ResetFollowTitle()
		return nil
	case topic.FieldFollowContent:
		m.ResetFollowContent()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Topic edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	username      *string
	password      *string
	is_admin      *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetIsAdmin sets the "is_admin" field.
func (m *UserMutation) SetIsAdmin(b bool) {
	m.is_admin = &b
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *UserMutation) IsAdmin() (r bool, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *UserMutation) ResetIsAdmin() {
	m.is_admin = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.is_admin != nil {
		fields = append(fields, user.FieldIsAdmin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldIsAdmin:
		return m.IsAdmin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
