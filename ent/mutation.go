// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/article"
	"github.com/wolodata/schema/ent/predicate"
	"github.com/wolodata/schema/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle = "Article"
	TypeUser    = "User"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	origin_name   *string
	origin_type   *string
	url           *string
	title_cn      *string
	title_en      *string
	author        *string
	tags          *[]string
	appendtags    []string
	published_at  *time.Time
	html_cn       *string
	html_en       *string
	text_cn       *string
	text_en       *string
	crawled_at    *time.Time
	summary_cn    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Article, error)
	predicates    []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOriginName sets the "origin_name" field.
func (m *ArticleMutation) SetOriginName(s string) {
	m.origin_name = &s
}

// OriginName returns the value of the "origin_name" field in the mutation.
func (m *ArticleMutation) OriginName() (r string, exists bool) {
	v := m.origin_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginName returns the old "origin_name" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldOriginName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginName: %w", err)
	}
	return oldValue.OriginName, nil
}

// ResetOriginName resets all changes to the "origin_name" field.
func (m *ArticleMutation) ResetOriginName() {
	m.origin_name = nil
}

// SetOriginType sets the "origin_type" field.
func (m *ArticleMutation) SetOriginType(s string) {
	m.origin_type = &s
}

// OriginType returns the value of the "origin_type" field in the mutation.
func (m *ArticleMutation) OriginType() (r string, exists bool) {
	v := m.origin_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginType returns the old "origin_type" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldOriginType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginType: %w", err)
	}
	return oldValue.OriginType, nil
}

// ResetOriginType resets all changes to the "origin_type" field.
func (m *ArticleMutation) ResetOriginType() {
	m.origin_type = nil
}

// SetURL sets the "url" field.
func (m *ArticleMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ArticleMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ArticleMutation) ResetURL() {
	m.url = nil
}

// SetTitleCn sets the "title_cn" field.
func (m *ArticleMutation) SetTitleCn(s string) {
	m.title_cn = &s
}

// TitleCn returns the value of the "title_cn" field in the mutation.
func (m *ArticleMutation) TitleCn() (r string, exists bool) {
	v := m.title_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleCn returns the old "title_cn" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitleCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleCn: %w", err)
	}
	return oldValue.TitleCn, nil
}

// ClearTitleCn clears the value of the "title_cn" field.
func (m *ArticleMutation) ClearTitleCn() {
	m.title_cn = nil
	m.clearedFields[article.FieldTitleCn] = struct{}{}
}

// TitleCnCleared returns if the "title_cn" field was cleared in this mutation.
func (m *ArticleMutation) TitleCnCleared() bool {
	_, ok := m.clearedFields[article.FieldTitleCn]
	return ok
}

// ResetTitleCn resets all changes to the "title_cn" field.
func (m *ArticleMutation) ResetTitleCn() {
	m.title_cn = nil
	delete(m.clearedFields, article.FieldTitleCn)
}

// SetTitleEn sets the "title_en" field.
func (m *ArticleMutation) SetTitleEn(s string) {
	m.title_en = &s
}

// TitleEn returns the value of the "title_en" field in the mutation.
func (m *ArticleMutation) TitleEn() (r string, exists bool) {
	v := m.title_en
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleEn returns the old "title_en" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitleEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleEn: %w", err)
	}
	return oldValue.TitleEn, nil
}

// ClearTitleEn clears the value of the "title_en" field.
func (m *ArticleMutation) ClearTitleEn() {
	m.title_en = nil
	m.clearedFields[article.FieldTitleEn] = struct{}{}
}

// TitleEnCleared returns if the "title_en" field was cleared in this mutation.
func (m *ArticleMutation) TitleEnCleared() bool {
	_, ok := m.clearedFields[article.FieldTitleEn]
	return ok
}

// ResetTitleEn resets all changes to the "title_en" field.
func (m *ArticleMutation) ResetTitleEn() {
	m.title_en = nil
	delete(m.clearedFields, article.FieldTitleEn)
}

// SetAuthor sets the "author" field.
func (m *ArticleMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *ArticleMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ClearAuthor clears the value of the "author" field.
func (m *ArticleMutation) ClearAuthor() {
	m.author = nil
	m.clearedFields[article.FieldAuthor] = struct{}{}
}

// AuthorCleared returns if the "author" field was cleared in this mutation.
func (m *ArticleMutation) AuthorCleared() bool {
	_, ok := m.clearedFields[article.FieldAuthor]
	return ok
}

// ResetAuthor resets all changes to the "author" field.
func (m *ArticleMutation) ResetAuthor() {
	m.author = nil
	delete(m.clearedFields, article.FieldAuthor)
}

// SetTags sets the "tags" field.
func (m *ArticleMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *ArticleMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *ArticleMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *ArticleMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ClearTags clears the value of the "tags" field.
func (m *ArticleMutation) ClearTags() {
	m.tags = nil
	m.appendtags = nil
	m.clearedFields[article.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *ArticleMutation) TagsCleared() bool {
	_, ok := m.clearedFields[article.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *ArticleMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
	delete(m.clearedFields, article.FieldTags)
}

// SetPublishedAt sets the "published_at" field.
func (m *ArticleMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *ArticleMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *ArticleMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetHTMLCn sets the "html_cn" field.
func (m *ArticleMutation) SetHTMLCn(s string) {
	m.html_cn = &s
}

// HTMLCn returns the value of the "html_cn" field in the mutation.
func (m *ArticleMutation) HTMLCn() (r string, exists bool) {
	v := m.html_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLCn returns the old "html_cn" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldHTMLCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTMLCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTMLCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLCn: %w", err)
	}
	return oldValue.HTMLCn, nil
}

// ClearHTMLCn clears the value of the "html_cn" field.
func (m *ArticleMutation) ClearHTMLCn() {
	m.html_cn = nil
	m.clearedFields[article.FieldHTMLCn] = struct{}{}
}

// HTMLCnCleared returns if the "html_cn" field was cleared in this mutation.
func (m *ArticleMutation) HTMLCnCleared() bool {
	_, ok := m.clearedFields[article.FieldHTMLCn]
	return ok
}

// ResetHTMLCn resets all changes to the "html_cn" field.
func (m *ArticleMutation) ResetHTMLCn() {
	m.html_cn = nil
	delete(m.clearedFields, article.FieldHTMLCn)
}

// SetHTMLEn sets the "html_en" field.
func (m *ArticleMutation) SetHTMLEn(s string) {
	m.html_en = &s
}

// HTMLEn returns the value of the "html_en" field in the mutation.
func (m *ArticleMutation) HTMLEn() (r string, exists bool) {
	v := m.html_en
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLEn returns the old "html_en" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldHTMLEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTMLEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTMLEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLEn: %w", err)
	}
	return oldValue.HTMLEn, nil
}

// ClearHTMLEn clears the value of the "html_en" field.
func (m *ArticleMutation) ClearHTMLEn() {
	m.html_en = nil
	m.clearedFields[article.FieldHTMLEn] = struct{}{}
}

// HTMLEnCleared returns if the "html_en" field was cleared in this mutation.
func (m *ArticleMutation) HTMLEnCleared() bool {
	_, ok := m.clearedFields[article.FieldHTMLEn]
	return ok
}

// ResetHTMLEn resets all changes to the "html_en" field.
func (m *ArticleMutation) ResetHTMLEn() {
	m.html_en = nil
	delete(m.clearedFields, article.FieldHTMLEn)
}

// SetTextCn sets the "text_cn" field.
func (m *ArticleMutation) SetTextCn(s string) {
	m.text_cn = &s
}

// TextCn returns the value of the "text_cn" field in the mutation.
func (m *ArticleMutation) TextCn() (r string, exists bool) {
	v := m.text_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldTextCn returns the old "text_cn" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTextCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextCn: %w", err)
	}
	return oldValue.TextCn, nil
}

// ClearTextCn clears the value of the "text_cn" field.
func (m *ArticleMutation) ClearTextCn() {
	m.text_cn = nil
	m.clearedFields[article.FieldTextCn] = struct{}{}
}

// TextCnCleared returns if the "text_cn" field was cleared in this mutation.
func (m *ArticleMutation) TextCnCleared() bool {
	_, ok := m.clearedFields[article.FieldTextCn]
	return ok
}

// ResetTextCn resets all changes to the "text_cn" field.
func (m *ArticleMutation) ResetTextCn() {
	m.text_cn = nil
	delete(m.clearedFields, article.FieldTextCn)
}

// SetTextEn sets the "text_en" field.
func (m *ArticleMutation) SetTextEn(s string) {
	m.text_en = &s
}

// TextEn returns the value of the "text_en" field in the mutation.
func (m *ArticleMutation) TextEn() (r string, exists bool) {
	v := m.text_en
	if v == nil {
		return
	}
	return *v, true
}

// OldTextEn returns the old "text_en" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTextEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextEn: %w", err)
	}
	return oldValue.TextEn, nil
}

// ClearTextEn clears the value of the "text_en" field.
func (m *ArticleMutation) ClearTextEn() {
	m.text_en = nil
	m.clearedFields[article.FieldTextEn] = struct{}{}
}

// TextEnCleared returns if the "text_en" field was cleared in this mutation.
func (m *ArticleMutation) TextEnCleared() bool {
	_, ok := m.clearedFields[article.FieldTextEn]
	return ok
}

// ResetTextEn resets all changes to the "text_en" field.
func (m *ArticleMutation) ResetTextEn() {
	m.text_en = nil
	delete(m.clearedFields, article.FieldTextEn)
}

// SetCrawledAt sets the "crawled_at" field.
func (m *ArticleMutation) SetCrawledAt(t time.Time) {
	m.crawled_at = &t
}

// CrawledAt returns the value of the "crawled_at" field in the mutation.
func (m *ArticleMutation) CrawledAt() (r time.Time, exists bool) {
	v := m.crawled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCrawledAt returns the old "crawled_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCrawledAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrawledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrawledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrawledAt: %w", err)
	}
	return oldValue.CrawledAt, nil
}

// ResetCrawledAt resets all changes to the "crawled_at" field.
func (m *ArticleMutation) ResetCrawledAt() {
	m.crawled_at = nil
}

// SetSummaryCn sets the "summary_cn" field.
func (m *ArticleMutation) SetSummaryCn(s string) {
	m.summary_cn = &s
}

// SummaryCn returns the value of the "summary_cn" field in the mutation.
func (m *ArticleMutation) SummaryCn() (r string, exists bool) {
	v := m.summary_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldSummaryCn returns the old "summary_cn" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldSummaryCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummaryCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummaryCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummaryCn: %w", err)
	}
	return oldValue.SummaryCn, nil
}

// ClearSummaryCn clears the value of the "summary_cn" field.
func (m *ArticleMutation) ClearSummaryCn() {
	m.summary_cn = nil
	m.clearedFields[article.FieldSummaryCn] = struct{}{}
}

// SummaryCnCleared returns if the "summary_cn" field was cleared in this mutation.
func (m *ArticleMutation) SummaryCnCleared() bool {
	_, ok := m.clearedFields[article.FieldSummaryCn]
	return ok
}

// ResetSummaryCn resets all changes to the "summary_cn" field.
func (m *ArticleMutation) ResetSummaryCn() {
	m.summary_cn = nil
	delete(m.clearedFields, article.FieldSummaryCn)
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.origin_name != nil {
		fields = append(fields, article.FieldOriginName)
	}
	if m.origin_type != nil {
		fields = append(fields, article.FieldOriginType)
	}
	if m.url != nil {
		fields = append(fields, article.FieldURL)
	}
	if m.title_cn != nil {
		fields = append(fields, article.FieldTitleCn)
	}
	if m.title_en != nil {
		fields = append(fields, article.FieldTitleEn)
	}
	if m.author != nil {
		fields = append(fields, article.FieldAuthor)
	}
	if m.tags != nil {
		fields = append(fields, article.FieldTags)
	}
	if m.published_at != nil {
		fields = append(fields, article.FieldPublishedAt)
	}
	if m.html_cn != nil {
		fields = append(fields, article.FieldHTMLCn)
	}
	if m.html_en != nil {
		fields = append(fields, article.FieldHTMLEn)
	}
	if m.text_cn != nil {
		fields = append(fields, article.FieldTextCn)
	}
	if m.text_en != nil {
		fields = append(fields, article.FieldTextEn)
	}
	if m.crawled_at != nil {
		fields = append(fields, article.FieldCrawledAt)
	}
	if m.summary_cn != nil {
		fields = append(fields, article.FieldSummaryCn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldOriginName:
		return m.OriginName()
	case article.FieldOriginType:
		return m.OriginType()
	case article.FieldURL:
		return m.URL()
	case article.FieldTitleCn:
		return m.TitleCn()
	case article.FieldTitleEn:
		return m.TitleEn()
	case article.FieldAuthor:
		return m.Author()
	case article.FieldTags:
		return m.Tags()
	case article.FieldPublishedAt:
		return m.PublishedAt()
	case article.FieldHTMLCn:
		return m.HTMLCn()
	case article.FieldHTMLEn:
		return m.HTMLEn()
	case article.FieldTextCn:
		return m.TextCn()
	case article.FieldTextEn:
		return m.TextEn()
	case article.FieldCrawledAt:
		return m.CrawledAt()
	case article.FieldSummaryCn:
		return m.SummaryCn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldOriginName:
		return m.OldOriginName(ctx)
	case article.FieldOriginType:
		return m.OldOriginType(ctx)
	case article.FieldURL:
		return m.OldURL(ctx)
	case article.FieldTitleCn:
		return m.OldTitleCn(ctx)
	case article.FieldTitleEn:
		return m.OldTitleEn(ctx)
	case article.FieldAuthor:
		return m.OldAuthor(ctx)
	case article.FieldTags:
		return m.OldTags(ctx)
	case article.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case article.FieldHTMLCn:
		return m.OldHTMLCn(ctx)
	case article.FieldHTMLEn:
		return m.OldHTMLEn(ctx)
	case article.FieldTextCn:
		return m.OldTextCn(ctx)
	case article.FieldTextEn:
		return m.OldTextEn(ctx)
	case article.FieldCrawledAt:
		return m.OldCrawledAt(ctx)
	case article.FieldSummaryCn:
		return m.OldSummaryCn(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldOriginName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginName(v)
		return nil
	case article.FieldOriginType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginType(v)
		return nil
	case article.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case article.FieldTitleCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleCn(v)
		return nil
	case article.FieldTitleEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleEn(v)
		return nil
	case article.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case article.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case article.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case article.FieldHTMLCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLCn(v)
		return nil
	case article.FieldHTMLEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLEn(v)
		return nil
	case article.FieldTextCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextCn(v)
		return nil
	case article.FieldTextEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextEn(v)
		return nil
	case article.FieldCrawledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrawledAt(v)
		return nil
	case article.FieldSummaryCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummaryCn(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(article.FieldTitleCn) {
		fields = append(fields, article.FieldTitleCn)
	}
	if m.FieldCleared(article.FieldTitleEn) {
		fields = append(fields, article.FieldTitleEn)
	}
	if m.FieldCleared(article.FieldAuthor) {
		fields = append(fields, article.FieldAuthor)
	}
	if m.FieldCleared(article.FieldTags) {
		fields = append(fields, article.FieldTags)
	}
	if m.FieldCleared(article.FieldHTMLCn) {
		fields = append(fields, article.FieldHTMLCn)
	}
	if m.FieldCleared(article.FieldHTMLEn) {
		fields = append(fields, article.FieldHTMLEn)
	}
	if m.FieldCleared(article.FieldTextCn) {
		fields = append(fields, article.FieldTextCn)
	}
	if m.FieldCleared(article.FieldTextEn) {
		fields = append(fields, article.FieldTextEn)
	}
	if m.FieldCleared(article.FieldSummaryCn) {
		fields = append(fields, article.FieldSummaryCn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	switch name {
	case article.FieldTitleCn:
		m.ClearTitleCn()
		return nil
	case article.FieldTitleEn:
		m.ClearTitleEn()
		return nil
	case article.FieldAuthor:
		m.ClearAuthor()
		return nil
	case article.FieldTags:
		m.ClearTags()
		return nil
	case article.FieldHTMLCn:
		m.ClearHTMLCn()
		return nil
	case article.FieldHTMLEn:
		m.ClearHTMLEn()
		return nil
	case article.FieldTextCn:
		m.ClearTextCn()
		return nil
	case article.FieldTextEn:
		m.ClearTextEn()
		return nil
	case article.FieldSummaryCn:
		m.ClearSummaryCn()
		return nil
	}
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldOriginName:
		m.ResetOriginName()
		return nil
	case article.FieldOriginType:
		m.ResetOriginType()
		return nil
	case article.FieldURL:
		m.ResetURL()
		return nil
	case article.FieldTitleCn:
		m.ResetTitleCn()
		return nil
	case article.FieldTitleEn:
		m.ResetTitleEn()
		return nil
	case article.FieldAuthor:
		m.ResetAuthor()
		return nil
	case article.FieldTags:
		m.ResetTags()
		return nil
	case article.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case article.FieldHTMLCn:
		m.ResetHTMLCn()
		return nil
	case article.FieldHTMLEn:
		m.ResetHTMLEn()
		return nil
	case article.FieldTextCn:
		m.ResetTextCn()
		return nil
	case article.FieldTextEn:
		m.ResetTextEn()
		return nil
	case article.FieldCrawledAt:
		m.ResetCrawledAt()
		return nil
	case article.FieldSummaryCn:
		m.ResetSummaryCn()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Article edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
