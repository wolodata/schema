// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/predicate"
	"github.com/wolodata/schema/ent/promotconfig"
)

// PromotConfigUpdate is the builder for updating PromotConfig entities.
type PromotConfigUpdate struct {
	config
	hooks    []Hook
	mutation *PromotConfigMutation
}

// Where appends a list predicates to the PromotConfigUpdate builder.
func (pcu *PromotConfigUpdate) Where(ps ...predicate.PromotConfig) *PromotConfigUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetDescription sets the "description" field.
func (pcu *PromotConfigUpdate) SetDescription(s string) *PromotConfigUpdate {
	pcu.mutation.SetDescription(s)
	return pcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillableDescription(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetDescription(*s)
	}
	return pcu
}

// SetAPIModel sets the "api_model" field.
func (pcu *PromotConfigUpdate) SetAPIModel(s string) *PromotConfigUpdate {
	pcu.mutation.SetAPIModel(s)
	return pcu
}

// SetNillableAPIModel sets the "api_model" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillableAPIModel(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetAPIModel(*s)
	}
	return pcu
}

// SetAPIURL sets the "api_url" field.
func (pcu *PromotConfigUpdate) SetAPIURL(s string) *PromotConfigUpdate {
	pcu.mutation.SetAPIURL(s)
	return pcu
}

// SetNillableAPIURL sets the "api_url" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillableAPIURL(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetAPIURL(*s)
	}
	return pcu
}

// SetAPIKey sets the "api_key" field.
func (pcu *PromotConfigUpdate) SetAPIKey(s string) *PromotConfigUpdate {
	pcu.mutation.SetAPIKey(s)
	return pcu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillableAPIKey(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetAPIKey(*s)
	}
	return pcu
}

// SetPromptSystem sets the "prompt_system" field.
func (pcu *PromotConfigUpdate) SetPromptSystem(s string) *PromotConfigUpdate {
	pcu.mutation.SetPromptSystem(s)
	return pcu
}

// SetNillablePromptSystem sets the "prompt_system" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillablePromptSystem(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetPromptSystem(*s)
	}
	return pcu
}

// SetPromptUser sets the "prompt_user" field.
func (pcu *PromotConfigUpdate) SetPromptUser(s string) *PromotConfigUpdate {
	pcu.mutation.SetPromptUser(s)
	return pcu
}

// SetNillablePromptUser sets the "prompt_user" field if the given value is not nil.
func (pcu *PromotConfigUpdate) SetNillablePromptUser(s *string) *PromotConfigUpdate {
	if s != nil {
		pcu.SetPromptUser(*s)
	}
	return pcu
}

// Mutation returns the PromotConfigMutation object of the builder.
func (pcu *PromotConfigUpdate) Mutation() *PromotConfigMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PromotConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PromotConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PromotConfigUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PromotConfigUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcu *PromotConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotconfig.Table, promotconfig.Columns, sqlgraph.NewFieldSpec(promotconfig.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Description(); ok {
		_spec.SetField(promotconfig.FieldDescription, field.TypeString, value)
	}
	if value, ok := pcu.mutation.APIModel(); ok {
		_spec.SetField(promotconfig.FieldAPIModel, field.TypeString, value)
	}
	if value, ok := pcu.mutation.APIURL(); ok {
		_spec.SetField(promotconfig.FieldAPIURL, field.TypeString, value)
	}
	if value, ok := pcu.mutation.APIKey(); ok {
		_spec.SetField(promotconfig.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := pcu.mutation.PromptSystem(); ok {
		_spec.SetField(promotconfig.FieldPromptSystem, field.TypeString, value)
	}
	if value, ok := pcu.mutation.PromptUser(); ok {
		_spec.SetField(promotconfig.FieldPromptUser, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PromotConfigUpdateOne is the builder for updating a single PromotConfig entity.
type PromotConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromotConfigMutation
}

// SetDescription sets the "description" field.
func (pcuo *PromotConfigUpdateOne) SetDescription(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetDescription(s)
	return pcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillableDescription(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetDescription(*s)
	}
	return pcuo
}

// SetAPIModel sets the "api_model" field.
func (pcuo *PromotConfigUpdateOne) SetAPIModel(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetAPIModel(s)
	return pcuo
}

// SetNillableAPIModel sets the "api_model" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillableAPIModel(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetAPIModel(*s)
	}
	return pcuo
}

// SetAPIURL sets the "api_url" field.
func (pcuo *PromotConfigUpdateOne) SetAPIURL(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetAPIURL(s)
	return pcuo
}

// SetNillableAPIURL sets the "api_url" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillableAPIURL(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetAPIURL(*s)
	}
	return pcuo
}

// SetAPIKey sets the "api_key" field.
func (pcuo *PromotConfigUpdateOne) SetAPIKey(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetAPIKey(s)
	return pcuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillableAPIKey(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetAPIKey(*s)
	}
	return pcuo
}

// SetPromptSystem sets the "prompt_system" field.
func (pcuo *PromotConfigUpdateOne) SetPromptSystem(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetPromptSystem(s)
	return pcuo
}

// SetNillablePromptSystem sets the "prompt_system" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillablePromptSystem(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetPromptSystem(*s)
	}
	return pcuo
}

// SetPromptUser sets the "prompt_user" field.
func (pcuo *PromotConfigUpdateOne) SetPromptUser(s string) *PromotConfigUpdateOne {
	pcuo.mutation.SetPromptUser(s)
	return pcuo
}

// SetNillablePromptUser sets the "prompt_user" field if the given value is not nil.
func (pcuo *PromotConfigUpdateOne) SetNillablePromptUser(s *string) *PromotConfigUpdateOne {
	if s != nil {
		pcuo.SetPromptUser(*s)
	}
	return pcuo
}

// Mutation returns the PromotConfigMutation object of the builder.
func (pcuo *PromotConfigUpdateOne) Mutation() *PromotConfigMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the PromotConfigUpdate builder.
func (pcuo *PromotConfigUpdateOne) Where(ps ...predicate.PromotConfig) *PromotConfigUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PromotConfigUpdateOne) Select(field string, fields ...string) *PromotConfigUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PromotConfig entity.
func (pcuo *PromotConfigUpdateOne) Save(ctx context.Context) (*PromotConfig, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PromotConfigUpdateOne) SaveX(ctx context.Context) *PromotConfig {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PromotConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PromotConfigUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcuo *PromotConfigUpdateOne) sqlSave(ctx context.Context) (_node *PromotConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotconfig.Table, promotconfig.Columns, sqlgraph.NewFieldSpec(promotconfig.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotconfig.FieldID)
		for _, f := range fields {
			if !promotconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Description(); ok {
		_spec.SetField(promotconfig.FieldDescription, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.APIModel(); ok {
		_spec.SetField(promotconfig.FieldAPIModel, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.APIURL(); ok {
		_spec.SetField(promotconfig.FieldAPIURL, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.APIKey(); ok {
		_spec.SetField(promotconfig.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.PromptSystem(); ok {
		_spec.SetField(promotconfig.FieldPromptSystem, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.PromptUser(); ok {
		_spec.SetField(promotconfig.FieldPromptUser, field.TypeString, value)
	}
	_node = &PromotConfig{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
