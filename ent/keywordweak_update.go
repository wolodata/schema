// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/keywordweak"
	"github.com/wolodata/schema/ent/predicate"
)

// KeywordWeakUpdate is the builder for updating KeywordWeak entities.
type KeywordWeakUpdate struct {
	config
	hooks    []Hook
	mutation *KeywordWeakMutation
}

// Where appends a list predicates to the KeywordWeakUpdate builder.
func (kwu *KeywordWeakUpdate) Where(ps ...predicate.KeywordWeak) *KeywordWeakUpdate {
	kwu.mutation.Where(ps...)
	return kwu
}

// SetCategory sets the "category" field.
func (kwu *KeywordWeakUpdate) SetCategory(u uint64) *KeywordWeakUpdate {
	kwu.mutation.ResetCategory()
	kwu.mutation.SetCategory(u)
	return kwu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kwu *KeywordWeakUpdate) SetNillableCategory(u *uint64) *KeywordWeakUpdate {
	if u != nil {
		kwu.SetCategory(*u)
	}
	return kwu
}

// AddCategory adds u to the "category" field.
func (kwu *KeywordWeakUpdate) AddCategory(u int64) *KeywordWeakUpdate {
	kwu.mutation.AddCategory(u)
	return kwu
}

// SetWord sets the "word" field.
func (kwu *KeywordWeakUpdate) SetWord(s string) *KeywordWeakUpdate {
	kwu.mutation.SetWord(s)
	return kwu
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (kwu *KeywordWeakUpdate) SetNillableWord(s *string) *KeywordWeakUpdate {
	if s != nil {
		kwu.SetWord(*s)
	}
	return kwu
}

// Mutation returns the KeywordWeakMutation object of the builder.
func (kwu *KeywordWeakUpdate) Mutation() *KeywordWeakMutation {
	return kwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kwu *KeywordWeakUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, kwu.sqlSave, kwu.mutation, kwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kwu *KeywordWeakUpdate) SaveX(ctx context.Context) int {
	affected, err := kwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kwu *KeywordWeakUpdate) Exec(ctx context.Context) error {
	_, err := kwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kwu *KeywordWeakUpdate) ExecX(ctx context.Context) {
	if err := kwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kwu *KeywordWeakUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keywordweak.Table, keywordweak.Columns, sqlgraph.NewFieldSpec(keywordweak.FieldID, field.TypeString))
	if ps := kwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kwu.mutation.Category(); ok {
		_spec.SetField(keywordweak.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kwu.mutation.AddedCategory(); ok {
		_spec.AddField(keywordweak.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kwu.mutation.Word(); ok {
		_spec.SetField(keywordweak.FieldWord, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywordweak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kwu.mutation.done = true
	return n, nil
}

// KeywordWeakUpdateOne is the builder for updating a single KeywordWeak entity.
type KeywordWeakUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeywordWeakMutation
}

// SetCategory sets the "category" field.
func (kwuo *KeywordWeakUpdateOne) SetCategory(u uint64) *KeywordWeakUpdateOne {
	kwuo.mutation.ResetCategory()
	kwuo.mutation.SetCategory(u)
	return kwuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kwuo *KeywordWeakUpdateOne) SetNillableCategory(u *uint64) *KeywordWeakUpdateOne {
	if u != nil {
		kwuo.SetCategory(*u)
	}
	return kwuo
}

// AddCategory adds u to the "category" field.
func (kwuo *KeywordWeakUpdateOne) AddCategory(u int64) *KeywordWeakUpdateOne {
	kwuo.mutation.AddCategory(u)
	return kwuo
}

// SetWord sets the "word" field.
func (kwuo *KeywordWeakUpdateOne) SetWord(s string) *KeywordWeakUpdateOne {
	kwuo.mutation.SetWord(s)
	return kwuo
}

// SetNillableWord sets the "word" field if the given value is not nil.
func (kwuo *KeywordWeakUpdateOne) SetNillableWord(s *string) *KeywordWeakUpdateOne {
	if s != nil {
		kwuo.SetWord(*s)
	}
	return kwuo
}

// Mutation returns the KeywordWeakMutation object of the builder.
func (kwuo *KeywordWeakUpdateOne) Mutation() *KeywordWeakMutation {
	return kwuo.mutation
}

// Where appends a list predicates to the KeywordWeakUpdate builder.
func (kwuo *KeywordWeakUpdateOne) Where(ps ...predicate.KeywordWeak) *KeywordWeakUpdateOne {
	kwuo.mutation.Where(ps...)
	return kwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kwuo *KeywordWeakUpdateOne) Select(field string, fields ...string) *KeywordWeakUpdateOne {
	kwuo.fields = append([]string{field}, fields...)
	return kwuo
}

// Save executes the query and returns the updated KeywordWeak entity.
func (kwuo *KeywordWeakUpdateOne) Save(ctx context.Context) (*KeywordWeak, error) {
	return withHooks(ctx, kwuo.sqlSave, kwuo.mutation, kwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kwuo *KeywordWeakUpdateOne) SaveX(ctx context.Context) *KeywordWeak {
	node, err := kwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kwuo *KeywordWeakUpdateOne) Exec(ctx context.Context) error {
	_, err := kwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kwuo *KeywordWeakUpdateOne) ExecX(ctx context.Context) {
	if err := kwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kwuo *KeywordWeakUpdateOne) sqlSave(ctx context.Context) (_node *KeywordWeak, err error) {
	_spec := sqlgraph.NewUpdateSpec(keywordweak.Table, keywordweak.Columns, sqlgraph.NewFieldSpec(keywordweak.FieldID, field.TypeString))
	id, ok := kwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeywordWeak.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keywordweak.FieldID)
		for _, f := range fields {
			if !keywordweak.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keywordweak.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kwuo.mutation.Category(); ok {
		_spec.SetField(keywordweak.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kwuo.mutation.AddedCategory(); ok {
		_spec.AddField(keywordweak.FieldCategory, field.TypeUint64, value)
	}
	if value, ok := kwuo.mutation.Word(); ok {
		_spec.SetField(keywordweak.FieldWord, field.TypeString, value)
	}
	_node = &KeywordWeak{config: kwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywordweak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kwuo.mutation.done = true
	return _node, nil
}
