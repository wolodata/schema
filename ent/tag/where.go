// Code generated by ent, DO NOT EDIT.

package tag

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldID, id))
}

// English applies equality check predicate on the "english" field. It's identical to EnglishEQ.
func English(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldEnglish, v))
}

// Chinese applies equality check predicate on the "chinese" field. It's identical to ChineseEQ.
func Chinese(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldChinese, v))
}

// EnglishEQ applies the EQ predicate on the "english" field.
func EnglishEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldEnglish, v))
}

// EnglishNEQ applies the NEQ predicate on the "english" field.
func EnglishNEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldEnglish, v))
}

// EnglishIn applies the In predicate on the "english" field.
func EnglishIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldEnglish, vs...))
}

// EnglishNotIn applies the NotIn predicate on the "english" field.
func EnglishNotIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldEnglish, vs...))
}

// EnglishGT applies the GT predicate on the "english" field.
func EnglishGT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldEnglish, v))
}

// EnglishGTE applies the GTE predicate on the "english" field.
func EnglishGTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldEnglish, v))
}

// EnglishLT applies the LT predicate on the "english" field.
func EnglishLT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldEnglish, v))
}

// EnglishLTE applies the LTE predicate on the "english" field.
func EnglishLTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldEnglish, v))
}

// EnglishContains applies the Contains predicate on the "english" field.
func EnglishContains(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContains(FieldEnglish, v))
}

// EnglishHasPrefix applies the HasPrefix predicate on the "english" field.
func EnglishHasPrefix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasPrefix(FieldEnglish, v))
}

// EnglishHasSuffix applies the HasSuffix predicate on the "english" field.
func EnglishHasSuffix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasSuffix(FieldEnglish, v))
}

// EnglishEqualFold applies the EqualFold predicate on the "english" field.
func EnglishEqualFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEqualFold(FieldEnglish, v))
}

// EnglishContainsFold applies the ContainsFold predicate on the "english" field.
func EnglishContainsFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContainsFold(FieldEnglish, v))
}

// ChineseEQ applies the EQ predicate on the "chinese" field.
func ChineseEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldChinese, v))
}

// ChineseNEQ applies the NEQ predicate on the "chinese" field.
func ChineseNEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldChinese, v))
}

// ChineseIn applies the In predicate on the "chinese" field.
func ChineseIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldChinese, vs...))
}

// ChineseNotIn applies the NotIn predicate on the "chinese" field.
func ChineseNotIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldChinese, vs...))
}

// ChineseGT applies the GT predicate on the "chinese" field.
func ChineseGT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldChinese, v))
}

// ChineseGTE applies the GTE predicate on the "chinese" field.
func ChineseGTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldChinese, v))
}

// ChineseLT applies the LT predicate on the "chinese" field.
func ChineseLT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldChinese, v))
}

// ChineseLTE applies the LTE predicate on the "chinese" field.
func ChineseLTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldChinese, v))
}

// ChineseContains applies the Contains predicate on the "chinese" field.
func ChineseContains(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContains(FieldChinese, v))
}

// ChineseHasPrefix applies the HasPrefix predicate on the "chinese" field.
func ChineseHasPrefix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasPrefix(FieldChinese, v))
}

// ChineseHasSuffix applies the HasSuffix predicate on the "chinese" field.
func ChineseHasSuffix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasSuffix(FieldChinese, v))
}

// ChineseEqualFold applies the EqualFold predicate on the "chinese" field.
func ChineseEqualFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEqualFold(FieldChinese, v))
}

// ChineseContainsFold applies the ContainsFold predicate on the "chinese" field.
func ChineseContainsFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContainsFold(FieldChinese, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tag) predicate.Tag {
	return predicate.Tag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tag) predicate.Tag {
	return predicate.Tag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tag) predicate.Tag {
	return predicate.Tag(sql.NotPredicates(p))
}
