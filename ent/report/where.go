// Code generated by ent, DO NOT EDIT.

package report

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldID, id))
}

// ReportType applies equality check predicate on the "report_type" field. It's identical to ReportTypeEQ.
func ReportType(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReportType, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldEndTime, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCategory, v))
}

// TriggerUserID applies equality check predicate on the "trigger_user_id" field. It's identical to TriggerUserIDEQ.
func TriggerUserID(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTriggerUserID, v))
}

// TriggerAt applies equality check predicate on the "trigger_at" field. It's identical to TriggerAtEQ.
func TriggerAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTriggerAt, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldContent, v))
}

// GeneratedAt applies equality check predicate on the "generated_at" field. It's identical to GeneratedAtEQ.
func GeneratedAt(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldGeneratedAt, v))
}

// ReportTypeEQ applies the EQ predicate on the "report_type" field.
func ReportTypeEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldReportType, v))
}

// ReportTypeNEQ applies the NEQ predicate on the "report_type" field.
func ReportTypeNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldReportType, v))
}

// ReportTypeIn applies the In predicate on the "report_type" field.
func ReportTypeIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldReportType, vs...))
}

// ReportTypeNotIn applies the NotIn predicate on the "report_type" field.
func ReportTypeNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldReportType, vs...))
}

// ReportTypeGT applies the GT predicate on the "report_type" field.
func ReportTypeGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldReportType, v))
}

// ReportTypeGTE applies the GTE predicate on the "report_type" field.
func ReportTypeGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldReportType, v))
}

// ReportTypeLT applies the LT predicate on the "report_type" field.
func ReportTypeLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldReportType, v))
}

// ReportTypeLTE applies the LTE predicate on the "report_type" field.
func ReportTypeLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldReportType, v))
}

// ReportTypeContains applies the Contains predicate on the "report_type" field.
func ReportTypeContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldReportType, v))
}

// ReportTypeHasPrefix applies the HasPrefix predicate on the "report_type" field.
func ReportTypeHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldReportType, v))
}

// ReportTypeHasSuffix applies the HasSuffix predicate on the "report_type" field.
func ReportTypeHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldReportType, v))
}

// ReportTypeEqualFold applies the EqualFold predicate on the "report_type" field.
func ReportTypeEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldReportType, v))
}

// ReportTypeContainsFold applies the ContainsFold predicate on the "report_type" field.
func ReportTypeContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldReportType, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldEndTime, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldCategory, v))
}

// TriggerUserIDEQ applies the EQ predicate on the "trigger_user_id" field.
func TriggerUserIDEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTriggerUserID, v))
}

// TriggerUserIDNEQ applies the NEQ predicate on the "trigger_user_id" field.
func TriggerUserIDNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldTriggerUserID, v))
}

// TriggerUserIDIn applies the In predicate on the "trigger_user_id" field.
func TriggerUserIDIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldTriggerUserID, vs...))
}

// TriggerUserIDNotIn applies the NotIn predicate on the "trigger_user_id" field.
func TriggerUserIDNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldTriggerUserID, vs...))
}

// TriggerUserIDGT applies the GT predicate on the "trigger_user_id" field.
func TriggerUserIDGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldTriggerUserID, v))
}

// TriggerUserIDGTE applies the GTE predicate on the "trigger_user_id" field.
func TriggerUserIDGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldTriggerUserID, v))
}

// TriggerUserIDLT applies the LT predicate on the "trigger_user_id" field.
func TriggerUserIDLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldTriggerUserID, v))
}

// TriggerUserIDLTE applies the LTE predicate on the "trigger_user_id" field.
func TriggerUserIDLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldTriggerUserID, v))
}

// TriggerUserIDContains applies the Contains predicate on the "trigger_user_id" field.
func TriggerUserIDContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldTriggerUserID, v))
}

// TriggerUserIDHasPrefix applies the HasPrefix predicate on the "trigger_user_id" field.
func TriggerUserIDHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldTriggerUserID, v))
}

// TriggerUserIDHasSuffix applies the HasSuffix predicate on the "trigger_user_id" field.
func TriggerUserIDHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldTriggerUserID, v))
}

// TriggerUserIDIsNil applies the IsNil predicate on the "trigger_user_id" field.
func TriggerUserIDIsNil() predicate.Report {
	return predicate.Report(sql.FieldIsNull(FieldTriggerUserID))
}

// TriggerUserIDNotNil applies the NotNil predicate on the "trigger_user_id" field.
func TriggerUserIDNotNil() predicate.Report {
	return predicate.Report(sql.FieldNotNull(FieldTriggerUserID))
}

// TriggerUserIDEqualFold applies the EqualFold predicate on the "trigger_user_id" field.
func TriggerUserIDEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldTriggerUserID, v))
}

// TriggerUserIDContainsFold applies the ContainsFold predicate on the "trigger_user_id" field.
func TriggerUserIDContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldTriggerUserID, v))
}

// TriggerAtEQ applies the EQ predicate on the "trigger_at" field.
func TriggerAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldTriggerAt, v))
}

// TriggerAtNEQ applies the NEQ predicate on the "trigger_at" field.
func TriggerAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldTriggerAt, v))
}

// TriggerAtIn applies the In predicate on the "trigger_at" field.
func TriggerAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldTriggerAt, vs...))
}

// TriggerAtNotIn applies the NotIn predicate on the "trigger_at" field.
func TriggerAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldTriggerAt, vs...))
}

// TriggerAtGT applies the GT predicate on the "trigger_at" field.
func TriggerAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldTriggerAt, v))
}

// TriggerAtGTE applies the GTE predicate on the "trigger_at" field.
func TriggerAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldTriggerAt, v))
}

// TriggerAtLT applies the LT predicate on the "trigger_at" field.
func TriggerAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldTriggerAt, v))
}

// TriggerAtLTE applies the LTE predicate on the "trigger_at" field.
func TriggerAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldTriggerAt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldContent, v))
}

// GeneratedAtEQ applies the EQ predicate on the "generated_at" field.
func GeneratedAtEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldGeneratedAt, v))
}

// GeneratedAtNEQ applies the NEQ predicate on the "generated_at" field.
func GeneratedAtNEQ(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldGeneratedAt, v))
}

// GeneratedAtIn applies the In predicate on the "generated_at" field.
func GeneratedAtIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldGeneratedAt, vs...))
}

// GeneratedAtNotIn applies the NotIn predicate on the "generated_at" field.
func GeneratedAtNotIn(vs ...time.Time) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldGeneratedAt, vs...))
}

// GeneratedAtGT applies the GT predicate on the "generated_at" field.
func GeneratedAtGT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldGeneratedAt, v))
}

// GeneratedAtGTE applies the GTE predicate on the "generated_at" field.
func GeneratedAtGTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldGeneratedAt, v))
}

// GeneratedAtLT applies the LT predicate on the "generated_at" field.
func GeneratedAtLT(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldGeneratedAt, v))
}

// GeneratedAtLTE applies the LTE predicate on the "generated_at" field.
func GeneratedAtLTE(v time.Time) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldGeneratedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(sql.NotPredicates(p))
}
