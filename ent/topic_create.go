// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wolodata/schema/ent/topic"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tc *TopicCreate) SetUserID(s string) *TopicCreate {
	tc.mutation.SetUserID(s)
	return tc
}

// SetKeyword sets the "keyword" field.
func (tc *TopicCreate) SetKeyword(s string) *TopicCreate {
	tc.mutation.SetKeyword(s)
	return tc
}

// SetFollowTitle sets the "follow_title" field.
func (tc *TopicCreate) SetFollowTitle(b bool) *TopicCreate {
	tc.mutation.SetFollowTitle(b)
	return tc
}

// SetNillableFollowTitle sets the "follow_title" field if the given value is not nil.
func (tc *TopicCreate) SetNillableFollowTitle(b *bool) *TopicCreate {
	if b != nil {
		tc.SetFollowTitle(*b)
	}
	return tc
}

// SetFollowContent sets the "follow_content" field.
func (tc *TopicCreate) SetFollowContent(b bool) *TopicCreate {
	tc.mutation.SetFollowContent(b)
	return tc
}

// SetNillableFollowContent sets the "follow_content" field if the given value is not nil.
func (tc *TopicCreate) SetNillableFollowContent(b *bool) *TopicCreate {
	if b != nil {
		tc.SetFollowContent(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TopicCreate) SetID(s string) *TopicCreate {
	tc.mutation.SetID(s)
	return tc
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TopicCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TopicCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TopicCreate) defaults() {
	if _, ok := tc.mutation.FollowTitle(); !ok {
		v := topic.DefaultFollowTitle
		tc.mutation.SetFollowTitle(v)
	}
	if _, ok := tc.mutation.FollowContent(); !ok {
		v := topic.DefaultFollowContent
		tc.mutation.SetFollowContent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TopicCreate) check() error {
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Topic.user_id"`)}
	}
	if _, ok := tc.mutation.Keyword(); !ok {
		return &ValidationError{Name: "keyword", err: errors.New(`ent: missing required field "Topic.keyword"`)}
	}
	if v, ok := tc.mutation.Keyword(); ok {
		if err := topic.KeywordValidator(v); err != nil {
			return &ValidationError{Name: "keyword", err: fmt.Errorf(`ent: validator failed for field "Topic.keyword": %w`, err)}
		}
	}
	if _, ok := tc.mutation.FollowTitle(); !ok {
		return &ValidationError{Name: "follow_title", err: errors.New(`ent: missing required field "Topic.follow_title"`)}
	}
	if _, ok := tc.mutation.FollowContent(); !ok {
		return &ValidationError{Name: "follow_content", err: errors.New(`ent: missing required field "Topic.follow_content"`)}
	}
	return nil
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Topic.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		_node = &Topic{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(topic.Table, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(topic.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.Keyword(); ok {
		_spec.SetField(topic.FieldKeyword, field.TypeString, value)
		_node.Keyword = value
	}
	if value, ok := tc.mutation.FollowTitle(); ok {
		_spec.SetField(topic.FieldFollowTitle, field.TypeBool, value)
		_node.FollowTitle = value
	}
	if value, ok := tc.mutation.FollowContent(); ok {
		_spec.SetField(topic.FieldFollowContent, field.TypeBool, value)
		_node.FollowContent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tc *TopicCreate) OnConflict(opts ...sql.ConflictOption) *TopicUpsertOne {
	tc.conflict = opts
	return &TopicUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TopicCreate) OnConflictColumns(columns ...string) *TopicUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertOne{
		create: tc,
	}
}

type (
	// TopicUpsertOne is the builder for "upsert"-ing
	//  one Topic node.
	TopicUpsertOne struct {
		create *TopicCreate
	}

	// TopicUpsert is the "OnConflict" setter.
	TopicUpsert struct {
		*sql.UpdateSet
	}
)

// SetKeyword sets the "keyword" field.
func (u *TopicUpsert) SetKeyword(v string) *TopicUpsert {
	u.Set(topic.FieldKeyword, v)
	return u
}

// UpdateKeyword sets the "keyword" field to the value that was provided on create.
func (u *TopicUpsert) UpdateKeyword() *TopicUpsert {
	u.SetExcluded(topic.FieldKeyword)
	return u
}

// SetFollowTitle sets the "follow_title" field.
func (u *TopicUpsert) SetFollowTitle(v bool) *TopicUpsert {
	u.Set(topic.FieldFollowTitle, v)
	return u
}

// UpdateFollowTitle sets the "follow_title" field to the value that was provided on create.
func (u *TopicUpsert) UpdateFollowTitle() *TopicUpsert {
	u.SetExcluded(topic.FieldFollowTitle)
	return u
}

// SetFollowContent sets the "follow_content" field.
func (u *TopicUpsert) SetFollowContent(v bool) *TopicUpsert {
	u.Set(topic.FieldFollowContent, v)
	return u
}

// UpdateFollowContent sets the "follow_content" field to the value that was provided on create.
func (u *TopicUpsert) UpdateFollowContent() *TopicUpsert {
	u.SetExcluded(topic.FieldFollowContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopicUpsertOne) UpdateNewValues() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topic.FieldID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(topic.FieldUserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopicUpsertOne) Ignore() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertOne) DoNothing() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreate.OnConflict
// documentation for more info.
func (u *TopicUpsertOne) Update(set func(*TopicUpsert)) *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetKeyword sets the "keyword" field.
func (u *TopicUpsertOne) SetKeyword(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetKeyword(v)
	})
}

// UpdateKeyword sets the "keyword" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateKeyword() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateKeyword()
	})
}

// SetFollowTitle sets the "follow_title" field.
func (u *TopicUpsertOne) SetFollowTitle(v bool) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetFollowTitle(v)
	})
}

// UpdateFollowTitle sets the "follow_title" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateFollowTitle() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateFollowTitle()
	})
}

// SetFollowContent sets the "follow_content" field.
func (u *TopicUpsertOne) SetFollowContent(v bool) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetFollowContent(v)
	})
}

// UpdateFollowContent sets the "follow_content" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateFollowContent() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateFollowContent()
	})
}

// Exec executes the query.
func (u *TopicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopicUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TopicUpsertOne.ID is not supported by MySQL driver. Use TopicUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopicUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopicCreateBulk is the builder for creating many Topic entities in bulk.
type TopicCreateBulk struct {
	config
	err      error
	builders []*TopicCreate
	conflict []sql.ConflictOption
}

// Save creates the Topic entities in the database.
func (tcb *TopicCreateBulk) Save(ctx context.Context) ([]*Topic, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Topic, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TopicCreateBulk) SaveX(ctx context.Context) []*Topic {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TopicCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TopicCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TopicCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopicUpsertBulk {
	tcb.conflict = opts
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TopicCreateBulk) OnConflictColumns(columns ...string) *TopicUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// TopicUpsertBulk is the builder for "upsert"-ing
// a bulk of Topic nodes.
type TopicUpsertBulk struct {
	create *TopicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopicUpsertBulk) UpdateNewValues() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topic.FieldID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(topic.FieldUserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopicUpsertBulk) Ignore() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertBulk) DoNothing() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreateBulk.OnConflict
// documentation for more info.
func (u *TopicUpsertBulk) Update(set func(*TopicUpsert)) *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetKeyword sets the "keyword" field.
func (u *TopicUpsertBulk) SetKeyword(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetKeyword(v)
	})
}

// UpdateKeyword sets the "keyword" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateKeyword() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateKeyword()
	})
}

// SetFollowTitle sets the "follow_title" field.
func (u *TopicUpsertBulk) SetFollowTitle(v bool) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetFollowTitle(v)
	})
}

// UpdateFollowTitle sets the "follow_title" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateFollowTitle() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateFollowTitle()
	})
}

// SetFollowContent sets the "follow_content" field.
func (u *TopicUpsertBulk) SetFollowContent(v bool) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetFollowContent(v)
	})
}

// UpdateFollowContent sets the "follow_content" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateFollowContent() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateFollowContent()
	})
}

// Exec executes the query.
func (u *TopicUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TopicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
