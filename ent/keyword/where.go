// Code generated by ent, DO NOT EDIT.

package keyword

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Keyword {
	return predicate.Keyword(sql.FieldContainsFold(FieldID, id))
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldWord, v))
}

// ChinaWeakRelatedCount applies equality check predicate on the "china_weak_related_count" field. It's identical to ChinaWeakRelatedCountEQ.
func ChinaWeakRelatedCount(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldChinaWeakRelatedCount, v))
}

// ChinaStrongRelatedCount applies equality check predicate on the "china_strong_related_count" field. It's identical to ChinaStrongRelatedCountEQ.
func ChinaStrongRelatedCount(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldChinaStrongRelatedCount, v))
}

// SubWord applies equality check predicate on the "sub_word" field. It's identical to SubWordEQ.
func SubWord(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldSubWord, v))
}

// SubWordCount applies equality check predicate on the "sub_word_count" field. It's identical to SubWordCountEQ.
func SubWordCount(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldSubWordCount, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldCategory, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldUpdatedAt, v))
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldWord, v))
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldWord, v))
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldWord, vs...))
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldWord, vs...))
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldWord, v))
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldWord, v))
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldWord, v))
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldWord, v))
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldContains(FieldWord, v))
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldHasPrefix(FieldWord, v))
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldHasSuffix(FieldWord, v))
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEqualFold(FieldWord, v))
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldContainsFold(FieldWord, v))
}

// ChinaWeakRelatedCountEQ applies the EQ predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldChinaWeakRelatedCount, v))
}

// ChinaWeakRelatedCountNEQ applies the NEQ predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountNEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldChinaWeakRelatedCount, v))
}

// ChinaWeakRelatedCountIn applies the In predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldChinaWeakRelatedCount, vs...))
}

// ChinaWeakRelatedCountNotIn applies the NotIn predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountNotIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldChinaWeakRelatedCount, vs...))
}

// ChinaWeakRelatedCountGT applies the GT predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountGT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldChinaWeakRelatedCount, v))
}

// ChinaWeakRelatedCountGTE applies the GTE predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountGTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldChinaWeakRelatedCount, v))
}

// ChinaWeakRelatedCountLT applies the LT predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountLT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldChinaWeakRelatedCount, v))
}

// ChinaWeakRelatedCountLTE applies the LTE predicate on the "china_weak_related_count" field.
func ChinaWeakRelatedCountLTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldChinaWeakRelatedCount, v))
}

// ChinaStrongRelatedCountEQ applies the EQ predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldChinaStrongRelatedCount, v))
}

// ChinaStrongRelatedCountNEQ applies the NEQ predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountNEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldChinaStrongRelatedCount, v))
}

// ChinaStrongRelatedCountIn applies the In predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldChinaStrongRelatedCount, vs...))
}

// ChinaStrongRelatedCountNotIn applies the NotIn predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountNotIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldChinaStrongRelatedCount, vs...))
}

// ChinaStrongRelatedCountGT applies the GT predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountGT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldChinaStrongRelatedCount, v))
}

// ChinaStrongRelatedCountGTE applies the GTE predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountGTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldChinaStrongRelatedCount, v))
}

// ChinaStrongRelatedCountLT applies the LT predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountLT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldChinaStrongRelatedCount, v))
}

// ChinaStrongRelatedCountLTE applies the LTE predicate on the "china_strong_related_count" field.
func ChinaStrongRelatedCountLTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldChinaStrongRelatedCount, v))
}

// SubWordEQ applies the EQ predicate on the "sub_word" field.
func SubWordEQ(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldSubWord, v))
}

// SubWordNEQ applies the NEQ predicate on the "sub_word" field.
func SubWordNEQ(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldSubWord, v))
}

// SubWordIn applies the In predicate on the "sub_word" field.
func SubWordIn(vs ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldSubWord, vs...))
}

// SubWordNotIn applies the NotIn predicate on the "sub_word" field.
func SubWordNotIn(vs ...string) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldSubWord, vs...))
}

// SubWordGT applies the GT predicate on the "sub_word" field.
func SubWordGT(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldSubWord, v))
}

// SubWordGTE applies the GTE predicate on the "sub_word" field.
func SubWordGTE(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldSubWord, v))
}

// SubWordLT applies the LT predicate on the "sub_word" field.
func SubWordLT(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldSubWord, v))
}

// SubWordLTE applies the LTE predicate on the "sub_word" field.
func SubWordLTE(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldSubWord, v))
}

// SubWordContains applies the Contains predicate on the "sub_word" field.
func SubWordContains(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldContains(FieldSubWord, v))
}

// SubWordHasPrefix applies the HasPrefix predicate on the "sub_word" field.
func SubWordHasPrefix(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldHasPrefix(FieldSubWord, v))
}

// SubWordHasSuffix applies the HasSuffix predicate on the "sub_word" field.
func SubWordHasSuffix(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldHasSuffix(FieldSubWord, v))
}

// SubWordEqualFold applies the EqualFold predicate on the "sub_word" field.
func SubWordEqualFold(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldEqualFold(FieldSubWord, v))
}

// SubWordContainsFold applies the ContainsFold predicate on the "sub_word" field.
func SubWordContainsFold(v string) predicate.Keyword {
	return predicate.Keyword(sql.FieldContainsFold(FieldSubWord, v))
}

// SubWordCountEQ applies the EQ predicate on the "sub_word_count" field.
func SubWordCountEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldSubWordCount, v))
}

// SubWordCountNEQ applies the NEQ predicate on the "sub_word_count" field.
func SubWordCountNEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldSubWordCount, v))
}

// SubWordCountIn applies the In predicate on the "sub_word_count" field.
func SubWordCountIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldSubWordCount, vs...))
}

// SubWordCountNotIn applies the NotIn predicate on the "sub_word_count" field.
func SubWordCountNotIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldSubWordCount, vs...))
}

// SubWordCountGT applies the GT predicate on the "sub_word_count" field.
func SubWordCountGT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldSubWordCount, v))
}

// SubWordCountGTE applies the GTE predicate on the "sub_word_count" field.
func SubWordCountGTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldSubWordCount, v))
}

// SubWordCountLT applies the LT predicate on the "sub_word_count" field.
func SubWordCountLT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldSubWordCount, v))
}

// SubWordCountLTE applies the LTE predicate on the "sub_word_count" field.
func SubWordCountLTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldSubWordCount, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v uint64) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldCategory, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Keyword {
	return predicate.Keyword(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Keyword) predicate.Keyword {
	return predicate.Keyword(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Keyword) predicate.Keyword {
	return predicate.Keyword(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Keyword) predicate.Keyword {
	return predicate.Keyword(sql.NotPredicates(p))
}
