// Code generated by ent, DO NOT EDIT.

package keywordweak

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldContainsFold(FieldID, id))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldCategory, v))
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldWord, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v uint64) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLTE(FieldCategory, v))
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEQ(FieldWord, v))
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNEQ(FieldWord, v))
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldIn(FieldWord, vs...))
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldNotIn(FieldWord, vs...))
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGT(FieldWord, v))
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldGTE(FieldWord, v))
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLT(FieldWord, v))
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldLTE(FieldWord, v))
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldContains(FieldWord, v))
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldHasPrefix(FieldWord, v))
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldHasSuffix(FieldWord, v))
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldEqualFold(FieldWord, v))
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.FieldContainsFold(FieldWord, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KeywordWeak) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KeywordWeak) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KeywordWeak) predicate.KeywordWeak {
	return predicate.KeywordWeak(sql.NotPredicates(p))
}
