// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/html"
)

// Html is the model entity for the Html schema.
type Html struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// OriginShortID holds the value of the "origin_short_id" field.
	OriginShortID string `json:"origin_short_id,omitempty"`
	// IsChinese holds the value of the "is_chinese" field.
	IsChinese bool `json:"is_chinese,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// HTML holds the value of the "html" field.
	HTML string `json:"html,omitempty"`
	// CrawledAt holds the value of the "crawled_at" field.
	CrawledAt    time.Time `json:"crawled_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Html) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case html.FieldIsChinese:
			values[i] = new(sql.NullBool)
		case html.FieldID:
			values[i] = new(sql.NullInt64)
		case html.FieldOriginShortID, html.FieldURL, html.FieldHTML:
			values[i] = new(sql.NullString)
		case html.FieldCrawledAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Html fields.
func (h *Html) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case html.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = uint64(value.Int64)
		case html.FieldOriginShortID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin_short_id", values[i])
			} else if value.Valid {
				h.OriginShortID = value.String
			}
		case html.FieldIsChinese:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_chinese", values[i])
			} else if value.Valid {
				h.IsChinese = value.Bool
			}
		case html.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				h.URL = value.String
			}
		case html.FieldHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html", values[i])
			} else if value.Valid {
				h.HTML = value.String
			}
		case html.FieldCrawledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field crawled_at", values[i])
			} else if value.Valid {
				h.CrawledAt = value.Time
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Html.
// This includes values selected through modifiers, order, etc.
func (h *Html) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Html.
// Note that you need to call Html.Unwrap() before calling this method if this Html
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Html) Update() *HTMLUpdateOne {
	return NewHTMLClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Html entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Html) Unwrap() *Html {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Html is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Html) String() string {
	var builder strings.Builder
	builder.WriteString("Html(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("origin_short_id=")
	builder.WriteString(h.OriginShortID)
	builder.WriteString(", ")
	builder.WriteString("is_chinese=")
	builder.WriteString(fmt.Sprintf("%v", h.IsChinese))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(h.URL)
	builder.WriteString(", ")
	builder.WriteString("html=")
	builder.WriteString(h.HTML)
	builder.WriteString(", ")
	builder.WriteString("crawled_at=")
	builder.WriteString(h.CrawledAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Htmls is a parsable slice of Html.
type Htmls []*Html
