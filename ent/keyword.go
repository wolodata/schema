// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wolodata/schema/ent/keyword"
)

// Keyword is the model entity for the Keyword schema.
type Keyword struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Words holds the value of the "words" field.
	Words []string `json:"words,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Order holds the value of the "order" field.
	Order        uint64 `json:"order,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Keyword) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keyword.FieldWords:
			values[i] = new([]byte)
		case keyword.FieldOrder:
			values[i] = new(sql.NullInt64)
		case keyword.FieldID, keyword.FieldName, keyword.FieldColor:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Keyword fields.
func (k *Keyword) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keyword.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				k.ID = value.String
			}
		case keyword.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				k.Name = value.String
			}
		case keyword.FieldWords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field words", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &k.Words); err != nil {
					return fmt.Errorf("unmarshal field words: %w", err)
				}
			}
		case keyword.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				k.Color = value.String
			}
		case keyword.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				k.Order = uint64(value.Int64)
			}
		default:
			k.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Keyword.
// This includes values selected through modifiers, order, etc.
func (k *Keyword) Value(name string) (ent.Value, error) {
	return k.selectValues.Get(name)
}

// Update returns a builder for updating this Keyword.
// Note that you need to call Keyword.Unwrap() before calling this method if this Keyword
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Keyword) Update() *KeywordUpdateOne {
	return NewKeywordClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the Keyword entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Keyword) Unwrap() *Keyword {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Keyword is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Keyword) String() string {
	var builder strings.Builder
	builder.WriteString("Keyword(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("name=")
	builder.WriteString(k.Name)
	builder.WriteString(", ")
	builder.WriteString("words=")
	builder.WriteString(fmt.Sprintf("%v", k.Words))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(k.Color)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", k.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Keywords is a parsable slice of Keyword.
type Keywords []*Keyword
